If we have 100 test cases, and I want to run the only 80 Test cases.							VVVVIMMPPPPPPPPPP
			or
If we have 100 test cases, and I want to skip/Ignore  the 20 Test cases.						VVVVIMMPPPPPPPPPP
			or
how to run the specific groups															VVVVIMMPPPPPPPPPP
			or
how to execute the groups
			or
how to skip specific group.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
how to create group for test cases?
	- we use groups attribute by using group name in test level
syntax:
		@Test(groups={"SanityTesting"})
		public void d1()
		{

		}

can we mention 2 group name for same test cases?
	Yes

syntax:
		@Test(groups={"SanityTesting" , "RegressionTesting"})
		public void d2()
		{

		}

How to the specific group test cases?
		there are 2 ways we can run the groups test cases
		1) by using Run Configuration
		2) by using XML File


1) by using Run Configuration
	- if u want to run the group test cases using Run Configuration then we right click on class, go to Run Configuration Option then click in group name radio button and select the group name checkbox and click apply and run..



2) by using XML File
	- we use group tagname then run tagname and then include and exclude tags name after the test tags in xml file.
			
-----------------------------------------------------------------------------------------------------------------------------------
Scenario:
			Create Demo1 class
							- create d1 test case and create group as SanityTesting
							- create d2 test case and create group as RegressionTesting
							- create d3 test case and create group as SystemTesting

			create Sample1 class
							- create s1 test cases and create group as SanityTesting
							- create s2 test cases and create group as RegressionTesting
							- create s3 test case and create group as SystemTesting

			create Pune1 class
							- create p1 test cases and create group as SanityTesting
							- create p2 test cases and create group as RegressionTesting
							- create p3 test case and create group as SystemTesting


1. Run all the test cases from SanityTesting group

			XML(Extensive Markup Language) File

				<suite name="Project Name">
					<test name="Test case Name">
							<groups>
									<run>
											<include name="SanityTesting"/>
									</run>
							</groups>
					<classes>
							<class name="Tutorial1.Demo1" />
							<class name="Tutorial1.Sample1"/>		
							<class name="Tutorial1.Pune1"/>
					</classes>
					</test>
				</suite>				
-----------------------------------------------------------------------------------------------------------------------------------
2. Run all the test cases from SanityTesting group as well as RegressionTesting group

				<suite name="Project Name">
					<test name="Test case Name">
							<groups>
									<run>
											<include name="SanityTesting"/>
											<include name="RegressionTesting"/>
									</run>
							</groups>
					<classes>
							<class name="Tutorial1.Demo1" />
							<class name="Tutorial1.Sample1"/>		
							<class name="Tutorial1.Pune1"/>
					</classes>
					</test>
				</suite>
-----------------------------------------------------------------------------------------------------------------------------------
3. don't execute test cases from SystemTesting group

		<suite name="project name">
				<test name="test case name">
						<groups>
								<run>
										<exclude name="SystemTesting" />
								</run>
						</groups>
				<classes>
							<class name="Tutorial1.Demo1" />
							<class name="Tutorial1.Sample1"/>		
							<class name="Tutorial1.Pune1"/>
				</classes>
				</test>
		</suite>

-----------------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test name="Test">
		<groups>
			<run>
				<include name="SanityTesting"></include>
			</run>
		</groups>

		<classes>
			<class name="Tutorial1.Pune1" />
			<class name="Tutorial1.Demo1" />
			<class name="Tutorial1.Sample1" />
		</classes>
	</test> <!--
	Test -->
</suite> <!--
Suite -->
---------------------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test name="Test">
		<groups>
			<run>
				<exclude name="SystemTesting"></exclude>
			</run>
		</groups>

		<classes>
			<class name="Tutorial1.Sample1" />
			<class name="Tutorial1.Demo1" />
			<class name="Tutorial1.Pune1" />
		</classes>
	</test> <!--
	Test -->
</suite> <!--
Suite -->
---------------------------------------------------------------------------------------------------------------------------------------
@Test(groups={"loginPage"}
public void abc1()
{
				//statement
}

@Test(groups={"homePage"} , dependsOnGroups={"loginPage"})
public void abc2()
{
				//statement
}

--------------------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test name="Test">
		<groups>
			<run>
				<include name="RegressionTesting"></include>
				<include name="SanityTesting"></include>
			</run>
		</groups>

		<classes>
			<class name="Tutorial1.Sample1" />
			<class name="Tutorial1.Demo1" />
			<class name="Tutorial1.Pune1" />
		</classes>
	</test> <!--
	Test -->
</suite> <!--
Suite -->
============================================================================
package Tutorial1;

import org.testng.annotations.Test;

public class Demo1 {

	@Test(groups = { "SanityTesting","End2EndTesting" })
	public void d1() {
		System.out.println("D1 Test cases ::: SanityTesting group");
	}

	@Test(groups = { "RegressionTesting","End2EndTesting" }, dependsOnGroups = { "SanityTesting" })
	public void d2() {
		System.out.println("D2 Test Cases ::: RegressionTesting Group");
	}

	@Test(groups = { "SystemTesting","End2EndTesting" })
	public void d3() {
		System.out.println("D3 Test Cases ::: SystemTesting Group");
	}

}

package Tutorial1;

import org.testng.annotations.Test;

public class Sample1 {

	@Test(groups = { "SanityTesting","End2EndTesting" })
	
	public void s1() {
		System.out.println("S1 Test cases ::: SanityTesting group");
	}

	@Test(groups = { "RegressionTesting","End2EndTesting" }, dependsOnGroups= {"SanityTesting"})
	public void s2() {
		System.out.println("S2 Test Cases ::: RegressionTesting Group");
	}

	@Test(groups = { "SystemTesting","End2EndTesting" })
	public void s3() {
		System.out.println("S3 Test Cases ::: SystemTesting Group");
	}
	
	
}

package Tutorial1;

import org.testng.annotations.Test;

public class Pune1 {

	@Test(groups = { "SanityTesting","End2EndTesting" })
	public void p1() {
		System.out.println("P1 Test cases ::: SanityTesting group");
	}

	@Test(groups = { "RegressionTesting","End2EndTesting" },dependsOnGroups= {"SanityTesting"})
	public void p2() {
		System.out.println("P2 Test Cases ::: RegressionTesting Group");
	}

	@Test(groups = { "SystemTesting","End2EndTesting" })
	public void p3() {
		System.out.println("P3 Test Cases ::: SystemTesting Group");
	}

}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test name="Test">
		<groups>
			<run>
				<include name="End2EndTesting"/>
			</run>
		</groups>

		<classes>
			<class name="Tutorial1.Sample1" />
			<class name="Tutorial1.Demo1" />
			<class name="Tutorial1.Pune1" />
		</classes>
	</test> <!--
	Test -->
</suite> <!--
Suite -->
======================================================================================
Orange HRM Application
		- BaseLayer Package	
									-----> Base Class
														---> static initialization 
																		- Up casting
																		- open a url
																		- implicit wait 
																		- page load time out
																		- maximize the browser
		- Test layer package
								----> LoginPageTest 	
														@BeforeTest
														@Test(groups={"loginPage"})
														Test case LoginPageFunctionality
														@AfterTest

								----> HomePageTest													HomePage
														TC1-- verify the title
														TC2 --> verify the Url 
														TC3 --> verify the logo

								---->PIMPageTest														PIMPage
														TC1 ---> click on pim link and verify the user is on pim page
														TC2 ---> add new user
														TC3: ---> search employee using emp id

												
								-----> AdminPageTest													AdminPage
														TC1 	---> click on admin link and verify the user is on admin page
														TC2: 	--> Add user /employee

								

		

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test thread-count="5" name="Test">
		<groups>
			<run>
				<include name="End2EndTesting"></include>
				<include name="HomePage"></include>
				<include name="PIMPage"></include>
				<include name="AdminPage"></include>
			</run>
		</groups>
		<packages>
			<package name="TestLayer"></package>
		</packages>

	</test>
</suite> 
================================================================================
How to run fail test cases again and again										VVVVVVVVVVVVIMMMMMMMMPPPPPPP
	1) by using testng-failed.xml file
	2) by using IRetryAnalyzer interface
	3) by using IAnnotationTransformer interface


-------------------------------------------------------------------------------------------------------------------------------------------------------
how to achieve the data driven testing											VVVVVVVVVVVVIMMMMMMMMPPPPPPP	
																				VVVVVVVVVVVVIMMMMMMMMPPPPPPP
																				VVVVVVVVVVVVIMMMMMMMMPPPPPPP
																				VVVVVVVVVVVVIMMMMMMMMPPPPPPP

-------------------------------------------------------------------------------------------------------------------------------------------------------
how to run test cases parallel													VVVVVVVVVVVVIMMMMMMMMPPPPPPP


	























