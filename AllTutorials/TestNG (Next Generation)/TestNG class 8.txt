Data Driven Testing
--------------------------------------------------------------------------------------------------------------------------
Capture all values from excel sheet using Reusable script code and print in console

public class Demo1
{
	public static XSSFWorkbook workbook;

		public Demo1(String ExcelPath)
		{
				File f =new File(ExcelPath);
				FileInputStream fis =new FileInputStream(f);
				workbook =new XSSFWorkbook(fis);
		}

		public int getTotalRowCount(int sheetIndex)
		{
			XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
			int rows = sheet.getLastRowNum()+1;
			return rows;
		}

		public int getTotalColumnCount(int sheetIndex)
		{
			XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
			int cells = sheet.getRow(0).getLastCellNum();
			return cells;
		}
	
		public String getSheetTestData(int sheetIndex, int row, int cell)
		{
			//focus on specific sheet
			XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
				
			//focus on specific cell
			XSSFCell cells = sheet.getRow(row).getCell(cell);

			//check which type value is present in cell
			if(cells.getCellType() == XSSFCell.CELL_TYPE_STRING)
				{
					String  data1 = cells.getStringCellValue();
					return data1;
				}
			else if(cells.getCellType() == XSSFCell.CELL_TYPE_NUMERIC)
				{
					String data2 =cells.getRawValue();
					return data2;
				}

			return null;
		}	

}
===============================================================================
package Tutorial6;

import java.io.File;
import java.io.FileInputStream;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class Demo1 {
	public static XSSFWorkbook workbook;

	public Demo1(String excelPath) throws Exception {
		// step 1:: check file is present or not by creating object of File class and by
		// passing
		// file location
		File f = new File(excelPath);
		// step 2:: read all file content by creating object of FileInputStream and by
		// passing File class Instance
		FileInputStream fis = new FileInputStream(f);
		// step 3: load the all work sheet by creating object of XSSFWorkbook and by
		// passing FileInputStream instance
		workbook = new XSSFWorkbook(fis);
	}
	
	//create non static method with 1 int arguments and int return type
	public int getTotalRowCount(int sheetIndex)
	{
		//step 1: focus on specific sheet
		XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
		//step 2: capture the total rows in sheet
		int rows = sheet.getLastRowNum()+1;
		//step 3: return the capture rows
		return rows;
	}
	
	//create non static method with 1 int arguments and int return type
	public int getTotalColumnCount(int sheetIndex)
	{
		//step 1: focus on specific sheet
		XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
		
		//step 2: capture total columns in sheet by focusing on row 1 
		int cells = sheet.getRow(0).getLastCellNum();
		
		//step 3: return the capture cells or columns
		return cells;
	}
	
	//create non static method with 3 int arguments and Object return type
	public Object getSheetTestData(int sheetIndex, int row, int cell)
	{
		//step 1: focus on specific sheet
		XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
		
		//step 2: focus on specific cell
		XSSFCell cells = sheet.getRow(row).getCell(cell);
		
		//Step 3: check which type of value is present inside the cell
		//if cell is blank then return blank space
		if(cells.getCellType()== XSSFCell.CELL_TYPE_BLANK)
		{
			return "";
		}
		//if cell value type is String then return the String value
		else if(cells.getCellType() == XSSFCell.CELL_TYPE_STRING)
		{
			//Step 4: capture the String cell value
			String a = cells.getStringCellValue();
			return a;
		}
		//if cell value type is numeric then return the numeric value
		else if(cells.getCellType() == XSSFCell.CELL_TYPE_NUMERIC)
		{
			//step 5: capture the numeric cell value
			String b = cells.getRawValue();
			return b;
		}
		//if cell value type is boolean then return the boolean value
		else if(cells.getCellType()== XSSFCell.CELL_TYPE_BOOLEAN)
		{
			boolean c = cells.getBooleanCellValue();
			return c;
		}
		//if cell value type is formula then return the formula value
		else if(cells.getCellType() == XSSFCell.CELL_TYPE_FORMULA)
		{
			String d = cells.getCellFormula();
			return d;
		}
		
		//if above values are not matches then return the null.
		return null;
	}
	


	
}


package Tutorial6;

public class Sample1 {

	public static void main(String[] args) throws Exception {

		Demo1 obj = new Demo1("C:\\Users\\praf0\\OneDrive\\Desktop\\TestData1.xlsx");
		
		//count total rows in sheet
		int rows = obj.getTotalRowCount(0);
		
		//count total columns in sheet
		int columns = obj.getTotalColumnCount(0);
		
		Object[][] data =new Object[rows][columns];
		
		//iterate the rows
		for(int i=0;i<rows;i++)
		{
			//iterate the columns
			for(int j=0;j<columns;j++)
			{
				//capture all values one by one 
				data [i][j] = obj.getSheetTestData(0, i, j);	
			}
		}
		
		System.out.println(data[1][2]);
		
		
	}

}

package Tutorial6;

public class Sample2 {

	public static void main(String[] args) {
	
		Object [][] abc =new Object[4][2];
		
		abc[0][0]= "Username1";
		
		abc[0][1]="Password1";
		
		abc[1][0]="Username2";
		
		abc[1][1]="Password2";
		
		abc[2][0]="Username3";
		
		abc[2][1]="Password3";
		
		abc[3][0]=12345677;
		
		abc[3][1]=909090900;
		
		
		System.out.println(abc[1][1]);
		

	}

}
==========================================================================================
public class ExcelReader
{
public static XSSFWorkbook workbook;

		public ExcelReader(String excelPath)
		{
				File f =new File(excelPath);
				FileInputStream fis =new FileInputStream(f);
				workbook =new XSSFWorkbook(fis);
		}
	
		public int getTotalRowCount(int sheetIndex)
		{
				XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
				int rows = sheet.getLastRowNum()+1;
				return rows;
		}

		public int getTotalColumnCount(int sheetIndex)
		{
			XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
			int cells = sheet.getRow(0).getLastCellNum();
			return cells;
		}

		public Object getSheetTestData(int sheetIndex, int row, int cell)
		{
			XSSFSheet sheet = workbook.getSheetAt(sheetIndex);

			XSSFCell cells = sheet.getRow(row).getCell(cell);
		
			if(cells.getCellType() == XSSFCell.CELL_TYPE_BLANK)
			{
					return "";
			}
			else if(cells.getCellType() == XSSFCell.CELL_TYPE_STRING)
			{
					String  a=  cells.getStringCellValue();
					return a;
			}
			else if(cells.getCellType() == XSSFCell.CELL_TYPE_NUMERIC)
			{
					String b = cells.getRawValue();
					return b;
			}
			else if(cells.getCellType() == XSSFCell.CELL_TYPE_FORMULA)
			{
					String c = cells.getFormulaValue();
					return c;
			}
			else if(cells.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN)
			{
					boolean d = cells.getBooleanCellValue();
				return d;	
			}

			return null;
		}


		//create non static with Object[][] return type and 1 int arguments for sheet index

		public Object [][] getAllSheetTestData(int sheetIndex )
		{
				//count total rows in sheet
				int rows = getTotalRowCount(sheetIndex);
				//count total columns in sheet
				int cells = getTotalColumnCount(sheetIndex);
	
				//create Object[][] array with same rows and same columns
				
				Object[] [] data = new Object[rows] [cells];

			 	//iterate all rows 
				for(int i=0;i <rows; i++)
				{
					//iterate the columns
					for(int j=0; j< cells; j++)
					{
							//capture all values from excel sheet and store in Object [][] array.
							data [i][j] =getSheetTestData(sheetIndex, i ,j);
					}
				}


			return data;
		}		




}
=================================================================
package Tutorial6;

import java.io.File;
import java.io.FileInputStream;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelReader {
	public static XSSFWorkbook workbook;

	public ExcelReader(String excelPath) throws Exception {
		File f = new File(excelPath);
		FileInputStream fis = new FileInputStream(f);
		workbook = new XSSFWorkbook(fis);
	}

	public int getTotalRowCount(int sheetIndex) {
		XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
		int rows = sheet.getLastRowNum() + 1;
		return rows;
	}

	public int getTotalColumnCount(int sheetIndex) {
		XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
		int cells = sheet.getRow(0).getLastCellNum();
		return cells;
	}
	
	public Object getSheetTestData(int sheetIndex, int row, int cell)
	{
		XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
		XSSFCell cells = sheet.getRow(row).getCell(cell);
		
		if(cells.getCellType() == XSSFCell.CELL_TYPE_BLANK)
		{
			return "";
		}
		else if (cells.getCellType() == XSSFCell.CELL_TYPE_STRING)
		{
			String a = cells.getStringCellValue();
			return a;
		}
		else if(cells.getCellType() == XSSFCell.CELL_TYPE_NUMERIC)
		{
			String b = cells.getRawValue();
			return b;
		}
		else if(cells.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN)
		{
			boolean c = cells.getBooleanCellValue();
			return c;
		}
		else if(cells.getCellType() == XSSFCell.CELL_TYPE_FORMULA)
		{
			String d = cells.getCellFormula();
			return d ;
		}
		
		return null;
	}
	
	
	public Object[][] getAllSheetTestData(int sheetIndex)
	{
		int rows = getTotalRowCount(sheetIndex);
		int cells = getTotalColumnCount(sheetIndex);
		
		Object[] [] data = new Object[rows][cells];
		
		for(int i=0;i<rows;i++)
		{
			for(int j=0; j<cells;j++)
			{
				data[i][j] = getSheetTestData(sheetIndex, i, j);
			}
		}
		
		return data;
	}
	

}


package Tutorial6;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

public class Sample3 {

	@Test(dataProvider="fbTestData")
	public void abc(String firstName, String lastName, String username) throws InterruptedException {
		WebDriver driver = new ChromeDriver();
		driver.get("https://www.facebook.com/reg");

		driver.findElement(By.name("firstname")).sendKeys(firstName);
		
		driver.findElement(By.name("lastname")).sendKeys(lastName);
		
		driver.findElement(By.name("reg_email__")).sendKeys(username);
		
		Thread.sleep(4000);
		
		driver.quit();
	}
	
	@DataProvider(name="fbTestData")
	public Object[][] xyz() throws Exception
	{
		ExcelReader obj =new ExcelReader("C:\\Users\\praf0\\OneDrive\\Desktop\\TestData1.xlsx");
		
		Object[][] data = obj.getAllSheetTestData(0);
		
		return data;
	}
	
	

}
=================================================================================
package Tutorial6;

import java.io.File;
import java.io.FileInputStream;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelReader {
	public static XSSFWorkbook workbook;

	public ExcelReader(String excelPath) throws Exception {
		File f = new File(excelPath);
		FileInputStream fis = new FileInputStream(f);
		workbook = new XSSFWorkbook(fis);
	}

	public int getTotalRowCount(int sheetIndex) {
		XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
		int rows = sheet.getLastRowNum() + 1;
		return rows;
	}

	public int getTotalColumnCount(int sheetIndex) {
		XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
		int cells = sheet.getRow(0).getLastCellNum();
		return cells;
	}
	
	public Object getSheetTestData(int sheetIndex, int row, int cell)
	{
		XSSFSheet sheet = workbook.getSheetAt(sheetIndex);
		XSSFCell cells = sheet.getRow(row).getCell(cell);
		
		if(cells.getCellType() == XSSFCell.CELL_TYPE_BLANK)
		{
			return "";
		}
		else if (cells.getCellType() == XSSFCell.CELL_TYPE_STRING)
		{
			String a = cells.getStringCellValue();
			return a;
		}
		else if(cells.getCellType() == XSSFCell.CELL_TYPE_NUMERIC)
		{
			String b = cells.getRawValue();
			return b;
		}
		else if(cells.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN)
		{
			boolean c = cells.getBooleanCellValue();
			return c;
		}
		else if(cells.getCellType() == XSSFCell.CELL_TYPE_FORMULA)
		{
			String d = cells.getCellFormula();
			return d ;
		}
		
		return null;
	}
	
	
	public Object[][] getAllSheetTestData(int sheetIndex)
	{
		int rows = getTotalRowCount(sheetIndex);
		int cells = getTotalColumnCount(sheetIndex);
		
		Object[] [] data = new Object[rows][cells];
		
		for(int i=0;i<rows;i++)
		{
			for(int j=0; j<cells;j++)
			{
				data[i][j] = getSheetTestData(sheetIndex, i, j);
			}
		}
		
		return data;
	}
	
	


}

--------------------------------------------------------------------------
package Tutorial6;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

public class Sample4 {

	@Test(dataProvider = "testdata")
	public void registerTestCase(String fName, String lName, String phone, String email, String city, String state)
			throws InterruptedException {
		WebDriver driver = new ChromeDriver();
		driver.get("https://demo.guru99.com/test/newtours/register.php");
		driver.findElement(By.name("firstName")).sendKeys(fName);
		driver.findElement(By.name("lastName")).sendKeys(lName);
		driver.findElement(By.name("phone")).sendKeys(phone);
		driver.findElement(By.name("userName")).sendKeys(email);
		driver.findElement(By.name("city")).sendKeys(city);
		driver.findElement(By.name("state")).sendKeys(state);

		Thread.sleep(7000);
		driver.quit();
	}

	@DataProvider(name = "testdata")
	public Object[][] getTestData() throws Exception {
		ExcelReader obj = new ExcelReader("C:\\Users\\praf0\\OneDrive\\Desktop\\TestData1.xlsx");

		Object[][] data = obj.getAllSheetTestData(0);

		return data;
	}

}
----------------------------------------------------------------------------------------------------------
Ass:			Facebook assignment				--> at least 7 rows 
		store all test data in excel sheet, first name, last name, username, password, date, month , year and gender
		capture the screenshot

		- write reusable script code to capture all values from excel sheet and convert to Object[] [] array.

----------------------------------------------------------------------------------------------------------
Ass:			Orange HRM

		TC1: login
		TC2: validate home page title
		TC3" validate home page url
		TC4: validate pim page
		TC5: create 7employee or users			---> store test data in excel sheet
				--> click on add employee button
				--> enter first name, middle name and last name
				---> capture the employee id and store globally
				-- click on save button
				--> click on employee list
				--> enter the captured employee id in employee id search text box
				--> click on search button
										---> add assertion for validate first name and last name.
										--->search displayed name should be equal to excel sheet name
				-- > take the screenshot

		TC6: logout application






		





























