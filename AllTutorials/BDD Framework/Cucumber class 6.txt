	<!-- https://mvnrepository.com/artifact/com.aventstack/extentreports -->
		<dependency>
			<groupId>com.aventstack</groupId>
			<artifactId>extentreports</artifactId>
			<version>5.0.9</version>
		</dependency>


		<!--
		https://mvnrepository.com/artifact/tech.grasshopper/extentreports-cucumber7-adapter -->
		<dependency>
			<groupId>tech.grasshopper</groupId>
			<artifactId>extentreports-cucumber7-adapter</artifactId>
			<version>1.7.0</version>
		</dependency>
=============================================================================

Configure Extent Reports with Cucumber 
=============================================================================
	- Extent Adapter Reports is standard reporting library to generate the reports in cucumber BBD Framework.
	- By using Extent Adapter Reports we can generate HTML reports as well as we can attach the screenshot in reports.
	- To generate the Extent Reports we add extent-adapter dependency inside the pom.xml file as per the cucumber version.
	- and then we create extent.properties file inside the src/test/resources package and we do configuration in properties file and we mention reports plugin name inside the test runner class.

	
1) Create extent.properties file inside the src/test/resources
		
step 1: if we want to start generating extent reports use extent.reporter.spark.start key and value as true

syntax:
		extent.reporter.spark.start=true


step 2: if we want to store generated reports in destination location then use extent.reporter.spark.out as key and value as location

syntax;
		extent.reporter.spark.out=ExtenReports/abc.html



2) Inside the Test runner class and @CucumberOptions annotations we use plugin keyword and inside the plugin we pass value as com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:
	
	@RunWith(Cucumber.class)
	@CucumberOptions
				(
				features="src/test/java/Features",
				glue="StepDefinitions",
				plugin="com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:"
				)
	public class RunnerTest
	{

	}
========================================================================================
extent.properties  file in src/test/resources

1. store extent reports in base folder
	basefolder.name=ExtentReports/

2. crate current date and time folder inside the ExtentReports folder
	basefolder.datetimepatter = ddMMyyyy_HHmmss

3. start generating Extent HTML reports
	extent.reporter.spark.start=true

4.  stop generating reports
	extent.reporter.spark.out=/xyz.html

--------------------------------------------------------------------------
Extent PDF Reports

5. start generating pdf reports
	extent.reporter.pdf.start=true

6. store generated pdf reports in destination location
	extent.reporter.pdf.out=/abc.pdf
========================================================================================
7. Mention project name in reports by using systeminfo.AppName= application name 

	systeminfo.AppName=Orange HRM Application


8. mention build name or release name inside the reports
	
	systeminfo.build= Release 20.0 

9. mention the operating system name

	systeminfo.os=Window 11 OS


10. Mention Tester name

	systeminfo.User=Aboli Shinde

11. create screenshot folder
		
	screenshot.dir=/Screenshot/

12. store all screenshot from path

	screenshot.rel.path=../Screenshot/

=========================================================================

Take screenshot as per the scenario wise and attach screenshot to reports
- to take the takes the screenshot we use hooks annotations

	@After
	public static void teardown(Scenario scenario)
	{
		if(scenario.isFailed())
		{
					TakesScreenshot ts = (TakesScreenshot)driver;
					byte [] b = ts.getScreenshotAs(OutputType.BYTES);
					scenario.attach(b, "image/png","Screenshot name for failed Login Page Scenario")
		}			
		else
		{
					TakesScreenshot ts = (TakesScreenshot)driver;
					byte [] b = ts.getScreenshotAs(OutputType.BYTES);
					scenario.attach(b, "image/png","Screenshot name for Passed Login Page Scenario");
		}
	}

==========================================================
basefolder.name=ExtentReports/
basefolder.datetimepattern=ddMMyyyy_HHmmss
extent.reporter.spark.start=true
extent.reporter.spark.out=/extenteports.html

extent.reporter.pdf.start=true
extent.reporter.pdf.out=/extentreports.pdf

systeminfo.AppName=Orange HRM Application

systeminfo.Build=Release 20.0

systeminfo.OS=Window 11 64 bit

systeminfo.user=Aboli Shinde

screenshot.dir=Screenshot/

screenshot.rel.path=../Screenshot/



package StepDefinitions;

import java.io.File;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Date;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.cucumber.java.AfterStep;
import io.cucumber.java.Scenario;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class PIMPageStepsTest {
	static WebDriver driver;

	@Given("user is on login Page")
	public void user_is_on_login_page() {
		driver = new ChromeDriver();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.get("https://opensource-demo.orangehrmlive.com/web/index.php/auth/login");
	}

	@When("user enter valid username and password")
	public void user_enter_valid_username_and_password() {
		driver.findElement(By.name("username")).sendKeys("Admin");
		driver.findElement(By.name("password")).sendKeys("admin123");

	}

	@Then("user click on login button")
	public void user_click_on_login_button() {
		driver.findElement(By.xpath("//button[text()=' Login ']")).click();
	}

	@AfterStep
	public static void tearDown(Scenario scenario) throws Exception {
		Thread.sleep(4000);
		if (scenario.isFailed()) {
			TakesScreenshot ts = (TakesScreenshot) driver;
			byte[] b = ts.getScreenshotAs(OutputType.BYTES);
			scenario.attach(b, "image/png", "Login Scenario Failed Name");

			File src = ts.getScreenshotAs(OutputType.FILE);

			String date = new SimpleDateFormat("ddMMyyyy_HHmmss").format(new Date());

			FileUtils.copyFile(src, new File(System.getProperty("user.dir") + "//screenshot//" + date + ".png"));

		} else {

			TakesScreenshot ts = (TakesScreenshot) driver;

			byte[] b = ts.getScreenshotAs(OutputType.BYTES);

			scenario.attach(b, "image/png", "Login Scenario Passed Name");
			File src = ts.getScreenshotAs(OutputType.FILE);

			String date = new SimpleDateFormat("ddMMyyyy_HHmmss").format(new Date());

			FileUtils.copyFile(src, new File(System.getProperty("user.dir") + "//screenshot//" + date + ".png"));
		}
	}

}

======================================================================================
Configure Extent Cucumber Adapter Reports in BDD Framework							
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
inside the src/test/resources folder we create extent.properties file and inside these file we mention configuration of Extent Reports

step 1: create base folder for reports in project location
					basefolder.name=ExtentAndPDFReports/

step 2:create date time folder inside the base folder
					datetimepattern=ddMMyyyy_HHmmss

step 3: start generating spark reports
					extent.reporter.spark.start=true

step 4: stop generating spark reports and store in destination location
					extent.reporter.spark.out=/extentspark.html
			
step 5: start generating html reports
					extent.reporter.html.start=true

step 6: stop generating html reports and store in destination location
					extent.reporter.html.out=/extenthtml.html

step 7: start generating pdf reports
					extent.reporter.pdf.start=true

step 8: stop generating pdf reports and store in destination location
					extent.reporter.pdf.out=/extentpdf.pdf

----------------------------------------------------------------------------------------------------------------------
how to enable this report
	in test runner class, inside the plugin attribute we mention extent reports name
		plugin={"pretty", "com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:"}


----------------------------------------------------------------------------------------------------------------------
#create Base Reports Folder
basefolder.name=ExtentAndPDFReports/

#inside the Base Folder create date and time folder
basefolder.datetimepattern=ddMMyyyy_HHmmss

#start generating extent Spark reports
extent.reporter.spark.start=true

#stop generating extent reports and store in date and time folder
extent.reporter.spark.out=/ExtentSpark.html

#start generating Extent html reports
extent.reporter.html.start=true

#stop generating extent html reports and store in date and time folder
extent.reporter.html.out=/ExtentHtml.html

#Start generating PDF Reports
extent.reporter.pdf.start=true

#stop generating pdf reports and store in date and time folder
extent.reporter.pdf.out=/ExtentPDF.pdf

#create screenshot folder
screenshot.dir=Screenshot

#capture screenshot from Screenshot folder and attach to reports
screenshot.rel.path=../Screenshot/

#Mention the OS information
systeminfo.os=Window 11 64 bit OS

#Mention the application Name

systeminfo.AppName=Facebook Application

#Mention the Build information
systeminfo.build=Release 10 and Build 1

#Mention Automation Test Name

systeminfo.user=Abhijit

=============================================================================================

package TestRunner;

import io.cucumber.testng.AbstractTestNGCucumberTests;
import io.cucumber.testng.CucumberOptions;

@CucumberOptions
			(
			features="src/test/java/Features",
			glue="Steps",
			tags="@RegisterFunctionality",
			plugin= {"pretty","com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:"}
			)

public class RunnerTest  extends AbstractTestNGCucumberTests{
	
}

=============================================================================================

		<!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-testng -->
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-testng</artifactId>
			<version>7.14.0</version>
		</dependency>

		<!--
		https://mvnrepository.com/artifact/tech.grasshopper/extent-pdf-report -->
		<dependency>
			<groupId>tech.grasshopper</groupId>
			<artifactId>extent-pdf-report</artifactId>
			<version>2.12.0</version>
		</dependency>

		<!--
		https://mvnrepository.com/artifact/tech.grasshopper/htmlextentreporter -->
		<dependency>
			<groupId>tech.grasshopper</groupId>
			<artifactId>htmlextentreporter</artifactId>
			<version>1.1.0</version>
		</dependency>

		<!--
		https://mvnrepository.com/artifact/tech.grasshopper/extentreports-cucumber7-adapter -->
		<dependency>
			<groupId>tech.grasshopper</groupId>
			<artifactId>extentreports-cucumber7-adapter</artifactId>
			<version>1.10.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.aventstack/extentreports -->
		<dependency>
			<groupId>com.aventstack</groupId>
			<artifactId>extentreports</artifactId>
			<version>5.0.9</version>
		</dependency>


==================================================================================
package UitlityLayer;

import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import io.cucumber.java.sl.Ce;

public class ExcelReader {
	static XSSFWorkbook workbook;
	static XSSFSheet sheets;

	public List<Map<String, Object>> getAllSheetTestData(String excelSheetPath, String sheetName) {

		try {
			// read all file content
			FileInputStream fis = new FileInputStream(excelSheetPath);
			// load all excel sheet
			workbook = new XSSFWorkbook(fis);

		} catch (Exception e) {
			e.printStackTrace();
		}

		// focus on specific sheet
		XSSFSheet sheets = workbook.getSheet(sheetName);

		// capture total rows in sheet
		int rowCount = sheets.getLastRowNum();

		// create object of List<Map<String, String>.
		List<Map<String, Object>> rowTestData = new ArrayList<Map<String, Object>>();

		// iterate all rows
		for (int i = 1; i <= rowCount; i++) {

			// count columns
			int cellCount = sheets.getRow(0).getLastCellNum();

			// create object of LinkedHashMap<String, String>>
			LinkedHashMap<String, Object> columnTestData = new LinkedHashMap<String, Object>();

			// iterate columns value
			for (int j = 0; j < cellCount; j++) {
				// capture the column heading or headers value
				String columnHeading = sheets.getRow(0).getCell(j).getStringCellValue();

				XSSFCell cells = sheets.getRow(i).getCell(j);
				if (cells.getCellType() == XSSFCell.CELL_TYPE_BLANK) {
					// put all value inside the LinkedHashMap object
					columnTestData.put(columnHeading, "");
				} else if (cells.getCellType() == XSSFCell.CELL_TYPE_STRING) {
					String cellValue = cells.getStringCellValue();
					// put all value inside the LinkedHashMap object
					columnTestData.put(columnHeading, cellValue);

				} else if (cells.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {
					String cellValue = cells.getRawValue();
					columnTestData.put(columnHeading, cellValue);
				} else if (cells.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) {
					boolean cellValue = cells.getBooleanCellValue();
					columnTestData.put(columnHeading, cellValue);
				} else if (cells.getCellType() == XSSFCell.CELL_TYPE_FORMULA) {
					String cellValue = cells.getCellFormula();
					columnTestData.put(columnHeading, cellValue);
				} else {
					System.out.println("Please check Excel Sheet");
				}

			}

			// add value inside the List<Map<String, String> object
			rowTestData.add(columnTestData);
		}

		return rowTestData;
	}

}


































































