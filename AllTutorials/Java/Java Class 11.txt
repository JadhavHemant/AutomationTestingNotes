Constructor in Java												VVVVVVIMMPPPPPPPPPPPPPPPPPPPPP
-----------------------------------------------------------------------------------------------------------------------
	- Constructor is special member of class.
	- Constructor is block of code which is similar to methods. and it will call automatically when object is created.
	- Once we create object of the class, Constructor will call automatically and it is responsible to store all non static data members in heap memory.
	- Constructor is used to load all non static method into the Object in heap memory.
	- When we create object of  class using new keyword Constructor will call automatically.
	- at the creating the Constructor we have follow the some rules
			i) Constructor name should be same as like class name
			ii) there is non return type for Constructor
			iii) we can not declare Constructor as static , final and abstract.				VVVVVVVIMMMMPPP

	there are 3 types of Constructor
			1) default Constructor
			2) No Arguments Constructor
			3) Parameterized Constructor
	
	1) default Constructor
			- if Constructor is not declared is class then java compiler will provide the default Constructor.
		

	2) No Arguments Constructor
			- it is also called as user defined Constructor, if we define any user defined Constructor then java compiler will not provide the default Constructor.

	3) Parameterized Constructor
			- in Parameterized Constructor if we pass any arguments or parameter then at the time of creating object of class we have pass the parameter values.
	
syntax:
		accessmodifier classname()
		{
				//statement
		}


can we achieve the method overloading for  Constructor
		yes

can we create private Constructor							VVVVVVVVIMMMPPPP
		yes, 
	if we create private constructor then we can not create object of the class outside the class.
	 we achieve single tone design pattern by declare the private Constructor.


can we create protected Constructor
		yes

can we create abstract Constructor
		No

why we can't create abstract Constructor						VVVVVVVVIMMMPPPP
	- once we declare any abstract methods or constructor compulsory we have implemented these method in another class.
	but in java we can not create 2 classes with same name.

can we create final Constructor?								VVVVVVVVIMMMPPPP	
	No

can we create static Constructor?
	No


where we use Constructor in selenium?					VVVVVVVVIMMMPPPP
	- in select class by passing WebElement arguments
	- in Actions class by passing WebDriver arguments
	- in Dimension class by passing 2 int arguments as width and height 
	- in WebDriverWait class by passing Webdriver arguments and Duration time in seconds.



Where u have used Constructor in framework?				VVVVVVVVIMMMPPPP
	- in base class we have created 0 args constructor and inside the constructor we reading properties from properties file.
	and also we have create constructor in page layer classes to initialize the Object repository.
	and also we have create 1 arguments constructor in ExcelReader with String arguments.

-----------------------------------------------------------------------------------------------------------------------------
if we create 1 int arguments constructor in parent class and if we dont create constructor in child class what will happen?
	- we will compile time error codes.

-----------------------------------------------------------------------------------------------------------------------------
super keyword													VVVVVVVVIMMMPPPP
	- it used to call the parent class constructor 

can we use super keyword 2 times or more times in same constructor
	No

can we use super keyword in 2nd line in constructor
	No
-----------------------------------------------------------------------------------------------------------------------------

this keyword												VVVVVVVVIMMMPPPP
	- it used to call the same class constructor

can we use this keyword 2 times or more times in same constructor
	No

can we use this keyword in 2nd line in constructor
	No
-----------------------------------------------------------------------------------------------------------------------------
can we use this and super keyword in same constructor							VVVVVVVVIMMMPPPP
	No


-----------------------------------------------------------------------------------------------------------------------------

package Tutorial1;

public class Demo1 {

	public Demo1(String a) {
		System.out.println("1 String args constructor " + a);
	}

	public Demo1(int a) {
		System.out.println("1 int args constructor");
	}

	public Demo1() {
		System.out.println("0 args constructor");
	}

	public static void main(String[] args) {

		Demo1 obj = new Demo1("cucumber");

	}

}
==========================================================================
package Tutorial1;

public class Demo2 {

	public Demo2()
	{
		System.out.println("0 args Constructor Demo2 class");
	}
	
	public void a1()
	{
		System.out.println("a1 method in Demo2 class");
	}
	
}

package Tutorial1;

public class Sample2 extends Demo2 {

	public Sample2() {
		System.out.println("0 args constructor in Sample2 class");
	}

	public void a2() {
		System.out.println("a2 method in Sample2 class");
	}

	public static void main(String[] args) {

		// if we create constructor in parent class as well as child class then first it
		// invoke the parent class constructor and then it invoke the child class constructor

		Sample2 obj = new Sample2();

	}

}
===================================================================================
package Tutorial1;

public class Demo2 {

	public Demo2()
	{
		System.out.println("0 args Constructor Demo2 class");
	}
	

	
}

package Tutorial1;

public class Sample2 extends Demo2 {

	public Sample2(int a) 
	{
		System.out.println("1 int args constructor in Sample2 class");
	}



	public static void main(String[] args) {

		// if we create constructor in parent class as well as child class then first it
		// invoke the parent class constructor and then it invoke the child class constructor

		Sample2 obj = new Sample2(100);

	}

}
==============================================================================
package Tutorial1;

public class Demo2 {

	public Demo2()
	{
		System.out.println("0 args Constructor Demo2 class");
	}
	

	public Demo2(int a )
	{
		System.out.println("1 int args Constructor Demo2 class");
	}
	
}
package Tutorial1;

public class Sample2 extends Demo2 {

	public Sample2(int a) 
	{
		System.out.println("1 int args constructor in Sample2 class");
	}



	public static void main(String[] args) {

		// if we create constructor in parent class as well as child class then first it
		// invoke the parent class constructor and then it invoke the child class constructor

		Sample2 obj = new Sample2(100);

	}

}
=============================================================================
package Tutorial1;

public class Demo2 {



	public Demo2(int a )
	{
		System.out.println("1 int args Constructor Demo2 class "+a);
	}
	
}

package Tutorial1;

public class Sample2 extends Demo2 {

	public Sample2(int p) {
		super(50);
		System.out.println("1 int args constructor in Sample2 class " + p);

	}

	public static void main(String[] args) {

		// if we create constructor in parent class as well as child class then first it
		// invoke the parent class constructor and then it invoke the child class
		// constructor

		Sample2 obj = new Sample2(100);

	}

}
=================================================================================

package Tutorial1;

public class Sample3 {

	public Sample3()
	{
		this("java");
		System.out.println("0 args cons in sample3");
		
	}

	public Sample3(int p)
	{
		System.out.println("1 int args cons in sample3");
	}
	
	public Sample3(String s)
	{
		System.out.println("1 String args cons in sample3");
	}
	
	
	public static void main(String[] args) {
		
		Sample3 obj =new Sample3();
		
	}
	
}
=========================================================
package Tutorial1;

public class Demo3 {
	
	
	public Demo3()
	{
		System.out.println("0 args cons in Demo3");
	}
	
	public Demo3(int a)
	{
		System.out.println("1 int args cons in Demo3");
	}
	
	public Demo3(String b)
	{
		System.out.println("1 String args cons in Demo3");
	}
	
}
========================================================
package Tutorial1;

public class Sample3 extends Demo3{

	public Sample3()
	{
		this("java");
		System.out.println("0 args cons in sample3");
		
	}

	public Sample3(int p)
	{
		System.out.println("1 int args cons in sample3");
	}
	
	public Sample3(String s)
	{
		super(100);
		
		System.out.println("1 String args cons in sample3");
	}
	
	
	public static void main(String[] args) {
		
		Sample3 obj =new Sample3();
		
	}
	
}
=====================================================================
package Tutorial1;

public class Demo3 {
	
	
	public Demo3()
	{
		System.out.println("0 args cons in Demo3");
	}
	
	public Demo3(int a)
	{
		System.out.println("1 int args cons in Demo3");
	}
	
	public Demo3(String b)
	{
		this();
		System.out.println("1 String args cons in Demo3");
	}
	
}

package Tutorial1;

public class Sample3 extends Demo3 {

	public Sample3() 
	{
		System.out.println("0 args cons in sample3");
	}

	public Sample3(int p) 
	{
		super("Rest API");
		System.out.println("1 int args cons in sample3");
	}

	public Sample3(String s) 
	{
		super(100);
		System.out.println("1 String args cons in sample3");
	}

	public static void main(String[] args) {

		Sample3 obj = new Sample3(200);

	}

}
=====================================================================
package Tutorial1;

public class Demo3 {
	
	
	
	
	public Demo3(String b)
	{
		
		System.out.println("1 String args cons in Demo3");
	}
	
}


package Tutorial1;

public class Sample3 extends Demo3 {

	public Sample3() 
	{
		super("Rest API");
		System.out.println("0 args cons in sample3");
	}

	public Sample3(int p) 
	{
		super("Hamcrest Library");
		System.out.println("1 int args cons in sample3");
	}

	public Sample3(String s) 
	{
		super("JSON Path");
		System.out.println("1 String args cons in sample3");
	}

	public static void main(String[] args) {

		Sample3 obj = new Sample3(200);

	}

}



















































