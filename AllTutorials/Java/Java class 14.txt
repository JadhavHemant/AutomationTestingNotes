throw keyword
----------------------------------------------------------------------------------------------------------------------
e.g.
	Req: total amount should be greater than withdrawn amount 
					if total amount is less than withdrawn amount then throws InsufficientFundException.
	
	
	public class InsufficentFundException extends RunTimeException
	{
			public InsufficentFundException(String message)
			{
				super(message);
			}
	}


	public class BankAccount
	{
		double totalAmount;

		public BankAccount(double totalAmount)
		{
			this.totalAmount = totalAmount;
		}
		
		public void withdrawn(double withDrawnAmount)
		{
			if(totalAmount< withDrawnAmount)
			{
				throw new InsufficentFundException("Insufficient Fund :: Available Balance is "+totalAmount);
			}
			else
			{
					totalAmount = totalAmount-withDrawnAmount;
					System.out.println("Amount Withdrawn Successfully :: Available Balance is "+totalAmount);
			}			

			
		}

		public static void main(String [] args)
		{
				BankAccount account =new BankAccount(1000);
				account.withdrawn(1400);
		}

	}
=====================================================================================
package Tutorial4;

public class InsufficientFundException extends RuntimeException{

	public InsufficientFundException(String message)
	{
		super(message);
	}
}

package Tutorial4;

public class BankAccount {
	
	double totalAmount;
	
	public BankAccount(double totalAmount)
	{
		this.totalAmount= totalAmount;
	}
	
	public void withDrawn(double withDrawnAmount)
	{	
		//1000< 1500
		if(totalAmount<withDrawnAmount)
		{
			throw new InsufficientFundException("Insufficient Balance :: Available Balance is "+totalAmount +" Your are trying to withdrawn "+withDrawnAmount);
		}
		else
		{
			totalAmount= totalAmount-withDrawnAmount;
			System.out.println("Withdrawn Amount Successfully :: Remaining Balance is "+totalAmount);
		}
	}
	
	public static void main(String[] args) {
		
		BankAccount account =new BankAccount(1000);
		
		account.withDrawn(1500);
		
		
	}
}
=====================================================================================
package Tutorial4;

import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Demo1 {

	public static void main(String[] args) throws FileNotFoundException, InterruptedException {
		
		FileInputStream fis =new FileInputStream("");
		
		Thread.sleep(0);
	}

}
=====================================================================================
finalize() method									VVVVIMMPPPPP

	- finalize() method is used to perform clean up activities.
	- finalize() method is used to release the heap memory.
	- finalize() method will call automatically when we call gc() method from System class.
	- gc means Garbage Collector calls finalize() method before the object is deleted or destroy.

public class Demo1
{
		public void abc()
		{
				System.out.println("abc method");
		}
		
		@Override
		public void finalize()
		{
			System.out.println("finalize method is called");
		}

		public static void main(String[] args){
			System.out.println("MMS");
			Demo1 obj =new Demo1();
			obj.abc();
				
			obj=null;
			System.gc();
			System.out.println("MME");
		}	
		
}


package Tutorial4;

public class Demo2 {
	
	public void abc()
	{
		System.out.println("abc method");
	}
	
	public void finalize()
	{
		System.out.println("finalize called");
	}
	
	public static void main(String[] args) {
		System.out.println("MMS");
		
		new Demo2().abc();
		
		System.gc();
		
		System.out.println("MME");
		
	
		
	}

}

package Tutorial4;

public class Demo2 {
	
	public void abc()
	{
		System.out.println("abc method");
	}
	
	public void finalize()
	{
		System.out.println("finalize called");
	}
	
	public static void main(String[] args) {
		System.out.println("MMS");
		
		new Demo2();
		
		new Demo2().abc();
		
		new Demo2();
		
		Demo2 obj;
		
		System.gc();
		
		System.out.println("MME");
		
	
		
	}

}
============================================================================
diff between final, finally and finalize() method							VVVVIMMMPPPPPPPPPPPPPPPP
============================================================================
casting																	VVVVIMMMPPPPPPPPPPPPPPPP
	- converting one type of info into another type of info is called as casting
	there are 2 types of casting
	1) primitive casting
	2) non primitive casting


1) primitive casting
	- converting one type of data type into another type of datatype is called as primitive casting
	there are 3 types of primitive casting
	I) implicit casting
	2) explicit casting
	3) boolean casting

	I) implicit casting
			- converting lower datatype info into higher datatype info is called primitive casting.
				e.g.
							int a =100;
						
							long b=a;
							float c =a;


package Tutorial4;

public class Demo3 {

	public static void main(String[] args) {
		
		//4 byte
		int a=10;
		
		//4 byte
		float b=a;
		
		//8 byte
		long c=a;
		
		//8 byte
		double d=a;
		
		System.out.println(a);//10
		
		System.out.println(b);//10.0
		
		System.out.println(c); //10
		
		System.out.println(d);//10.0
		
		

	}

}
-----------------------------------------------------------------------------
	2) explicit casting
			- converting higher datatype into lower datatype is called as explicit casting.
			-it is also called as narrowing casting.

			e.g.
						int a=1000;

						byte b = (byte)a;


package Tutorial4;

public class Demo4 {

	public static void main(String[] args) {
		
		int a=1000;
		
		byte b = (byte)a;
		
		System.out.println(a);

		System.out.println(b);
		
		short c =(short)a;
		
		System.out.println(c);
	}

}
-----------------------------------------------------------------------------------
3) boolean casting
		boolean casting is not supported by java.

==============================================================
2) non primitive casting
		converting one type of class into another type of class is called as non primitive casting
		there are 2 types 
		1) up casting
		2) down casting

1) up casting
		- assigning the child class property into parent class reference is called up casting.
		- to perform up casting compulsory we need inheritance concept.
		- by using up casting we can access all the properties from parent class only.
		- if we mention reference of parent class and object of child class this allowed to access all the methods from parent class.
		- if we have same non static method present inside the parent class and child class then priority goes to object creation class.
		- if we have same static method present inside the parent class and child class then priority goes to reference class.

		e.g.
				ParentClass obj = new ChildClass();


package Tutorial4;

public class Demo5 {
	
	public void d1()
	{
		System.out.println("d1 method in Demo5 class");
	}

	public void d2()
	{
		System.out.println("d2 method in Demo5 class");
	}
}

package Tutorial4;

public class Sample5 extends Demo5{

	public void s1()
	{
		System.out.println("s1 method in Sample5 class");
	}

	public static void main(String[] args) {
		
		Demo5 obj =new Sample5();
		obj.d1();
		obj.d2();
		
		
	}

}

package Tutorial4;

public class Demo6 {

	
	public static void display()
	{
		System.out.println("Display method in Demo 6 class");
	}
	
	
}

package Tutorial4;

public class Sample6 extends Demo6{

	public static void display()
	{
		System.out.println("Display method in Sample6 class");
	}
	
	public static void main(String[] args) 
	{
		Demo6 obj =new Sample6();
		obj.display();
	}
}

package Tutorial4;

public class Demo7 {

	public void top()
	{
		System.out.println("top method in Demo7 class");
	}
}



package Tutorial4;

public class Sample7 extends Demo7{

	public void top()
	{
		System.out.println("top method in Sample7 class");
	}
	
	public static void main(String[] args) {
		
		Demo7 obj =new Sample7();
		obj.top();
	}
	
	
}
------------------------------------------------
package Tutorial4;

public class Demo7 {

	public static void display() {
		System.out.println("Display Static method in Demo7 class");
	}
	
	
	public void top()
	{
		System.out.println("top Non Static method in Demo7 class");
	}
}

package Tutorial4;

public class Sample7 extends Demo7 {

	public static void display() {
		System.out.println("Display Static method in Sample7 class");
	}

	public void top() {
		System.out.println("top non static method in Sample7 class");
	}

	public static void main(String[] args) 
	{

		Demo7 obj = new Sample7();
		obj.top();
		obj.display();
	}

}
=============================================================
2) down casting 
	- to perform down casting first we have to perform up casting.
	- down casting is also called as explicit down casting.
	

package Tutorial4;

public class Sample8 extends Demo8{

	public void s1()
	{
		System.out.println("S1 method in Sample8 class");
	}
	
	public static void main(String[] args) {
		//WebDriver driver =new ChromeDriver();
		Demo8 obj =new Sample8();
		
		//TakesScreenshot ts = (TakesScreenshot)driver;
		
		Sample8 obj2 = (Sample8)obj;
		
		obj2.abc();
		obj2.xyz();
		obj2.s1();
		
		
	
	}
	
	
}
===========================================================================
where u have used up casting concept?							VVVVVVVVVVIMMPPP
		we use up casting concept in base class and we mention reference of WebDriver interface and we create object of ChromeDriver class.		
		- by using object name we can access all the properties from WebDriver interface.
		


where u have used down casting casting concept?					VVVVVVVVVVIMMPPP
		- we use down casting concept in TakesScreenshot and in JavascriptExecutor.
		- to perform down casting first we have to perform up casting.
		- and by using down casting reference variables we can access all properties from Reference classname.
		
				WebDriver driver =new ChromeDriver();
				
				TakesScreenshot ts = (TakesScreenshot)driver;


















































