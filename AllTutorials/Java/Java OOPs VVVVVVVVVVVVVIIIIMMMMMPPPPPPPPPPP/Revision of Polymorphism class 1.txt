Revision of Polymorphism
------------------------------------------------------------------------------------------------------------
1) Method Overloading
		- Method Overloading is also called as compile time Polymorphism or early binding or static binding.
		- Method overloading means if we have same method name with different signature.
		- different signature means
								I) number of arguments or parameter is different
								ii) type of arguments or parameter is different
								iii) sequence or order of arguments/order is different.

e.g.
I) number of arguments or parameter is different
------------------------------------------------------------------------------------------------------------
	public void abc()
	{
			//statement
	}

	public void abc(int a)
	{
			//statement
	}
------------------------------------------------------------------------------------------------------------
ii) if we have same number of arguments then we mention type of arguments or parameter is different

	public void abc(int a)
	{
			//statement
	}

	public void abc(String a)
	{
			//statement
	}
------------------------------------------------------------------------------------------------------------
iii) if we have same number of arguments as well as if we same datatype of arguments then change sequence or order of arguments


	public void abc(String a, int b)
	{
			//statement
	}

	public void abc(int a, String b)
	{
			//statement
	}
------------------------------------------------------------------------------------------------------------
package Tutorial6;

public class Demo1 {
	//1. Method overloading means if we have same method name with differnet in
	// arguments or parameters

	public void m1()
	{
		System.out.println("m1 method with 0 args");
	}
	
	public void m1(int a)
	{
		System.out.println("m1 method with 1 int args");
	}
	
	public void m1(int a, int b)
	{
		System.out.println("m1 method with 2 int args");
	}
	
	public void m1(int a, int b, int c)
	{
		System.out.println("m1 method with 3 int args");
	}
	
	public static void main(String[] args) {
		Demo1 obj =new Demo1();
		obj.m1();
		obj.m1(1000);
		obj.m1(100,900);
		obj.m1(10, 20, 30);
	}
	
}
======================================================================
package Tutorial6;

public class Demo2 {

	// 2. Method overloading means if we have same method name with same number of
	// arguments but datatype of arguments is different

	public void abc(int a) {
		System.out.println("abc method with 1 int args");
	}

	public void abc(String a) {
		System.out.println("abc method with 1 String args");
	}

	public void abc(float a) {
		System.out.println("abc method with 1 float args");
	}

	public void abc(char a) {
		System.out.println("abc method with 1 char args");
	}

	public void abc(boolean a) {
		System.out.println("abc method with 1 boolean args");
	}

	public void abc(double a) {
		System.out.println("abc method with 1 double args");
	}

	public void abc(int [] a) {
		System.out.println("abc method with 1 Arrays args");
	}

	public static void main(String[] args) {
		Demo2 obj =new Demo2();
		obj.abc('A');
		obj.abc(true);
		obj.abc(12.24f);
		obj.abc("selenium");
		obj.abc(1233);
		obj.abc(12.244);
		obj.abc(new int[]{1,2,3});
		
	}
}
=============================================================
package Tutorial6;

public class Demo3 {

	// 2. Method overloading means if we have same method name with same number of
	// arguments but datatype of arguments is different

	public void xyz(int a, int b)
	{
		System.out.println("xyz method with 2 int args");
	}
	
	public void xyz(String a, String b)
	{
		System.out.println("xyz method with 2 String args");
	}
	
	public void xyz(boolean a, boolean b)
	{
		System.out.println("xyz method with 2 boolean args");
	}
	
	public void xyz(char a, char b)
	{
		System.out.println("xyz method with 2 char args");
	}
	
	public static void main(String[] args) {
		Demo3 obj =new Demo3();
		obj.xyz(10, 1000);
		obj.xyz('A', 'P');
		obj.xyz(false, true);
		obj.xyz("cucumber", "restApi");
	}
	
}
=============================================================
package Tutorial6;

public class Demo4 {

	// Method overloading means: if we have same method name with same numbers of
	// arguments as well as same type of arguments then we can change sequence/order of arugments.

	public void abc(int a, String b)
	{
		System.out.println("abc method with 1 int and 1 String args");
	}
	
	public void abc(String a, int b)
	{
		System.out.println("abc method with 1 String and 1 int args");
	}
	
	
	public static void main(String[] args) {
		Demo4 obj =new Demo4();
		obj.abc(10, "selenium");
		obj.abc("cucumber", 1234);
	}
	
}
package Tutorial6;

public class Demo5 {

	// Method overloading means: if we have same method name with same numbers of
	// arguments as well as same type of arguments then we can change sequence/order
	// of arugments.

	public void abc(int a, String b, float c) {
		System.out.println("abc method with 1 int, 1 String and 1 float");
	}

	public void abc(int a, float b, String c) {
		System.out.println("abc method with 1 int, 1 float and 1 String");
	}

	public void abc(float a, int b, String c) {
		System.out.println("abc method with 1 float, 1 int and 1 String");
	}

	public void abc(float a, String b, int c) {
		System.out.println("abc method with 1 float, 1 String and 1 int ");
	}

	public void abc(String a, float b, int c) {
		System.out.println("abc method with 1 String, 1 float and 1 int ");
	}

	public void abc(String a, int b, float c) {
		System.out.println("abc method with 1 String, 1 int and 1 float ");
	}

	public static void main(String[] args) {
		Demo5 obj =new Demo5();
		obj.abc(1.12f, 1, "A");
		obj.abc(1.23f, "B", 2);
		
		obj.abc(1, 1.23f, "A");
		obj.abc(1, "A",2.2f);
		
		obj.abc("selenium",4.0f, 10);
		obj.abc("selenium",4, 1.0f);
		

		
	}
	
	
}
=======================================================================================
can we overload the private method?
		Yes we can overload the private method

1. Method overloading means if we have same private method with different in arguments
2. Method overloading means if we have same private method with same number of arguments but in different in datatype of arguments
3. Method overloading means if we have same private method with same number of arguments as well as same datatype of arguments but we change 
	sequence or order of arguments.


package Tutorial6;

public class Demo6 {

	// 1. Method overloading means if we have same private non static method with
	// different in arguments

	private void abc() {
		System.out.println("Private method with 0 agrs");
	}

	private void abc(int a) {
		System.out.println("Private method with 1 int agrs");
	}

	private void abc(int a, int b) {
		System.out.println("Private method with 2 int agrs");
	}

	private void abc(int a, int b, int c) {
		System.out.println("Private method with 3 int agrs");
	}

	public static void main(String[] args) {
		Demo6 obj = new Demo6();
		obj.abc();
		obj.abc(100);
		obj.abc(1,1);
		obj.abc(10, 20, 30);
	}

}
---------------------------------------------------------------------------------------------------------------
package Tutorial6;

public class Demo6 {

	// 1. Method overloading means if we have same private static method with
	// different in arguments

	private static void abc() {
		System.out.println("Private static method with 0 agrs");
	}

	private static void abc(int a) {
		System.out.println("Private static method with 1 int agrs");
	}

	private static void abc(int a, int b) {
		System.out.println("Private static method with 2 int agrs");
	}

	private static void abc(int a, int b, int c) {
		System.out.println("Private static method with 3 int agrs");
	}

	public static void main(String[] args) {
	
		Demo6.abc();
		Demo6.abc(100);
		Demo6.abc(10, 200);
		Demo6.abc(10, 20, 300);
	}

}
===============================================================================
package Tutorial6;

public class Demo7 {

	// 2. Method overloading means if we have same private non static method with
	// same number of arguments but in different in datatype of arguments

	private void abc(int a) {
		System.out.println("private method with 1 int args");
	}

	private void abc(float a) {
		System.out.println("private method with 1 float args");
	}

	private void abc(double a) {
		System.out.println("private method with 1 double args");
	}

	private void abc(char a) {
		System.out.println("private method with 1 char args");
	}

	private void abc(boolean a) {
		System.out.println("private method with 1 boolean args");
	}

	private void abc(String a) {
		System.out.println("private method with 1 String args");
	}

	private void abc(int[] a) {
		System.out.println("private method with 1 int array args");
	}

	private void abc(String[] a) {
		System.out.println("private method with 1 String array args");
	}

	private void abc(boolean[] a) {
		System.out.println("private method with 1 boolean array args");
	}
	
	public static void main(String[] args) {
		Demo7 obj =new Demo7();
		obj.abc(true);
		obj.abc(new boolean[] {true,false});
		
		obj.abc(122.24f);
		obj.abc(22.2343);
		
		obj.abc(1000);
		obj.abc(new int[] {12,23,44});
		
		obj.abc("selenium");
		obj.abc(new String[] {"selenium","cucumber"});
	}
}
========================================================
package Tutorial6;

public class Demo7 {

	// 2. Method overloading means if we have same private static method with
	// same number of arguments but in different in datatype of arguments

	private static void abc(int a) {
		System.out.println("private static method with 1 int args");
	}

	private static void abc(float a) {
		System.out.println("private static method with 1 float args");
	}

	private static void abc(double a) {
		System.out.println("private  static method with 1 double args");
	}

	private static void abc(char a) {
		System.out.println("private static method with 1 char args");
	}

	private static void abc(boolean a) {
		System.out.println("private static method with 1 boolean args");
	}

	private static void abc(String a) {
		System.out.println("private static method with 1 String args");
	}

	private static void abc(int[] a) {
		System.out.println("private method with 1 int array args");
	}

	private static void abc(String[] a) {
		System.out.println("private  static method with 1 String array args");
	}

	private static void abc(boolean[] a) {
		System.out.println("private static method with 1 boolean array args");
	}

	public static void main(String[] args) {
		Demo7.abc(true);
		Demo7.abc(new boolean[] { true, false });

		Demo7.abc('A');
		Demo7.abc(12.334);
		Demo7.abc(2343.434f);
		Demo7.abc(1000);
		Demo7.abc(new int[] { 100, 20203 });
		Demo7.abc("Selenium");
		Demo7.abc(new String[] { "A1", "B1", "C1" });

	}
}
=======================================================================
package Tutorial6;

public class Demo8 {

	// 3. Method overloading means if we have same private non static method with same number
	// of arguments as well as same datatype of arguments but we change
	//sequence or order of arguments.

	private void abc(int a, String b)
	{
		System.out.println("abc private method with 1 int and 1 String args");
	}
	
	private void abc(String a, int b)
	{
		System.out.println("abc private method with 1 String and 1 int args");
	}
	
	public static void main(String[] args) {
		Demo8 obj =new Demo8();
		obj.abc(10, "A");
		obj.abc("A", 12122);
	}
	
	
}
==========================================================
package Tutorial6;

public class Demo8 {

	// 3. Method overloading means if we have same private static method with same
	// number
	// of arguments as well as same datatype of arguments but we change
	// sequence or order of arguments.

	private static void abc(int a, String b) {
		System.out.println("abc private static method with 1 int and 1 String args");
	}

	private static void abc(String a, int b) {
		System.out.println("abc private static method with 1 String and 1 int args");
	}

	public static void main(String[] args) {
		Demo8.abc(100, "A");
		Demo8.abc("cucumber", 10222);
	}

}

package Tutorial6;

public class Demo9 {

	// 3. Method overloading means if we have same private non static method with
	// same number of arguments as well as same datatype of arguments but we change
	// sequence or order of arguments.

	private void abc(int a, float b, String c) {
		System.out.println("abc Private method with 1 int, 1 float and 1 String");
	}

	private void abc(int a, String b, float c) {
		System.out.println("abc Private method with 1 int, 1 String and 1 float ");
	}

	private void abc(float a, String b, int c) {
		System.out.println("abc Private method with 1 float, 1 String and 1 int ");
	}

	private void abc(float a, int b, String c) {
		System.out.println("abc Private method with 1 float, 1 int and 1 String ");
	}

	private void abc(String a, int b, float c) {
		System.out.println("abc Private method with 1 String, 1 int and 1 float ");
	}

	private void abc(String a, float b, int c) {
		System.out.println("abc Private method with 1 String, 1 float and 1 int ");
	}

	public static void main(String[] args) {
		Demo9 obj = new Demo9();
		obj.abc(12, 12f, "A");
		obj.abc(12, "A", 12.0f);

		obj.abc(12f, 12, "A");
		obj.abc(12f, "A", 1222);
		
		obj.abc("A", 12, 123f);
		obj.abc("A", 123f, 1233);
	}

}
=======================================================
package Tutorial6;

public class Demo9 {

	// 3. Method overloading means if we have same private static method with
	// same number of arguments as well as same datatype of arguments but we change
	// sequence or order of arguments.

	private static void abc(int a, float b, String c) {
		System.out.println("abc Private static method with 1 int, 1 float and 1 String");
	}

	private static void abc(int a, String b, float c) {
		System.out.println("abc Private static method with 1 int, 1 String and 1 float ");
	}

	private static void abc(float a, String b, int c) {
		System.out.println("abc Private static method with 1 float, 1 String and 1 int ");
	}

	private static void abc(float a, int b, String c) {
		System.out.println("abc Private  static staticmethod with 1 float, 1 int and 1 String ");
	}

	private static void abc(String a, int b, float c) {
		System.out.println("abc Private static method with 1 String, 1 int and 1 float ");
	}

	private static void abc(String a, float b, int c) {
		System.out.println("abc Private static method with 1 String, 1 float and 1 int ");
	}

	public static void main(String[] args) {

		Demo9.abc(12, 12f, "A");
		Demo9.abc(12, "A", 12.0f);

		Demo9.abc(12f, 12, "A");
		Demo9.abc(12f, "A", 1222);

		Demo9.abc("A", 12, 123f);
		Demo9.abc("A", 123f, 1233);
	}

}
=========================================================================
can we overload the final method?
	yes we can overload the final method

1. method overloading means if we have same final method with same number with different in arguments
2 method overloading means if we have same final method with same number with same number of arguments but different in datatypes
3 method overloading means if we have same final method with same number with same number of arguments as well as same number datatype but different in sequence or order.


package Tutorial6;

public class Demo6 {

	// 1. Method overloading means if we have same final static method with
	// different in arguments

	final public static void abc() {
		System.out.println("final public static method with 0 agrs");
	}

	final public static void abc(int a) {
		System.out.println("final public static method with 1 int agrs");
	}

	final public static void abc(int a, int b) {
		System.out.println("final public static method with 2 int agrs");
	}

	final public static void abc(int a, int b, int c) {
		System.out.println("final public static method with 3 int agrs");
	}

	public static void main(String[] args) {

		Demo6.abc();
		Demo6.abc(100);
		Demo6.abc(10, 200);
		Demo6.abc(10, 20, 300);
	}

}
=========================================================================
can we overload the main method?
		Yes we can overload the main method

1. Method overloading means if we have same main method with different in arguments
2. Method overloading means if we have same main method with same number of arguments but in different in datatype of arguments
3. Method overloading means if we have same main method with same number of arguments as well as same datatype of arguments but we change 
	sequence or order of arguments.

	---------->> same code like static method but change the method name to main() method

=========================================================================
can we overload the abstract method?
		Yes we can overload the main method

1. Method overloading means if we have same abstract method with different in arguments
2. Method overloading means if we have same abstract method with same number of arguments but in different in datatype of arguments
3. Method overloading means if we have same abstract method with same number of arguments as well as same datatype of arguments but we change 
	sequence or order of arguments.

=========================================================================
can we overload the constructor?
		Yes we can overload the constructor

1. Method overloading means if we have same constructor with different in arguments
2. Method overloading means if we have same constructor with same number of arguments but in different in datatype of arguments
3. Method overloading means if we have same constructor with same number of arguments as well as same datatype of arguments but we change 
	sequence or order of arguments.































































