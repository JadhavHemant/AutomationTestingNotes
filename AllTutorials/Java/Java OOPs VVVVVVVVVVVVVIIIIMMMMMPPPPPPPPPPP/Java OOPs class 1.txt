Java OOPs (Object Oriented Programming Language) concept					VVVVVVVVVIIIIIIIMMMMMMMPPPPPPPPPPPP
------------------------------------------------------------------------------------------------------------------------------------------------------------
		there are 4 main pillar in OOPs 
		I) inheritance															VVVVVVVVVIIIIIIIMMMMMMMPPPPPPPPPPPP
		2) Polymorphism														VVVVVVVVVIIIIIIIMMMMMMMPPPPPPPPPPPP
		3) Abstraction															VVVVVVVVVIIIIIIIMMMMMMMPPPPPPPPPPPP
		4) Encapsulation														VVVVVVVVVIIIIIIIMMMMMMMPPPPPPPPPPPP

------------------------------------------------------------------------------------------------------------------------------------------------------------
I) inheritance															VVVVVVVVVIIIIIIIMMMMMMMPPPPPPPPPPPP
	- inheritance is process of reusing class members from one class to another class.
	- Class members means variables and methods
	- we achieve inheritance by using """""extends keyword."""".
	- the class where class members are getting inherited it called as parent class or super class or base class.
	- the class, on which class members are getting inherited is called as child class or derived class or sub class.

there are 5 types of inheritance
	I) single level inheritance
	2) multilevel inheritance
	3) Hierarchical inheritance
	4) multiple inheritance
	5) Hybrid inheritance


I) single level inheritance	
		- in single level inheritance we extends one class in another  class.

syntax:
public class Sample1
{

}

public class Demo1 extends Sample1
{



}

Sample1: Sample1 class is parent of Demo1 class
Demo1 : Demo1 class is child class of Sample1 class.

	- in Sample1 class we defined the 5 methods and Demo1 class we defined the 4 Methods.

Scenario 1:

	- if we create object of Sample1 and reference of Sample1 class then we can access all the methods from Sample1 class only.
						Sample1 obj1 =new Sample1();

Scenario 2:
	- if we create object of Demo1 class and reference of Demo1 class then we can access all the methods from Demo1 class as well Sample1 class.

						Demo1 obj =new Demo1();

Scenario 3: up casting
	- if we create object of Demo1 class and reference of Sample1 class then we can access all the methods from Sample1 class only.

						Sample1 obj =new Demo1();




package Tutorial1;

public class ParentClass {

	public void p1() {
		System.out.println("P1 Method in Parent class");
	}

	public void p2() {
		System.out.println("P2 method in Parent class");
	}

	public void p3() {
		System.out.println("P3 method in Parent class");
	}

	public static void main(String[] args) 
	{
		//if mention Object of ChildClass and reference of ChildClass
		//this allow to access all the methods from ParentClass and ChildClass
		ChildClass obj=new ChildClass();
		obj.p1();
		obj.p2();
		obj.p3();
		obj.c1();
		obj.c2();
		
		
		
		
		
		
		
		
// we mention object of ParentClass and reference of ParentClass
// this allow to access all the methods only ParentClass.
//		ParentClass obj =new ParentClass();
//		obj.p1();
//		obj.p2();
//		obj.p3();

	}

}

package Tutorial1;

public class ChildClass extends ParentClass {

	public void c1() {
		System.out.println("C1 method in Child class");
	}

	public void c2() {
		System.out.println("C2 method in Child class");
	}

	public static void main(String[] args) 
	{
		//if mention object of ChildClass class and reference of ChildClass
		//this allow to access all the method from ParentClass as well as ChildClass.
		ChildClass obj =new ChildClass();
		obj.p1();
		obj.p2();
		obj.p3();
		obj.c1();
		obj.c2();
		
		
		
		
		
		
		// create object of ParentClass and reference of ParentClass
		// this allow to access only methods from ParentClass.
//		ParentClass obj =new ParentClass();
//		obj.p1();
//		obj.p2();
//		obj.p3();

	}

}


package Tutorial1;

public class Pune1 {

	public static void main(String[] args) {
		ChildClass obj = new ChildClass();
		obj.p1();
		obj.p2();
		obj.p3();
		obj.c1();
		obj.c2();

		// we mention object of ParentClass and reference of ParentClass
		// this allow to access all the methods only ParentClass.
//		ParentClass obj =new ParentClass();
//		obj.p1();
//		obj.p2();
//		obj.p3();

	}

}
=====================================================================
package Tutorial2;

public class ClassA {

	public void a1() {
		System.out.println("A1 Method");
	}

	public void a2() {
		System.out.println("A2 Method");
	}

	public void a3() {
		System.out.println("A3 Method");
	}

	
	public static void main(String[] args) {
		ClassB obj =new ClassB();
		obj.a1();
		obj.a2();
		obj.a3();
		obj.b1();
		obj.b2();
		
		
//		ClassA obj =new ClassA();
//		obj.a1();
//		obj.a2();
//		obj.a3();
		
	}
	
}
----------------------------------------------------------
package Tutorial2;

public class ClassB extends ClassA {

	public void b1() {
		System.out.println("B1 Method");
	}

	public void b2() {
		System.out.println("B1 Method");
	}

	public static void main(String[] args) {

		ClassA obj = new ClassA();
		obj.a1();
		obj.a2();
		obj.a3();

//		ClassB obj=new ClassB();
//		obj.a1();
//		obj.a2();
//		obj.a3();
//		obj.b1();
//		obj.b2();

	}

}
------------------------------------------------------------
package Tutorial2;

public class Sample1 {

	public static void main(String[] args) {
		ClassB obj = new ClassB();
		obj.a1();
		obj.a2();
		obj.a3();
		obj.b1();
		obj.b2();

//		ClassA obj =new ClassA();
//		obj.a1();
//		obj.a2();
//		obj.a3();

	}
}
==================================================================
package Tutorial2;

public class ClassA {

	public void a1() {
		System.out.println("A1 Method");
	}

	public void a2() {
		System.out.println("A2 Method");
	}

	public void a3() {
		System.out.println("A3 Method");
	}

	public static void main(String[] args) {
		// if mention reference of ParentClass and Object of ChildClass
		// this allow to access all the methods from Parent Class.
		ClassA obj = new ClassB();
		obj.a1();
		obj.a2();
		obj.a3();
	}

}

package Tutorial2;

public class ClassB extends ClassA {

	public void b1() {
		System.out.println("B1 Method");
	}

	public void b2() {
		System.out.println("B1 Method");
	}

	public static void main(String[] args) {
		// if we mention reference of Parent Class and object of Child Class'
		// this allow to access all the methods from ParentClass only.
		
		ClassA obj =new ClassB();
		obj.a1();
		obj.a2();
		obj.a3();
		
	}

}

package Tutorial2;

public class Demo1 {

	public static void main(String[] args) {
		// if mention reference of ParentClass and Object of ChildClass
		// this allow to access all the methods from Parent Class.
		ClassA obj = new ClassB();
		obj.a1();
		obj.a2();
		obj.a3();

	}

}
=========================================================================================
Scenario 3"
			: if we mention reference of Parent Class and object of Child Class this allow to access all the methods from Parent Class.
							ParentClass obj =new ChildClass();
	Note:
			1) if have same non static method present inside the Parent Class and Child Class, """"then priority goes to Object Creation class."""

			2) if have same static method present inside the Parent class and child class then """priority goes to reference class"""".





package Tutorial3;

public class ClassA {

	public void a1() {
		System.out.println("A1 method in ClassA");
	}

	public void a2() {
		System.out.println("A2 method in ClassA");
	}

	public void a3() {
		System.out.println("A3 method in ClassA");
	}

	public static void main(String[] args) {
		
		ClassA obj =new ClassB();
		obj.a1();//ClassB
		obj.a2();//ClassA
		obj.a3();//ClassA
		
	}
	
	
}


package Tutorial3;

public class ClassB extends ClassA {

	public void a1() {
		System.out.println("A1 method in ClassB");
	}

	public void b1() {
		System.out.println("B1 method in ClassB");
	}

	public void b2() {
		System.out.println("B2 method in ClassB");
	}

	public static void main(String[] args) {
		// if we mention reference of ParentClass and object of ChildClass
		// this allow to access all the from ParentClass only.
		// but if """""same non static method parent inside the ParentClass and ChildClass"""" 
		//then it will call same non static method from object creation class.
		
		ClassA obj = new ClassB();
		obj.a1();//ClassB
		obj.a2();//ClassA
		obj.a3();//ClassA
	}

}

package Tutorial3;

public class Demo1 {

	public static void main(String[] args) {

		ClassA obj = new ClassB();
		obj.a1();// ClassB
		obj.a2();// ClassA
		obj.a3();// ClassA

	}

}
-----------------------------------
\package Tutorial4;

public class ClassA {

	public static void a1() {
		System.out.println("A1 static method in ClassA");
	}

	public static void a2() {
		System.out.println("A2 static method in ClassA");
	}

	public static void a3() {
		System.out.println("A3 static method in ClassA");
	}

	public static void main(String[] args) {
		// if we mention refernce of ParentClass and Object of ChildClass
		// this allow to access all the methods from PARENT CLASS ONLY
		// But IF SAME STATIC METHOD PRESENT INSIDE THE PARENT CLASS AND CHILD CLASS
		// then priority goes to reference class for same static method
		ClassA obj = new ClassB();
		obj.a1();
		obj.a2();
		obj.a3();

	}
}

package Tutorial4;

public class ClassB extends ClassA {

	public static void a1() {
		System.out.println("A1 static method in ClassB");
	}

	public static void b1() {
		System.out.println("B1 static method in ClassB");
	}

	public static void b2() {
		System.out.println("B2 static method in ClassB");
	}

	public static void main(String[] args) {
		//if we mention refernce of ParentClass and Object of ChildClass
		//this allow to access all the methods from PARENT CLASS ONLY
		//But IF SAME STATIC METHOD PRESENT INSIDE THE PARENT CLASS AND CHILD CLASS
		//then priority goes to reference class for same static method
		ClassA obj = new ClassB();
		obj.a1();
		obj.a2();
		obj.a3();
	}

}

package Tutorial5;

public class ClassA {

	public void a1() {
		System.out.println("A1 Non static method ClassA");
	}

	public static void a2() {
		System.out.println("A2 static method ClassA");
	}

	public void a3() {
		System.out.println("A3 Non static method ClassA");
	}
}


package Tutorial5;

public class ClassB extends ClassA {

	public void a1() {
		System.out.println("A1 Non static method ClassB");
	}

	public static void a2() {
		System.out.println("A2 static method ClassB");
	}

	public void b1() {
		System.out.println("B1 Non static method ClassB");
	}
	
	public static void main(String[] args) {
		ClassA obj=new ClassB();
		obj.a1();//ClassB
		obj.a2();//ClassA
		obj.a3();//ClassA
		
	}
	

}

package Tutorial5;

public class ClassA {

	public void a1() {
		System.out.println("A1 Non static method ClassA");
	}

	public static void a2() {
		System.out.println("A2 static method ClassA");
	}

	public void a3() {
		System.out.println("A3 Non static method ClassA");
	}
}

package Tutorial5;

public class ClassB extends ClassA {

	public void a1() {
		System.out.println("A1 Non static method ClassB");
	}

	public static void a2() {
		System.out.println("A2 static method ClassB");
	}

	public void b1() {
		System.out.println("B1 Non static method ClassB");
	}
	
	public static void main(String[] args) {
		
		ClassB.a2();
		
	}
	

}
================================================================================================
public static void main(String[] args) {
		// reference of ChildClass and Object of ParentClass
		// it is invalid Scenario
		ClassB obj = new ClassA();

	}
==========================================================================================================
Scenario 1:	if  mention reference of Parent class and Object of Parent Class this allow to access all the methods from Parent class only
						ParentClass obj =new ParentClass();

Scenario 2:if  mention reference of Child class and Object of Child Class this allow to access all the methods from Parent class and Child Class
						ChildClass obj =new ChildClass();

Scenario 3: if  mention reference of Parent class and Object of Child Class this allow to access all the methods from Parent class only

						ParentClass obj =new ChildClass();

- if we have same static method present inside the Parent class and child class then priority goes to reference
						
- if we have same non static method present inside the Parent class and child class then priority goes to Object Creation.
				
==========================================================================================================
create a new maven project
			- add dependency selenium, testNg AShot, common io,
			- 

in src/main/java 
		create BaseLayer Package
					- create BaseClass
								- create initialization static  method
											//declare WebDriver global
														// connect browser
														//up casting
														//Maximize
														//implicit wait
														//page load time out
														//open a sauce demo url

in src/test/java
		create Test Layer package
				- create EndToEndSauceDemoTest Class and extends BaseClass

								declare @BeforeClass annotation
												- call initialization() from BaseClass using Class reference 
										BaseClass.initialization();


								//create test cases 1 for login		-- using @Test annotation

	
								//create test cases 2 display all product from high to low price	
										and 3 product on add cart


								//create test cases 3 : add product to container and click on continue
		
								
								//create test cases 4 : add personal details and click on finish button


				 				//@AfterMethod
											take screenshot

								declare @AfterClass
											quit browser


















