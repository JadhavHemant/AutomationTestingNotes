What is inheritance in java?												VVVVVIMMMMMMPPPPPPP
	- Inheritance is process of reusing the class/data members from one class to another class.
	- Data members is nothings variables and methods.
	- we achieve the inheritance between multiple classes by using extends keywords.
	- once we use extends keyword in child classes, then by using child class object we can access all the data members/properties from parent class as 	child class.
	- the class where class members are getting inherited is called as parent class or super class or base class.,
	- the class to which class members are getting inherited is called as child class or derived class or sub class.
	there are 5 types of inheritance in java.
	I) single level inheritance
	2) multilevel inheritance
	3) Hierarchical inheritance
	4) multiple inheritance
	5) hybrid inheritance

	- in single level inheritance we extends one class in another class.
	- in multilevel inheritance we extends one class in another class, and another class in another class and so on.
	- in hierarchical inheritance we extends parent class in multiple child classes.
	- in multiple inheritance we have extends 2 classes in one class, which is does not supports, 
	- in hybrid inheritance is combination of multilevel inheritance and multiple inheritance, and java does not support for hybrid inheritance

	- in current framework we are using Hierarchical inheritance, in my framework BaseClass is super parent class of all the classes in frameworks.
	- we extends BaseClass in PageLayer package container classes, as well as Utility Layer container classes, and also TestLayer package container classes.
	- so here we have extends BaseClass in multiple classes.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
why java does not support for multiple inheritance or Hybrid inheritance?		VVVVVIMMMMMMPPPPPPP
	- The reason behind multiple inheritance to prevent ambiguity issue.
	- consider the scenario, we have 3 classes ClassA, ClassB and ClassC.
	- we have defined display() method in ClassA as well as in ClassB.
	- and we have extends ClassA in ClassC as well as we extends ClassB in ClassC, means ClassC have 2 parent Class as ClassA and ClassB.
	- if we create object of child class then we can access all methods from parent class as well as from child class.
	- but currently display() method present inside the ClassA and ClassB, so java compiler does not decided which display() method we have call.
	-to prevent such condition multiple inheritance is not supported by java.
	- still if u want achieve the multiple inheritance then we use interface concept.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
where you have used inheritance concept in framework?						VVVVVIMMMMMMPPPPPPP
	-there are 5 types of inheritance in java.
	I) single level inheritance
	2) multilevel inheritance
	3) Hierarchical inheritance
	4) multiple inheritance
	5) hybrid inheritance
	
	-in my current[Hybrid Framework/ BBD Framework] framework  we use Hierarchical in inheritance, Hierarchical inheritance we have extends the Parent Class 	in multiple child classes.
	- in my current framework we have created BaseClass and this BaseClass is super parent of all the classes in frameworks.
	- we have extends the BaseClass in Page Layer package container classes, as well as we have extends BaseClass in Utility Layer containers classes, and also
	we have extends the BaseClass in Test Layer (Step Definition) Package containers classes.
	- here we have BaseClass is parent class of multiple child classes, and we use Hierarchical inheritance concept in framework.===================================================================================
Multiple Inheritance

package Tutorial11;

public class ClassA {

	public void display() {
		System.out.println("Display method in ClassA");
	}

}


package Tutorial11;

public class ClassB {

	public void display() {
		System.out.println("Display method in ClassB");
	}
	
	
}

package Tutorial11;

//Multiple Inheritance : it show compile time error/Syntax Error
public class ClassC extends ClassA extends ClassB
{

	
	
}
==========================================================================
what are the different types of variables in java?								VVVVVIMMMMMMPPPPPPP
	- there are 3 types of variables in java
	I) local variable
	2) static variable
	3) instance variable

	I) local variable
			- if we define any variable within the block (Methods, constructor , else if block, loops) then access scope of these only within the block. 


	2) static variable
			- static variable is also called as global static variables.
			- we declare static variable outside the methods but inside the class by using static keywords/(Non Access Modifier keyword).
			-  we can access static variable within the class as well as outside the class by using the access modifier concept.
			- if declare static variable, 
						we can access static variable by using 3 ways in blocks.
							I) directly variable name
							2) class name dot variable name
							3) by using object name dot variable name.

	3) instance variable
			- instance variable is also called as global variable / global instance variable/non static variable.
			- we declare the instance variable outside the methods but inside the class.
			- We can access instance variable within the class as well as outside the class as per the access modifiers.
			- we can access instance variable in non static method by using 2 ways.
							I) directly variable name
							2) by object name dot variable name.
			- we can access instance variable in static method/main method by using object name dot variable name.

----------------------------------------------------------------------------------------------------------------------------------------------------
package Tutorial11;

public class Demo1 {

	public void abc() {
		int a = 100;
		System.out.println(a);
	}

	public void xyz() {
		int c = 120;

		if (true) {
			int b = 100;
			System.out.println(b);
			System.out.println(c);
		} else {
			System.out.println(c);
			// System.out.println(b);
		}

		// System.out.println(b);
		System.out.println(c);
	}

	public static void main(String[] args) {
		int p = 100;
		System.out.println(p);

		for (int i = 0; i <= 10; i++) {
			int s = 12;
			System.out.println(s);
		}

		// System.out.println(s);

		int r = 190;

		for (int i = 1; i <= 5; i++) {
			System.out.println(r);
		}

		System.out.println(r);

	}

}


----------------------------------------------------------------------------------------------------------------------------------------------------


package Tutorial11;

public class Demo2 {
	//static variable /static global variable
	 static int a=100;
	
	public void abc()
	{
		System.out.println(a);
		System.out.println(Demo2.a);
		Demo2 obj =new Demo2();
		System.out.println(obj.a);
	}
	
	public static void xyz()
	{
		System.out.println(a);
		System.out.println(Demo2.a);
		Demo2 obj =new Demo2();
		System.out.println(obj.a);
	}
	
	
	public static void main(String[] args) 
	{
		System.out.println(a);
		System.out.println(Demo2.a);
		Demo2 obj =new Demo2();
		System.out.println(obj.a);

	}

}
----------------------------------------------------------------------------------------------------------------------------------------------------
package Tutorial11;

public class Demo3 {
	
	//instance variable /global variable / non static variable 
	int a=190;
	
	public void abc()
	{
		System.out.println(a);
		Demo3 obj =new Demo3();
		System.out.println(obj.a);
	}
	
	public static void xyz()
	{
		Demo3 obj=new Demo3();
		System.out.println(obj.a);
	}
	
	
	public static void main(String[] args) 
	{
			Demo3 obj =new Demo3();
			System.out.println(obj.a);
	}
}
====================================================================================================
what are the different access modifier in java?								VVVVVIMMMMMMPPPPPPP
	there are 4 types of Access Modifier in java
	1) private
	2) default
	3) protected
	4) public 

1) private
	- if  we declare any data members of the class as private then access scope of that data members within the class.
	- we can't access outside the class.


2) default
	- if  we declare any data members of the class as default then access scope of that data members within the Package
	- we can't access outside the package
	- there is no keyword for default data members.

3) protected
	- if  we declare any data members of the class as protected then access scope of that data members within the Package as well as outside the package but 
	outside the package by using inheritance concept.s

	
4) public 
	- if  we declare any data members of the class as public then access scope of that data members anywhere in project.
	

package Tutorial12;

public class Sample101 {

	// private instance variable
	private String a1 = "Private variable";

	// default instance variable
	String b1 = "Default Variable";

	// protected instance variable
	protected String c1 = "Protected variable";

	// public instance variable
	public String d1 = "Public Variable";

	// private non static method
	private void p1() {
		System.out.println("Private Method");
	}

	// default non static method
	void q1() {
		System.out.println("Default Method");
	}

	// protected Non static method
	protected void r1() {
		System.out.println("Protected Method");
	}

	// public non static method
	public void s1() {
		System.out.println("Public Method");
	}

	public static void main(String[] args) {
		Sample101 obj = new Sample101();
		System.out.println(obj.a1);
		System.out.println(obj.b1);
		System.out.println(obj.c1);
		System.out.println(obj.d1);
		obj.p1();
		obj.q1();
		obj.r1();
		obj.s1();

	}

}


package Tutorial12;

public class Pune101 extends Sample101 {

	public static void main(String[] args) {
		Pune101 obj = new Pune101();
		System.out.println(obj.b1);
		System.out.println(obj.c1);
		System.out.println(obj.d1);
		obj.q1();
		obj.r1();
		obj.s1();
	}
}

package Tutorial123;

import Tutorial12.Sample101;

public class Mumbai101 extends Sample101 {

	public static void main(String[] args) {

		Mumbai101 obj = new Mumbai101();
		System.out.println(obj.c1);
		System.out.println(obj.d1);
		obj.r1();
		obj.s1();
	}

}

package Tutorial120;

public class Sample121 {

	private static String a = "private";
	static String b = "default";
	protected static String c = "protected";
	public static String d = "public";

	public static void main(String[] args) {
		System.out.println(a);
		System.out.println(b);
		System.out.println(c);
		System.out.println(d);

	}

}

package Tutorial120;

public class Pune121 extends Sample121 {

	public static void main(String[] args) {

		System.out.println(b);
		System.out.println(c);
		System.out.println(d);

	}
}


package Tutorial130;

import Tutorial120.Sample121;

public class Mumbai121 extends Sample121{

	public static void main(String[] args) 
	{
	
		System.out.println(c);
		System.out.println(d);
		
	}
}

======================================================================================================================

public class BaseClass
{
	protected static WebDriver driver;

	protected static void initialization()
	{	
			System.setProperty("webdriver.chrome.driver","path of chrome driver");
			driver =new ChromeDriver();
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
			driver.manage().timeouts().pageLoadTimeOut(Duration.ofSeconds(30));
			driver.manage().window().maximize();
			driver.get("URL");
	}

}



























