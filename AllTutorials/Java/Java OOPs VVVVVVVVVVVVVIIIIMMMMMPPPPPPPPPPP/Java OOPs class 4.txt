Binding
---------------------------------------------------------------------------------------------------------------------------------------------------------------
	- connecting method call to method body is called as binding.

there are 2 types of binding														VVVVVIMMMPPPPPPPPPPP	
		1) static binding
		2) dynamic binding

1) static binding
	- Static binding is also called as early binding.
	- Static binding will happens before actually program runs.
	- static binding which can be resolved at the compile time by compiler.
	- Method overloading is best example of the static binding.
	- binding of all static method, private method and final method done at compile time by compiler.

2) dynamic binding
	- Dynamic binding is also called as late binding.
	-  Dynamic binding can be resolved at run time by JVM.
	- Dynamic binding is happens after running the programs.
	- Method overriding best example of dynamic binding.

=======================================================================================
package Tutorial1;

public class Demo1 {
	// class level memory location: before running the program
	public static void abc() {
		System.out.println("abc static method");
	}

	// it store in heap memory location:
	// heap memory will create after running the program means at run time
	public void xyz() {
		System.out.println("xyz non static method");
	}

	public static void main(String[] args) 
	{
			Demo1.abc();
			
			Demo1 obj1 =new Demo1();
			obj1.xyz();
	}

}
=======================================================================================
2) Polymorphism 															VVVVVVVVIMMMPPPPPPPPP

	there are 2 main types of polymorphism
	1) Method overloading
	2) Method overriding 
--------------------------------------------------------------------------------------------------------------------------
1) Method overloading														VVVVVVVVIMMMPPPPPPPPP

	- Method overloading is also called as compile time polymorphism, or early binding or static binding.
	- if we have 2 or more method with same method name in same class but with different signature.
	- signature means
					I) same method name but number of arguments is different
					2) same method name and also same number arguments but type of arguments is different.
					3) same method name and also same number or arguments and also same type of arguments but sequence/order of 							arguments is different.
				or
	- signature means
				I)  number of arguments is different
				2) type of arguments is different.
				3) sequence/order of arguments is different.
			

	- can we overload the main method?
			yes

	- can we overload the static method?
			yes

	- can we overload the non static method?
			yes

	- can we overload the private method?
			yes

	- can we overload the final method?
			yes

	- can we overload the default method?
			yes

	- can we overload the protected method?
			yes

	- can we overload the abstract method?
			yes

	- can we overload the constructor?
			yes

==============================================================================
- can we overload the static?
			yes
------------------------------------------------------------------------------------------------------------------

package Tutorial1;

public class Demo2 {
	public static void abc() {
		System.out.println("abc static Method with 0 args");
	}

	public static void abc(int a) 
	{
		System.out.println("abc static Method with 1 int args "+a);
	}

	public static void abc(String a) 
	{
		System.out.println("abc static Method with 1 String args "+a);
	}

	public static void abc(int a, String b) 
	{
		System.out.println("abc static Method with 1 int and 1 String args "+a +""+b);
	}

	public static void abc(String a, int b) {
		System.out.println("abc static Method with 1 String and 1 int args "+a +""+b);
	}

	public static void main(String[] args) {
		Demo2.abc(10, "cucumber");
		Demo2.abc("Selenium");
		Demo2.abc();
		Demo2.abc(1000);
		Demo2.abc("TestNG", 9090);
	}
}
=================================================================================
Can we achieve the method overloading for non static method?
		yes

package Tutorial1;

public class Demo3 {

	// can we overload the non static method
	public void display()
	{
		System.out.println("Non Static Method with 0 args");
	}
	
	public void display(int a)
	{
		System.out.println("Non Static Method with 1 int args");
	}
	
	public void display(char a)
	{
		System.out.println("Non Static Method with 1 char args "+a);
	}
	
	public void display(int a, char b)
	{
		System.out.println("Non Static Method with 1 int and 1 char args "+(a+b));
	}
	
	public void display(char a, int b)
	{
		System.out.println("Non Static Method with 1 char and 1 int args "+(a+b));
	}
	
	
	public static void main(String[] args) {
		Demo3 obj =new Demo3();
		obj.display('a', 10);
		obj.display();
		obj.display(1000);
		obj.display(100, 'P');
		obj.display('S');
		
	}

}
===============================================================================
can we achieve the method overloading for private static method
		yes



package Tutorial1;

public class Demo4 {
	// can we achieve the method overloading for private static method
	private static void xyz() {
		System.out.println("Private Static Method with 0 args");
	}

	private static void xyz(String a) {
		System.out.println("Private Static Method with 1 String args " + a);
	}

	private static void xyz(char a) {
		System.out.println("Private Static Method with 1 char args " + a);
	}

	private static void xyz(String a, char b) {
		System.out.println("Private Static Method with 1 String and 1 char args " + a + " " + b);
	}

	private static void xyz(char a, String b) {
		System.out.println("Private Static Method with 1 char and 1 String args " + a + " " + b);
	}

	public static void main(String[] args) 
	{
		Demo4.xyz();
		Demo4.xyz('A');
		Demo4.xyz("Jenkins");
		Demo4.xyz('A', "Rest Assured");
		Demo4.xyz("Hamcrest Framework", 'A');
	}

}
----------------------------------------------------------------------------------------------------------
can we achieve the method overloading for private NON STATIC method
	yes

package Tutorial1;

public class Demo5 {

	// can we achieve the method overloading for private NON STATIC method
	private void xyz() {
		System.out.println("Private NON Static Method with 0 args");
	}

	private void xyz(String a) {
		System.out.println("Private NON Static Method with 1 String args " + a);
	}

	private void xyz(char a) {
		System.out.println("Private NON Static Method with 1 char args " + a);
	}

	private void xyz(String a, char b) {
		System.out.println("Private NON Static Method with 1 String and 1 char args " + a + " " + b);
	}

	private void xyz(char a, String b) {
		System.out.println("Private NON Static Method with 1 char and 1 String args " + a + " " + b);
	}

	public static void main(String[] args) {
		Demo5 obj = new Demo5();
		obj.xyz();
		obj.xyz('P');
		obj.xyz("Hamcrest Framework");
		obj.xyz('M', "JsonPath");
		obj.xyz("JDBC", 'P');
	}

}
===========================================================================
can we achieve the method overloading for final STATIC method
		Yes

can we achieve the method overloading for final Non STATIC method
		Yes

package Tutorial1;

public class Demo6 {

	// can we achieve the method overloading for final STATIC method
	final public static void display() {
		System.out.println("Final Static Method with 0 args");
	}

	final public static void display(int a) {
		System.out.println("Final Static Method with 1 int args " + a);
	}

	final public static void display(String a) {
		System.out.println("Final Static Method with 1 String args " + a);
	}

	final public static void display(int a, String b) {
		System.out.println("Final Static Method with 1 int and 1 String args " + a + b);
	}

	final public static void display(String a, int b) {
		System.out.println("Final Static Method with 1 String and 1 int args " + a + b);
	}

	public static void main(String[] args) {
		Demo6.display();
		Demo6.display(100);
		Demo6.display("GitHub");
		Demo6.display(100, "Maven Build tool");
		Demo6.display("POM-Design Pattern to design the OR", 9090);
	}

}
package Tutorial1;

public class Demo7 {

	// can we achieve the method overloading for final NON STATIC method
	final public void display() {
		System.out.println("Final NON Static Method with 0 args");
	}

	final public void display(int a) {
		System.out.println("Final NON Static Method with 1 int args " + a);
	}

	final public void display(String a) {
		System.out.println("Final NON Static Method with 1 String args " + a);
	}

	final public void display(int a, String b) {
		System.out.println("Final NON Static Method with 1 int and 1 String args " + a + b);
	}

	final public void display(String a, int b) {
		System.out.println("Final NON Static Method with 1 String and 1 int args " + a + b);
	}

	public static void main(String[] args) {
		Demo7 obj = new Demo7();
		obj.display();
		obj.display(100);
		obj.display("POM");
		obj.display(100, "Version Control System tool");
		obj.display("GitHub", 90900);

	}

}
===========================================================================
Can we achieve method overloading for protected static method
	yes

Can we achieve method overloading for protected non static method
	yes
package Tutorial1;

public class Demo8 {

	// can we achieve the method overloading for protected STATIC method
	protected static void display() {
		System.out.println("protected Static Method with 0 args");
	}

	protected static void display(int a) {
		System.out.println("protected Static Method with 1 int args " + a);
	}

	protected static void display(String a) {
		System.out.println("protected Static Method with 1 String args " + a);
	}

	protected static void display(int a, String b) {
		System.out.println("protected Static Method with 1 int and 1 String args " + a + b);
	}

	protected static void display(String a, int b) {
		System.out.println("protected Static Method with 1 String and 1 int args " + a + b);
	}

	public static void main(String[] args) {
		Demo8.display();
		Demo8.display(100);
		Demo8.display("JDBC");
		Demo8.display(100, "BDD Framework");
		Demo8.display("Extent Reports", 100);
	}

}
------------------------------------------------------------------------------------------
package Tutorial1;

public class Demo9 {

	// can we achieve the method overloading for protected Non STATIC method
	protected void display() {
		System.out.println("protected Non Static Method with 0 args");
	}

	protected void display(int a) {
		System.out.println("protected Non Static Method with 1 int args " + a);
	}

	protected void display(String a) {
		System.out.println("protected Non Static Method with 1 String args " + a);
	}

	protected void display(int a, String b) {
		System.out.println("protected Non Static Method with 1 int and 1 String args " + a + b);
	}

	protected void display(String a, int b) {
		System.out.println("protected Non Static Method with 1 String and 1 int args " + a + b);
	}

	public static void main(String[] args) {
		Demo9 obj = new Demo9();
		obj.display();
		obj.display(100);
		obj.display("Version Control Tool");
		obj.display(100, "Build Tool");
		obj.display("REST API", 90909);
	}

}
===========================================================================
can we achieve the method overloading for static main method
		yes

can we achieve the method overloading for Non static main method
		yes
-----------------------------------------------------

package Tutorial1;

public class Demo10 {
	// can we achieve the method overloading for main static method
	public static void main() {
		System.out.println("main method with 0 args");
	}

	public static void main(int a) {
		System.out.println("main method with 1 int args " + a);
	}

	public static void main(String a) {
		System.out.println("main method with 1 String args " + a);
	}

	public static void main(String a, int b) {
		System.out.println("main method with 1 String and 1 int args " + a + b);
	}

	public static void main(int a, String b) {
		System.out.println("main method with 1 int and 1 String args " + a + b);
	}

	public static void main(String[] args) 
	{
		Demo10.main();
		Demo10.main(100);
		Demo10.main("GitHub");
		Demo10.main(100, "Maven");
		Demo10.main("Rest",100);
	}

}

package Tutorial1;

public class Demo11 {

	// can we achieve the method overloading for main Non static method
	public void main() {
		System.out.println("main Non Static method with 0 args");
	}

	public void main(int a) {
		System.out.println("main Non Static method with 1 int args " + a);
	}

	public void main(String a) {
		System.out.println("main Non Static method with 1 String args " + a);
	}

	public void main(String a, int b) {
		System.out.println("main Non Static method with 1 String and 1 int args " + a + b);
	}

	public void main(int a, String b) {
		System.out.println("main Non Static method with 1 int and 1 String args " + a + b);
	}

	public static void main(String[] args) {
		Demo11 obj = new Demo11();
		obj.main();
		obj.main(100);
		obj.main("Maven");
		obj.main(100, "Rest");
		obj.main("Assert", 1000);

	}
}

===========================================================================
Can we achieve the method overloading  for constructor
		yes

package Tutorial1;

public class Demo12 {

	// can we achieve the method overloading for constructor
	public Demo12() {
		System.out.println("Constructor 0 args");
	}

	public Demo12(int a) {
		System.out.println("Constructor 1 int args " + a);
	}

	public Demo12(String a) {
		System.out.println("Constructor 1 String args " + a);
	}

	public Demo12(int a, String b) {
		System.out.println("Constructor 1 int and 1 String args " + a + b);
	}

	public Demo12(String a, int b) {
		System.out.println("Constructor 1 String and 1 int args " + a + b);
	}
	
	public static void main(String[] args) {
		Demo12 obj1 = new Demo12();
		Demo12 obj2 =new Demo12(100);
		Demo12 obj3= new Demo12("Rest API");
		new Demo12(100,"Maven");
		new Demo12("build tool",9010);
	}
	
}
=====================================================================
can we achieve the method  for abstract method
		yes
package Tutorial1;

public abstract class Demo13 {
	
	//can we achieve the method overloading for abstract method
	public abstract void abc();

	public abstract void abc(int a);

	public abstract void abc(String a);

	public abstract void abc(int a, String b);

	public abstract void abc(String a, int b);

}

package Tutorial1;

public class Sample13 extends Demo13 {

	@Override
	public void abc() {
		System.out.println("abc method with 0 args");

	}

	@Override
	public void abc(int a) {
		System.out.println("abc method with 1 int args " + a);
	}

	@Override
	public void abc(String a) {
		System.out.println("abc method with 1 String args " + a);

	}

	@Override
	public void abc(int a, String b) {
		System.out.println("abc method with 1 int and 1 String args " + a + b);

	}

	@Override
	public void abc(String a, int b) {
		System.out.println("abc method with 1 String and 1 int args " + a + b);

	}

	public static void main(String[] args) {
		Demo13 obj = new Sample13();
		obj.abc();
		obj.abc(100);
		obj.abc("TestNG");
		obj.abc(100, "Cucumber");
		obj.abc("BDD Framework", 1000);
	}

}


===============================================================
can we override the main method			
		No

can we override the static method			
		No

can we override the private method			
		No

can we override the final method			
		No

can we override the constructor 			
		No
----------------------------------------------------------------------------------------------
can we override the abstract method
		yes

can we override the non static method
		yes
----------------------------------------------------------------------------------------------































































