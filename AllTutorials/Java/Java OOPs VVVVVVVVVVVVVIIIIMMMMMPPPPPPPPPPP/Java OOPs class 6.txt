OOPs concept
	1) Inheritance
	2) Polymorphism
	3) Abstraction	
	4) Encapsulation
---------------------------------------------------------------------------------------------------------------------------------------------------
3) Abstraction														VVVVVVVVIMMPPPPPPPPPP
		- Abstraction is process of hiding the implementation details and show the functionality to the users.
		- there are 2 ways we can achieve the Abstraction
					1) by declaring the Abstract Class
					2) by declaring the Interface
---------------------------------------------------------------------------------------------------------------------------------------------------
1) by declaring the Abstract Class									VVVVVVVVIMMPPPPPPPPPP
		- Abstraction is process of hiding the implementation details and showing only functionality to users.
		- by declaring the abstract class we can achieve the 0 to 100% abstractions.
		- If we know the method name but dont know how to implement it then we use abstract class.
		- if java class contains if we have one or more abstract method then we mark class as abstract class.
		- in abstract class, we can declare abstract method (incomplete method) as well as concrete method (complete method).
		- we achieve the abstraction only for abstract non static method.
		- in abstract class, 
								1) we can declare the private method in abstract class
								2) we can declare the static method in abstract class
								3) we can declare the main method in abstract class
								4) we can declare the final method in abstract class
								5) we can declare the constructor in abstract class
								6) we can declare the non static method in abstract class.

		- in abstract class, 
								I) we can't declare the abstract private method
								2) we cant declare the abstract static method
								3) we can't declare the abstract main method
								4) we can't declare the abstract final method
								5) we can't declare the abstract constructor.

		- to achieve abstraction in abstract class, we use inheritance concept.
		- we implements all methods in another class with the help of extends keyword.
		- we can't create object of Abstract class, but we can mention reference of Abstract class.
		- If java class contains if we have one more abstract method then that class is called as abstract class.

Syntax:		declare the abstract method
1) Abstract method without return type and 0 arguments
		AccessModifier AbstractKeyword nonReturntype methodName();

1) Abstract method without return type and multiple arguments
		AccessModifier AbstractKeyword nonReturntype methodName(Datatype variableName, datatype variableName);

3) Abstract method with return type and 0 arguments
		AccessModifier AbstractKeyword Returntype methodName();

4) Abstract method with return type and multiple arguments
		AccessModifier AbstractKeyword Returntype methodName(Datatype variableName, datatype variableName);


what are the different access modifier in java
		there are 4 types of access modifier in java
		1) private
		2) public
		3) default
		4) protected
what is non return type keyword?
		void

what is return type keyword
		byte, short, int, long, float, double, char, boolean, String, array, and own class.

what is method name?
		any name

Datatype;		byte, short, int, long, float, double, char, boolean, String, array, and own class.

variable name:	any name

where we declare the abstract method?
		before the main method or after the main method but inside the class.

---------------------------------------------------------------------------------------------------------------------
package Tutorial3;

public abstract class Demo1 {
	
	//abstract method without return type and 0 args
	public abstract void abc();
	
	//abstract method without return type and 2 int args
	public abstract void pqr(int a,int b);
	
	//abstract method with String return type and 0 args
	public abstract String reverseString();
	
	//abstract method with int return type and 2 int arguments
	public abstract int addition(int a,int b);
	
	//Non static method/ complete method/ concrete method
	public void display()
	{
		System.out.println("Display method");
	}
	
	

}
package Tutorial3;

public class Sample1 extends Demo1 {

	@Override
	public void abc() {
		System.out.println("ABC method in Sample1 class");

	}

	@Override
	public void pqr(int a, int b) {
		System.out.println("PQR method in Sample1 class " + (a + b));
	}

	@Override
	public String reverseString() {
		String a = "selenium";
		String rev = "";
		for (int i = a.length() - 1; i >= 0; i--) {
			rev = rev + a.charAt(i);
		}
		return rev;
	}

	@Override
	public int addition(int a, int b) {
		System.out.println("addition method");
		return a + b;
	}

	public static void main(String[] args) {
		Demo1 obj = new Sample1();
		obj.abc();
		obj.addition(10, 100);
		obj.reverseString();
		obj.pqr(100, 100);
		obj.display();

//		Sample1 obj =new Sample1();
//		obj.abc();
//		obj.pqr(10, 10);
//		obj.reverseString();
//		obj.addition(100,10);
//		obj.display();
	}

}
===========================================================================
package Tutorial3;

public abstract class Demo2 {
	
	//Abstract method or incomplete complete
	public abstract void abc();
	
	//can we declare private in abstract class
	private void a1()
	{
		System.out.println("A1 Private Method");
	}
	
	//can we declare static in abstract class
	public static void a2()
	{
		System.out.println("A2 static method");
	}
	
	//can we declare final method in abstract class
	final public void a3()
	{
		System.out.println("A3 final method");
	}
	
	//can we declare constructor in abstract class
	public Demo2()
	{
		System.out.println("Demo2 constructor");
	}
	
	//can we declare main method in abstract clss
	public static void main(String[] args) {
		Demo2 obj =new Sample2();
		obj.a1();
		obj.a2();
		obj.a3();
		obj.abc();
	}
	
}

package Tutorial3;

public class Sample2 extends Demo2{

	@Override
	public void abc() {
		System.out.println("Abc method");
	}

	public static void main(String[] args) {
		Sample2 obj =new Sample2();
		obj.abc();
		obj.a2();
		obj.a3();
		
		
	}
	
}
=======================================================================

package Tutorial3;

public abstract class Demo3 {
	
	public abstract void d1();
	
	//can we declare abstract private method in abstract class		: NO
	private abstract void d2();
	
	//can we declare abstract static method in abstract class		: No
	public static abstract void d3();
	
	//can we declare abstract final method in abstract clas			: No
	final abstract void d4();
	
	//can we declare abstract main method in abstract class			: No
	public abstract static void main(String [] args);			
	
	//can we declare the abstract constructor in abstract class		: No
	public abstract Demo3();									
}
---------------------------------------------------------------------------------------------------------------------
can we declare abstract private method in abstract class													VVVVVVIMMPPPPPPP
		 NO

why we can't declare abstract private method in abstract class.										VVVVVVIMMPPPPPPP
		to achieve the abstraction compulsory we have to override this method in child class, 
		but access scope of private method is within the class.

---------------------------------------------------------------------------------------------------------------------
can we declare abstract static method in abstract class												VVVVVVIMMPPPPPPP
		No

why we can't declare abstract static method in abstract class.										VVVVVVIMMPPPPPPP
		to achieve the abstraction compulsory we have to override this method in child class, 
		but static method are bonded on static binding at compile time by compiler and we achieve overriding or abstraction we have to use run time
		polymorphism concept.
---------------------------------------------------------------------------------------------------------------------
can we declare abstract final method in abstract class											VVVVVVIMMPPPPPPP
		No

why we can't declare abstract final method in abstract class.										VVVVVVIMMPPPPPPP
		to achieve the abstraction compulsory we have to override this method in child class, 
		but once declare any method as final, in future we can't modify the method logic.

---------------------------------------------------------------------------------------------------------------------
can we declare abstract main method in abstract class										VVVVVVIMMPPPPPPP
		No

why we can't declare abstract main method in abstract class.								VVVVVVIMMPPPPPPP
		because main method is static method

---------------------------------------------------------------------------------------------------------------------
can we declare the abstract constructor in abstract class										VVVVVVIMMPPPPPPP
		No

why we can't declare abstract constructor in abstract class.									VVVVVVIMMPPPPPPP
		to achieve the abstraction compulsory we have to override constructor in child class, 
		but constructor name should be same as class name, in java we can not create 2 classes with same name.

---------------------------------------------------------------------------------------------------------------------
can we declare the private method in abstract class?										VVVVVVIMMPPPPPPP
		yes

can we declare static method in abstract class?												VVVVVVIMMPPPPPPP
		yes

can we declare final method in abstract class?												VVVVVVIMMPPPPPPP
		yes

can we declare main method in abstract class?												VVVVVVIMMPPPPPPP
		yes

can we declare constructor in abstract class												VVVVVVIMMPPPPPPP
		yes

can we achieve overloading for abstract method											VVVVVVIMMPPPPPPP
		yes

can we achieve overriding for abstract method												VVVVVVIMMPPPPPPP
		yes
---------------------------------------------------------------------------------------------------------------------
package Tutorial3;

public abstract class Demo2 {
	
	//Abstract method or incomplete complete
	public abstract void abc();
	
	//can we declare private in abstract class
	private void a1()
	{
		System.out.println("A1 Private Method");
	}
	
	//can we declare static in abstract class
	public static void a2()
	{
		System.out.println("A2 static method");
	}
	
	//can we declare final method in abstract class
	final public void a3()
	{
		System.out.println("A3 final method");
	}
	
	//can we declare constructor in abstract class
	public Demo2()
	{
		System.out.println("Demo2 constructor");
	}
	
	//can we declare main method in abstract clss
	public static void main(String[] args) {
		Demo2 obj =new Sample2();
		obj.a1();
		obj.a2();
		obj.a3();
		obj.abc();
	}
	
}
======================================================================================
package Tutorial3;

public abstract class Demo4 {
	//can we create all complete method in abstract class			: yes
	
	
	public void a1() {
		System.out.println("A1 method");
	}
	
	public void a2() {
		System.out.println("A2 method");
	}
	
	public void a3() {
		System.out.println("A3 method");
	}

	public static void main(String[] args) {
	
		
	}
}

package Tutorial3;

public class Sample4 extends Demo4{

	
	public static void main(String[] args) {
		
		Demo4 obj =new Sample4();
		obj.a1();
		obj.a2();
		obj.a3();
		
	}
}
================================================================
package Tutorial3;

public abstract class Demo5 {

	public abstract void d1();

	public abstract void d2();

	public abstract void d3();

	public abstract void d4();

}

package Tutorial3;

public abstract class Sample5 extends Demo5{

	public void d1()
	{
		System.out.println("D1 method ");
	}

	public void d2()
	{
		System.out.println("D2 method ");
	}
	
		
}

package Tutorial3;

public class Pune5 extends Sample5{

	public void d3()
	{
		System.out.println("D3 method");
	}

	public void d4()
	{
		System.out.println("D4 method");
	}
	
	public static void main(String[] args) {
		
		Sample5 obj=new Pune5();
		obj.d1();
		obj.d2();
		obj.d3();
		obj.d4();
		
		
	}
	
}
========================================================================
package Tutorial3;

public abstract class Demo7 {

	public abstract void d1();

	public abstract void d2();

	public abstract void d3();

}

package Tutorial3;

public abstract class Sample7 extends Demo7 {

	public void d1() {
		System.out.println("D1 method");
	}

	public abstract void s1();

	public abstract void s2();

}

package Tutorial3;

public class Pune7 extends Sample7 {

	public void d2() {
		System.out.println("D2 Method");
	}

	public void d3() {
		System.out.println("D3 Method");
	}

	public void s1() {
		System.out.println("s1 method");
	}

	public void s2() {
		System.out.println("s2 method");
	}

	public static void main(String[] args) {
		Pune7 obj =new Pune7();
		obj.d1();
		obj.d2();
		obj.d3();
		obj.s1();
		obj.s2();
		
//		Sample7 obj =new Pune7();
//		obj.d1();
//		obj.d2();
//		obj.d3();
//		obj.s1();
//		obj.s2();
		
		
//		Demo7 obj =new Pune7();
//		obj.d1();
//		obj.d2();
//		obj.d3();
		
	}
}
=========================================================================================
package Tutorial3;

public abstract class Demo7 {

	public abstract void d1();

	public abstract void d2();

	public abstract void d3();

}

package Tutorial3;

public abstract class Sample7 extends Demo7 {

	public void d1() {
		System.out.println("D1 method");
	}

	public abstract void s1();

	public abstract void s2();

}

package Tutorial3;

public abstract class Pune7 extends Sample7 {

	public void d2() {
		System.out.println("D2 Method");
	}

	public void s1() {
		System.out.println("s1 method");
	}
	
	public abstract void p1();
	
	

}

package Tutorial3;

public abstract class Mumbai7 extends Pune7 {

	public void d3() {
		System.out.println("D3 method");

	}

	public void s2() {
		System.out.println("S2 method");
	}

	public abstract void m1();

}

package Tutorial3;

public class Delhi7 extends Mumbai7 {

	@Override
	public void m1() {
		System.out.println("M1 method");

	}

	@Override
	public void p1() {
		System.out.println("P1 method");
	}
	public static void main(String[] args) {
		Delhi7 obj = new Delhi7();
		obj.d1();
		obj.d2();
		obj.d3();
		obj.s1();
		obj.s2();
		obj.p1();
		obj.m1();

//		Mumbai7 obj =new Delhi7();
//		obj.d1();
//		obj.d2();
//		obj.d3();
//		obj.s1();
//		obj.s2();
//		obj.p1();
//		obj.m1();

//		Pune7 obj =new Delhi7();
//		obj.d1();
//		obj.d2();
//		obj.d3();
//		obj.s1();
//		obj.s2();
//		obj.p1();

//		Sample7 obj =new Delhi7();
//		obj.d1();
//		obj.d2();
//		obj.d3();
//		obj.s1();
//		obj.s2();

//		Demo7 obj =new Delhi7();
//		
//		obj.d1();
//		obj.d2();
//		obj.d3();

	}
}















