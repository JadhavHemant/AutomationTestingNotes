find vowels in String
------------------------------------------------------------------------------------
		vowels		a	e 	i 	o 	u

	String a="selenium";

step 1: convert string into char [] array
			char [] abc = a.toCharArray();


step 2: iterate all the array values

		for(int i=0;i<abc.length;i++)
		{
			
				if(abc[i]=='a' || abc[i]=='e' || abc[i]=='i' || abc[i]=='o' || abc[i]=='u')
				{
					syso(abc[i]);
				}

		}
------------------------------------------------------------------------------------
package Tutorial7;

public class Demo1 {

	public static void main(String[] args) {
		String a = "selenium";

		char[] abc = a.toCharArray();

		for (int i = 0; i < abc.length; i++) {

			if (abc[i] == 'a' || abc[i] == 'e' || abc[i] == 'i' || abc[i] == 'o' || abc[i] == 'u') {

				System.out.println(abc[i]);
			}
		}

	}

}
------------------------------------------------------------------------------------
package Tutorial7;

public class Demo2 {

	public static void main(String[] args) {
		// count how many vowels in string
		String a = "cucumber";

		int counter = 0;

		char[] abc = a.toCharArray();

		for (int i = 0; i < abc.length; i++) {
			if (abc[i] == 'a' || abc[i] == 'e' || abc[i] == 'i' || abc[i] == 'o' || abc[i] == 'u') {
				counter++;
			}
		}

		System.out.println(counter);

	}

}

------------------------------------------------------------------------------------
package Tutorial7;

import java.util.LinkedHashMap;
import java.util.Map.Entry;

public class Demo3 {

	public static void main(String[] args) {
		// Occurrence of vowels in String
		String a = "selenium testing";

		char[] abc = a.toCharArray();

		LinkedHashMap<Character, Integer> hs = new LinkedHashMap();

		for (int i = 0; i < abc.length; i++) {

			if (hs.containsKey(abc[i])) {
				hs.put(abc[i], hs.get(abc[i]) + 1);
			} else {
				hs.put(abc[i], 1);
			}
		}
		
		
		for(Entry<Character, Integer> b: hs.entrySet())
		{
			
			if(b.getKey()=='a' || b.getKey()=='e' || b.getKey()=='i' || b.getKey()=='o' || b.getKey()=='u')
			{
				System.out.println(b.getKey() + " : "+b.getValue());
			}
			
			
		}
		
		

	}

}
===============================================
package Tutorial7;

import java.util.LinkedHashMap;
import java.util.Map.Entry;

public class Demo3 {

	public static void main(String[] args) {
		// Occurrence of vowels in String
		String a = "cucumber testing";

		char[] abc = a.toCharArray();

		LinkedHashMap<Character, Integer> hs = new LinkedHashMap();

		for (int i = 0; i < abc.length; i++) {

			if (hs.containsKey(abc[i])) {
				hs.put(abc[i], hs.get(abc[i]) + 1);
			} else {
				hs.put(abc[i], 1);
			}
		}

		for (Entry<Character, Integer> b : hs.entrySet()) {

			if (b.getValue() > 1) {

				if (b.getKey() == 'a' || b.getKey() == 'e' || b.getKey() == 'i' || b.getKey() == 'o'
						|| b.getKey() == 'u') {
					System.out.println(b.getKey() + " : " + b.getValue());
				}

			}
		}

	}

}
========================================================
package Tutorial7;

public class Demo4 {

	public static void main(String[] args) {
		// print vowels count and constant count
		String a = "cucumber"; // vowels= 3 uue
								// constant =5 ccmbr

		int vowelsCount = 0;
		int constantCount = 0;

		char abc[] = a.toCharArray();

		for (int i = 0; i < abc.length; i++) {

			if (abc[i] == 'a' || abc[i] == 'e' || abc[i] == 'i' || abc[i] == 'o' || abc[i] == 'u') {
				vowelsCount++;
			} else {
				constantCount++;
			}
		}

		System.out.println(vowelsCount);
		System.out.println(constantCount);
	}

}
================================================================
package Tutorial7;

import java.util.LinkedHashMap;
import java.util.Map.Entry;

public class Demo5 {

	public static void main(String[] args) {

		// print occurrence of vowels and constant

		String a = "cucumber testing";

		char[] abc = a.toCharArray();

		LinkedHashMap<Character, Integer> hs = new LinkedHashMap();

		for (int i = 0; i < abc.length; i++) {

			if (hs.containsKey(abc[i])) {
				hs.put(abc[i], hs.get(abc[i]) + 1);
			} else {
				hs.put(abc[i], 1);
			}
		}

		for (Entry<Character, Integer> b : hs.entrySet()) {

			if (b.getValue() > 1) {

				if (b.getKey() == 'a' || b.getKey() == 'e' || b.getKey() == 'i' || b.getKey() == 'o'
						|| b.getKey() == 'u') {
					System.out.println("vowels is " + b.getKey() + " : " + b.getValue());

				} else {
					System.out.println("Constant " + b.getKey() + " : " + b.getValue());
				}

			}
		}

	}

}
=============================================================
package Tutorial7;

public class Demo1 {

	public static void main(String[] args) {
		//print vowels only
		String a = "testing";

		char xyz [] = {'a','e','i','o' ,'u'}; 
		
		char[] abc = a.toCharArray();

		for (int i = 0; i < abc.length; i++) {

			for (int j = 0; j < xyz.length; j++)
			{
				if(abc[i]==xyz[j])
				{
					System.out.println(abc[i]);
				}
			}
			
			
		}

	}

}
===============================================================
package Tutorial7;

public class Demo6 {

	public static void main(String[] args) {
		// find max values in array
		int[] abc = { 100, 200, 40, 500, 600, 700 };

		int max = abc[0];

		for (int i = 0; i < abc.length; i++) {
			if (max < abc[i]) {
				max = abc[i];
			}
		}

		System.out.println(max);

	}

}
package Tutorial7;

public class Demo6 {

	public static void main(String[] args) {
		// find min values in array
		int[] abc = { 100, 200, 40, 500, 600, 700 };

		int min = abc[0];

		for (int i = 0; i < abc.length; i++) {
			if (min > abc[i]) {
				min = abc[i];
			}
		}

		System.out.println(min);

	}

}
====================================
package Tutorial7;

public class Demo6 {

	public static void main(String[] args) {
		// find min values in array
		int[] abc = { 100, 200, 40, 500, 600, 700 };

		int min = abc[0];

		for (int i = 0; i < abc.length; i++) {
			if (min > abc[i]) {
				min = abc[i];
			}
		}

		System.out.println(min);

	}

}

package Tutorial7;

import java.util.TreeSet;

public class Demo7 {

	public static void main(String[] args) {
		// find minimum values in array using collection
		int[] abc = { 100, 200, 40, 500, 600, 700 };

		TreeSet<Integer> t = new TreeSet<Integer>();

		for (int i = 0; i < abc.length; i++) {
			t.add(abc[i]);
		}

		System.out.println(t.first());//min
		System.out.println(t.last());//max

	}

}

package Tutorial7;

import java.util.ArrayList;
import java.util.Collections;

public class Demo7 {

	public static void main(String[] args) {
		// find minimum values in array using collection
		int[] abc = { 100, 200, 40, 500, 600, 700 };

		ArrayList<Integer> t = new ArrayList<Integer>();

		for (int i = 0; i < abc.length; i++) {
			t.add(abc[i]);
		}
		
		Collections.sort(t);
		
		System.out.println(t.get(0));//min
		
		System.out.println(t.get(t.size()-1));//max
		
		
		
	

	}

}

package Tutorial7;

import java.util.ArrayList;
import java.util.Collections;

public class Demo7 {

	public static void main(String[] args) {
		// find minimum values in array using collection
		int[] abc = { 100, 200, 40, 500, 600, 700 };

		ArrayList<Integer> t = new ArrayList<Integer>();

		for (int i = 0; i < abc.length; i++) {
			t.add(abc[i]);
		}

		Collections.sort(t);

		System.out.println(t.get(0));// min
		System.out.println(t.get(1));// 2nd lowest

		System.out.println(t.get(t.size() - 1));// max

		System.out.println(t.get(t.size() - 2));// 2nd max

	}

}

package Tutorial7;

import java.util.Arrays;

public class Demo8 {

	public static void main(String[] args) {
		int[] abc = { 100, 0, 200, 0, 30, 40 };
		// o/p : 0 0 100 200 30 40

		int[] xyz = new int[abc.length];
		
		int counter = 0;
		
		for (int i = 0; i < abc.length; i++) {
			if (abc[i] == 0) {
				counter++;
			}
		}
		System.out.println(counter);

		for (int i = 0; i < xyz.length; i++) {
			if (abc[i] != 0) {
				xyz[counter++] = abc[i];
			}
		}

		System.out.println(Arrays.toString(xyz));

	}

}
----------------------------------------------------------
package Tutorial7;

public class Demo10 {

	public static void main(String[] args) {

		int a = 0;
		int b = 1;
		int c;

		for (int i = 0; i < 10; i++) {
			// addition a and b
			c = a + b;
			System.out.println(c);
			// allocate b values to a variable
			a = b;
			// allocate c values to b variable
			b = c;
		}

	}

}
------------------------------------------------------------------------------

package Tutorial7;

import java.util.LinkedHashSet;

public class Demo101 {

	public static void main(String[] args) {

		int[] abc = { 100, 20, 30, 100, 20, 40 };

		// Collections
		LinkedHashSet<Integer> hs = new LinkedHashSet<Integer>();

		for (int i = 0; i < abc.length; i++) {
			hs.add(abc[i]);
		}

		System.out.println(hs);

	}

}
package Tutorial7;

public class Demo22 {

	public static void main(String[] args) {

		int[] abc = { 100, 20, 30, 100, 20, 40 };

		for (int i = 0; i < abc.length; i++) 
		{
			boolean b = true;

			for (int j = i + 1; j < abc.length; j++) 
			{
					//40==40
				if (abc[i] == abc[j]) 
				{
					b = false;
					break;
				}
			}

			if (b) 
			{
				System.out.println(abc[i]);// 30 100 20 40
			}
		}

	}

}

package Tutorial7;

public class Demo22 {

	public static void main(String[] args) {

		int[] abc = { 100, 20, 30, 100, 20, 40 };

		// step 1; iterate the values
		for (int i = 0; i < abc.length; i++) {

			// create boolean true variable
			boolean b = true;

			// iterate the value and use initial condition i+1
			for (int j = i + 1; j < abc.length; j++) {
				// if abc[i] ==abc[j] both values are equal then
				// change boolean variable condition to false and break the loop
				if (abc[i] == abc[j]) {
					b = false;
					break;
				}
			}

			// if b variable values is true then execute the if block code.
			if (b) {
				System.out.println(abc[i]);// 30 100 20 40
			}
		}

	}

}
package Tutorial7;

public class Demo121 {

	public static void main(String[] args) {
		int abc[] = { 100, 200, 100,50,30,40,50,200};
		
			//abc[2]= 100
		for (int i = 0; i < abc.length; i++) 
		{	
			boolean b=true;
			
			for (int j = i+1; j < abc.length; j++) 
			{
				//200 == 100
				if(abc[i]==abc[j])
				{
					b=false;
					break;
				}
			}
			
			
			if(b)
			{
				System.out.println(abc[i]);//200 100
			}
			
			
			
		}
		
		
	}

}

package Tutorial7;

public class Demo121 {

	public static void main(String[] args) {
		String abc[] = { "java", "selenium", "java"};
		
		
		for (int i = 0; i < abc.length; i++) 
		{	
			boolean b=true;
			
			for (int j = i+1; j < abc.length; j++) 
			{
				//100 == 100
				if(abc[i]==abc[j])
				{
					b=false;
					break;
				}
			}
			
			
			if(b)
			{
				System.out.println(abc[i]);//200 100
			}
			
			
			
		}
		
		
	}

}
=========================================
package Tutorial7;

public class Demo121 {

	public static void main(String[] args) {
		int abc[] = { 100, 200, 100 };

		for (int i = 0; i < abc.length; i++) {
			boolean b = true;

			// Point 1: if abc[i]==abc[j] values are same/equal then it change b variable to
			// false and it will terminate the inner for loop

			// Point 2: if abc[i]==abc[j] values are not same/equals then it execute end to
			// end for block of code
			// and it will not update b variables values and by default b variable value is
			// same as like old.

			for (int j = i + 1; j < abc.length; j++) {
				// 100 == 100
				if (abc[i] == abc[j]) {
					b = false;
					break;
				}
			}

			// Point 1: if b variable value is false then it will skip if block of code
			// Point 2: if v variable value is old/ true then it will execute if block of code and
			// and it will print abc[i] values

			if (b) {
				System.out.println(abc[i]);// 200 100
			}

		}

	}

}
------------------------------------------------------------------------------------------------------------------------------

package Tutorial7;

public class Demo121 {

	public static void main(String[] args) {
		String abc[] = { "java", "selenium", "java" };

		for (int i = 0; i < abc.length; i++) {
			boolean b = true;

			// Point 1: if abc[i]==abc[j] values are same/equal then it change b variable to
			// false and it will terminate the inner for loop

			// Point 2: if abc[i]==abc[j] values are not same/equals then it execute end to
			// end for block of code
			// and it will not update b variables values and by default b variable value is
			// same as like old.

			for (int j = i + 1; j < abc.length; j++) {
				// 100 == 100
				if (abc[i] == abc[j]) {
					b = false;
					break;
				}
			}

			// Point 1: if b variable value is false then it will skip if block of code
			// Point 2: if v variable value is old/ true then it will execute if block of code and
			// and it will print abc[i] values

			if (b) {
				System.out.println(abc[i]);// 200 100
			}

		}

	}

}








