OOPs concepts in java (Object Oriented Programming)

there are 4 main pillars in oops
	1)Inheritance
	2)Polymorphism
	3)Abstraction
	4)Encapsulation
	
1)Inheritance-
	- It is a process of reusing data members from one class to another class.
	- data members means variables and methods.
	- we achieve inheritance using "extends" keyword.
	- the class where class members are getting inherited called as "Parent or Base or Super Class".
	- the class on which class members are getting inherited called as "child or derived or sub class".
	- there are 5 types of inheritance
	
	i)Single level inheritance
	ii)Multilevel inheritance
	iii)Hierarchical inheritance
	iv)Multiple inheritance
	v)Hybrid inheritance

i)Single level inheritance-
	
	-in single level we extends one class to another class.

ii)Multilevel inheritance-
	-in Multilevel we extends one class to another class and another class to another class and so on.
	
iii)Hierarchical inheritance-
	-in Hierarchical we have one parent class and multiple child classes.

iv)Multiple inheritance-
	-in Multiple we have 2 parent classe and one child class.
	-java does not support multiple inheritance.

v)Hybrid inheritance- 
	-Hybrid is a combination of multilevel and multiple inheritance.
	-java does not support Hybrid inheritance.

2) Why java does not support for multiple or hybrid inheritance in java ?
	-in Multiple we have 2 parent classe and one child class.
	-To prevent the ambiguity issue.
	-consider we have 3 classes. classA classB classC and classA classB are parent classes of classC and
	-And in classA and classB have same methods show() and we have to extend classA in ClassC as well as classB in ClassC
	-then if we create object of child class then we can access all methods from parent class and child class
	-but currently show() present inside classA and classB, so java compiler does
	-not decide which show() method we have to call.
	-to prevent such condition java does not support multiple inheritance.
	-still if want to achieve multiple inheritance then we can use interface concept.

2)Polymorphism-
	-Polymorphism means we perform one task in different ways
	-there are 2 types of polymorphism
	
	i)Method Overloading
	ii)Method Overriding

i)Method Overloading-
	-In Method Overloading we have same method name but different signatures.
	-it is also known as static binding or early binding or compile time polymorphism.
	-we achieve method overloading one or more classes.
	-we can overload main method,static method, non-static method ,private method ,final method, constructor, default method, protected method, abstract method
	public method.
	-there are different methods overloaded in selenium implicitly wait,pageloadTimeOut , all Actions class methods, frame(), to().
	
-different signature means 
	a)number of arguments different
	b)type of arguments different
	c)sequence of arguments different

ii)Method Overriding-
	-In Method Overriding we have same method name and same signatures.
	-it is also known as dynamic binding or late binding or runtime polymorphism.
	-we achieve method overriding two or more classes.
	-we achieve method overriding using inheritance concept.
	-we can override public non-static method , default non-static method, protected non-static method, abstract method.
	-we can't override private method, static method, main method, final method and constructor.
	-there are different methods override in selenium
		a)findElement()
		b)findElements()
		c)getScreenshotAs()
		d)getText()
		e)sendKeys()

	

3)Abstraction-
	-Abstraction means hiding the implementation details and showing only functionality to users.
	
-there are 2 ways we can achieve the abstraction
	i)By declaring Abstract class
	ii)By declaring interface

i)By declaring Abstract class-
	-we define Abstract class using Abstract Keyword
	-if we define one or more abstract methods in java class the it will mark class as a Abstract class.
	-in Abstract class we declare abstract methods and concrete methods.
	-abstract method is called as incomplete method,incomplete method means without method body.
	-concrete method is called as complete method, it means we write body for method.
	-By declaring abstract class we achieve 0 to 100% abstractions.
	-we can't create object of Abstract class ,we can use reference of Abstract class.
	-abstraction is built on method overriding concept means once we declare any method in abstract class compulsory we have to override these methods in child classes.
	-we achieve abstraction using inheritance concept.
	-we can declare private method, static method ,main method ,final method and non static and constructor.
	-we can't declare Abstract  private method, Abstract static method ,Abstract  main method ,Abstract  final method and Abstract constructor.
	-we achieve the abstraction only for ABSTRACTION NON-STATIC METHOD.

ii)By declaring interface-
	-we define interface using interface Keyword
	-By declaring interface we achieve 100% abstractions.
	-interface is type of defination block which contains we can write 100% method abstract methods and concrete methods.
	-we implement interface abstract methods in another class by using implements keyword.
	-if we want to extend one interface into the another interface then we use "extends" keyword.
	-in interface at the time of declaring the abstract methods abstract keyword is optional.
	-in interface all variables are by default final and static and we can't modify the values.
	-we can't create object of interface ,we can use reference of interface.
	-interface supports multiple inheritance.
	-we can create the abstract(), static(), private(), default non-static().
	-we can't create abstract static(), abstract private(), abstract final(), abstract constructor,constructor,final(), abstract protected().

4)Encapsulation-
	-It means wrapping data member and member function in single unit.
	-we can access private methods in another class by using getter() and setter().
	-by using getter() we get the values, by using setter() we reassign the values.