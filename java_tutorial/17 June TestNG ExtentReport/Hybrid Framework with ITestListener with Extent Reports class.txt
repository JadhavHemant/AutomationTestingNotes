Extent Reports												VVVVVIMMMMMMMMMMPPPPP
-----------------------------------------------------------------------------------------------------------------------------------
	- Extent Reports is an open source library which is used to generate the Standard HTML Reports.
	- Extent Reports we can easily integrate with any testing framework as like (TestNG, JUnit).
	- It will generate Extent Reports in pie chart.

	inside the Extent Reports library they define 3 most important classes.
	1) ExtentReports class
	2) ExtentSparkReporter class
	3) ExtentTest class.

	1) ExtentReports class
				- ExtentReports class is used to start generating the Extent Reports.
				- if u want to start generating the Extent Reports then we have to create Object of ExtentReports class.
					ExtentReports extentReports =new ExtentReports();

				- ExtentReports class is also used to create the test cases inside the Extent Reports by using createTest() method by passing 					Test case name.
		
					ExtentTest = extentReports.createTest("test case name");

				- ExtentReports class is also used to stop generating ExtentReports by using flush() method
		
					extentReports.flush();

	
	2) ExtentSparkReporter class
				- ExtentSparkReporter class is used to store the generate reports in destination locations
				- if u want to store the generated Extent Reports in Destination location we have to create ExtentSparkReporter class by 	passing destination location
			
					ExtentSparkReporter extentReporter = new ExtentSparkReporter("destination location");

	3) ExtentTest class.
			- ExtentTest class is used to generate different test cases logs in Extent Reports
				i) we can create test cases pass log by using ExtentTest class object name dot log() method

									extentTest.log(Status.PASS, "Test case Pass Name");


				ii) we can create test case Fail log by using ExtentTest class object name dot log() method
							
									extentTest.log(Status.FAIL, "Test case Fail name");


				iii) can we create test case skip log by using ExtentTest class object name dot log() method
			 			
										extentTest.log(Status.SKIP, "Test case Skip name");

============================================================================================
public class Sample1 implements ITestListener
{
		ExtentReports extentReports;
		ExtentTest extentTest;

			public void onStart(ITestContext context)
			{
					//start generating Extent Reports
						extentReports =new ExtentReports();

					//store report in destination location	
					ExtentSparkReporter extentReporter =new ExtentSparkReporter("destination location");

					//attach generate report to destination location
						extentReports.attachReporter(extentReporter);
			}		


		public void onTestStart(ITestResult result)
		{
			//capture test case name
			String a = result.getMethod().getMethodName();
			//create the test cases inside the Extent Reports by using createTest() method and by passing test case name.
			extentTest = extentReports.createTest("Test case Started name is "+a);
		}

		public void onTestSuccess(ITestResult result)
		{
			//capture the test case name
				String b = result.getMethod().getMethodName();
			//generate the Test case pass log inside the Extent Reports
			extentTest.log(Status.PASS , "Test case Pass name is "+b);
		}

		public void onTestFailure(ITestResult result)
		{
			//capture the test name
			String c = result.getMethod().getMethodName();
			//generate the tets case fail log in extent reports
			extentTest.log(Status.FAIL, "test case fail name is "+c);
		}

		public void onTestSkipped(ITestResult result)
		{
				//capture the test case name
				String d = result.getMethod().getMethodName();
				.//generate the test case skip log in extent reports
			extentTest.log(Status.SKIP, "test case fail name is "+d);
		}

		public void onFinish(ITestContext context)
		{
					//stop generating the extent reports
				extentReports.flush();
		}		
		

=====================================================================================
<!-- https://mvnrepository.com/artifact/com.aventstack/extentreports -->
<dependency>
    <groupId>com.aventstack</groupId>
    <artifactId>extentreports</artifactId>
    <version>5.0.9</version>
</dependency>

=====================================================================================
package UtilityLayer;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;

public class Sample1 implements ITestListener {
	ExtentReports extentReports;
	ExtentTest extentTest;

	@Override
	public void onStart(ITestContext context) {
		// Start generating Extent Reports
		extentReports = new ExtentReports();
		// Store Report in destination location
		ExtentSparkReporter extentReporter = new ExtentSparkReporter(
				"C:\\Users\\praf0\\OneDrive\\Desktop\\Automation Testing 27th April 2024 Batch\\Hybrid Framework Basic Workspace\\HybridFramework3\\Reports\\abc.html");

		// Attach generate Extent Report to destination location
		extentReports.attachReporter(extentReporter);
	}

	@Override
	public void onTestStart(ITestResult result) {
		// capture the Test case name
		String a = result.getMethod().getMethodName();
		// create the test case using createTest() method and by passing test name
		extentTest = extentReports.createTest("Test Case Started Name is " + a);
	}

	@Override
	public void onTestSuccess(ITestResult result) {
		// capture the Test case name
		String b = result.getMethod().getMethodName();
		// generate the test pass log inside the Extent Reports
		extentTest.log(Status.PASS, "Test case Pass name is "+b);
	}

	@Override
	public void onTestFailure(ITestResult result) {
		// capture the Test case name
		String c = result.getMethod().getMethodName();
		// generate the test FAIL log inside the Extent Reports
		extentTest.log(Status.FAIL, "Test case Fail name is "+c);
	}

	@Override
	public void onTestSkipped(ITestResult result) {
		// capture the Test case name
		String d = result.getMethod().getMethodName();
		// generate the test SKIP log inside the Extent Reports
		extentTest.log(Status.SKIP, "Test Case skip name is "+d);
	}

	@Override
	public void onFinish(ITestContext context) {
		// stop generating extent reports
		extentReports.flush();
	}

}
============================================================================================================
package UtilityLayer;

import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;

import BaseLayer.BaseClass;

public class ListenerSetUp extends BaseClass implements ITestListener {
	ExtentReports extentReports;
	ExtentTest extentTest;

	@Override
	public void onStart(ITestContext context) {
		extentReports = new ExtentReports();
		ExtentSparkReporter extentReporter = new ExtentSparkReporter(
				System.getProperty("user.dir") + "\\Reports\\a1.html");
		extentReports.attachReporter(extentReporter);

	}

	@Override
	public void onTestStart(ITestResult result) {
		String a = result.getMethod().getMethodName();
		extentTest = extentReports.createTest("Test case Started name is " + a);
	}

	@Override
	public void onTestSuccess(ITestResult result) {
		String b = result.getMethod().getMethodName();
		extentTest.log(Status.PASS, "Test case Pass name is " + b);

		TakesScreenshot ts = (TakesScreenshot) driver;
		File f = ts.getScreenshotAs(OutputType.FILE);
		String destinationpath = System.getProperty("user.dir") + "\\PassScreenshot\\" + b + ".png";
		File dest = new File(destinationpath);

		try {
			FileUtils.copyFile(f, dest);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// attach screenshot to reports from destination Path
		extentTest.addScreenCaptureFromPath(destinationpath);

	}

	@Override
	public void onTestFailure(ITestResult result) {
		String c = result.getMethod().getMethodName();
		extentTest.log(Status.FAIL, "Test case Fail name is " + c);

		TakesScreenshot ts = (TakesScreenshot) driver;
		File f = ts.getScreenshotAs(OutputType.FILE);

		String destinationPath = System.getProperty("user.dir") + "\\FailScreenshot\\" + c + ".png";

		File dest = new File(destinationPath);

		try {
			FileUtils.copyFile(f, dest);
		} catch (IOException e) {
			// TODO Auto-generated catch block
		}

		//attach screenshot to reports from destination location
		extentTest.addScreenCaptureFromPath(destinationPath);
		
	}

	@Override
	public void onTestSkipped(ITestResult result) {
		String d = result.getMethod().getMethodName();
		extentTest.log(Status.SKIP, "Test case Skip name is " + d);
	}

	@Override
	public void onFinish(ITestContext context) {
		extentReports.flush();
	}

}
=========================================================================================
package UtilityLayer;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;

import BaseLayer.BaseClass;

public class ScreenshotClass extends BaseClass {

	public static String captureDateAndTime() {
		SimpleDateFormat simple = new SimpleDateFormat("ddMMyyyy_HHmmss");

		String abc = simple.format(new Date());

		return abc;
	}

	public static String captureScreenshot(String foldername, String screenshotName) {
		TakesScreenshot ts = (TakesScreenshot) driver;
		File f = ts.getScreenshotAs(OutputType.FILE);

		String destPath = System.getProperty("user.dir") + "//" + foldername + "//" + screenshotName
				+ captureDateAndTime() + ".png";

		File dest = new File(destPath);
		try {
			FileUtils.copyFile(f, dest);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return destPath;
	}

}


package UtilityLayer;

import java.text.SimpleDateFormat;
import java.util.Date;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;

import BaseLayer.BaseClass;

public class ListenerSetUp extends BaseClass implements ITestListener {
	ExtentReports extentReports;
	ExtentTest extentTest;

	@Override
	public void onStart(ITestContext context) {
		String abc = context.getSuite().getName();
		String monthYear = new SimpleDateFormat("MMyyyy").format(new Date());
		
		extentReports = new ExtentReports();
		ExtentSparkReporter extentReporter = new ExtentSparkReporter(
				System.getProperty("user.dir") + "\\"+"ExtentReports\\"+monthYear+"\\" + abc + ScreenshotClass.captureDateAndTime() + ".html");
		extentReports.attachReporter(extentReporter);

	}

	@Override
	public void onTestStart(ITestResult result) {
		String a = result.getMethod().getMethodName();
		extentTest = extentReports.createTest("Test case Started name is " + a);
	}

	@Override
	public void onTestSuccess(ITestResult result) {
		String b = result.getMethod().getMethodName();
		extentTest.log(Status.PASS, "Test case Pass name is " + b);

		String destPath = ScreenshotClass.captureScreenshot("PassScreenshot", b);

		// attach screenshot to reports from destination Path
		extentTest.addScreenCaptureFromPath(destPath);

	}

	@Override
	public void onTestFailure(ITestResult result) {
		String c = result.getMethod().getMethodName();
		extentTest.log(Status.FAIL, "Test case Fail name is " + c);

		String destPath = ScreenshotClass.captureScreenshot("FailScreenshot", c);

		extentTest.addScreenCaptureFromPath(destPath);
	}

	@Override
	public void onTestSkipped(ITestResult result) {
		String d = result.getMethod().getMethodName();
		extentTest.log(Status.SKIP, "Test case Skip name is " + d);
	}

	@Override
	public void onFinish(ITestContext context) {
		extentReports.flush();
	}

}

package BaseLayer;

import java.time.Duration;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class BaseClass {
	public static WebDriver driver;

	public static void initilization() {
		driver = new ChromeDriver();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
		driver.manage().window().maximize();
		driver.get("https://opensource-demo.orangehrmlive.com/web/index.php/auth/login");
	}

}


package TestLayer;

import org.openqa.selenium.By;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import BaseLayer.BaseClass;

public class OrangeTest extends BaseClass {

	@AfterMethod
	public void a() throws InterruptedException {
		Thread.sleep(2000);
	}

	@BeforeTest
	public void setUp() {
		BaseClass.initilization();
	}

	@Test(priority = 1)
	public void validateloginFunctionalityTest() throws InterruptedException {
		driver.findElement(By.name("username")).sendKeys("Admin");
		driver.findElement(By.name("password")).sendKeys("admin123");
		driver.findElement(By.xpath("//button[text()=' Login ']")).click();
		Thread.sleep(2000);
	}

	@Test(priority = 2)
	public void validateHomeTitle() {
		Assert.assertEquals(driver.getTitle(), "google");
	}

	@Test(priority = 3)
	public void validateHomeUrl() {
		Assert.assertEquals(driver.getCurrentUrl().contains("google"), true);
	}

	@Test(priority = 4)
	public void validatePIMPage() throws InterruptedException {
		driver.findElement(By.xpath("//span[text()='PIM']")).click();

		Assert.assertEquals(driver.getCurrentUrl().contains("pim"), true);
		Thread.sleep(2000);
	}

}






















	