1) how to click on element using JavascriptExecutor											VVVVVIMMPPPPPPPPPP
2) how to enter text in text box using JavascriptExecutor										VVVVVIMMPPPPPPPPPP
3) how to perform scroll up and scroll down using JavascriptExecutor							VVVVVIMMPPPPPPPPPP
4) how to create border for element using JavascriptExecutor									VVVVVIMMPPPPPPPPPP
5) how to handle drop down using JavascriptExecutor											VVVVVIMMPPPPPPPPPP
--------------------------------------------------------------------------------------------------------------------------------------------
JavascriptExecutor interface:
--------------------------------------------------------------------------------------------------------------------------------------------
1) How to navigate back in browser history by using JavascriptExecutor
			- convert the WebDriver object into the JavascriptExecutor
			- use executeScript() method by passing history.go(negative int value);
			- if u want to navigate one step back in browser history then we use -1 value inside the history.go() method.
			- if u want to navigate two step back in browser history then we use -2 value inside the history.go() method.
			- if u want to navigate three step back in browser history then we use -3 value inside the history.go() method.
syntax:
				JavascriptExecutor js = (JavascriptExecutor)driver;
				js.executeScript("history.go(-1);");		//it will navigate one step back in browser history
				js.executeScript("history.go(-2);");		//it will navigate two step back in browser history
				js.executeScript("history.go(-3);");		//it will navigate three step back in browser history


2) How to navigate forward in browser history by using JavascriptExecutor
			- convert the WebDriver object into the JavascriptExecutor
			- use executeScript() method by passing history.go(positive values int value);
			- if u want to navigate one step forward in browser history then we use +1 value inside the history.go() method.
			- if u want to navigate two step forward in browser history then we use +2 value inside the history.go() method.
			- if u want to navigate three step forward in browser history then we use +3 value inside the history.go() method.
syntax:
				JavascriptExecutor js = (JavascriptExecutor)driver;
				js.executeScript("history.go(+1);");		//it will navigate one step forward in browser history
				js.executeScript("history.go(2);");		//it will navigate two step forward in browser history
				js.executeScript("history.go(3);");		//it will navigate three step forward in browser history


3) How to navigate refresh the browser by using JavascriptExecutor
			- convert the WebDriver object into the JavascriptExecutor
			- use executeScript() method by passing history.go(0);

syntax:
				JavascriptExecutor js = (JavascriptExecutor)driver;
				js.executeScript("history.go(0);");

--------------------------------------------------------------------------------------------------------------------------------------------
Scenario:
		- Open a google application
		- navigate to facebook application
		- navigate to red bus application
		- navigate to amazon application
		- navigate one step back in browser history
		- navigate one step forward in browser history
		- refresh the browser using JavascriptExecutor
		- navigate 2 step back in browser history
		- navigate 2 step forward in browser history
		- navigate 3 step back browser history
		- navigate 3 step forward in browser history
		- refresh the browser

Step 1: connect to actual browser
step 2: up casting concept
		WebDriver driver =new Chromedriver();

step 3: open a google url
		driver.get("https://www.google.com");

step 4: navigate to facebook application
		driver.navigate().to("https://www.facebook.com");

step 5: navigate to redbus application
		driver.navigate().to("https://www.redbus.com");

step 6: navigate to amazon application
		driver.navigate().to("https://www.amazon.in");


step 7: convert the WebDriver Object into the JavascriptExecutor 
		JavascriptExecutor  js = (JavascriptExecutor)driver;
	

step 8: navigate one step back in browser history
		js.executeScript("history.go(-1);");


step 9: navigate one step forward in browser history
		js.executeScript("history.go(1);");

step 10: refresh the browser or reload the browser
		js.executeScript("history.go(0);");

step 11: navigate 2 step back in browser history
		js.executeScript("history.go(-2);");


step 12: navigate 2 step forward in browser history
		js.executeScript("history.go(+2);");


step 13: navigate 3 step back in browser history
		js.executeScript("history.go(-3);");


step 14: navigate 3 step forward in browser history
		js.executeScript("history.go(+3);");

step 15: refresh the browser or reload the browser
		js.executeScript("history.go(0);");


package JavascriptExecutorTutorial2;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo1 {

	public static void main(String[] args) throws InterruptedException {
		// step 1: connect browser
		// step 2: up casting
		WebDriver driver = new ChromeDriver();

		// step 3: open a url
		driver.get("https://www.google.com");

		Thread.sleep(3000);
		// step 4: navigate to facebook url
		driver.navigate().to("https://facebook.com");

		Thread.sleep(3000);
		// step 5: navigate to redbus url
		driver.navigate().to("https://redbus.com");

		Thread.sleep(3000);
		// step 6: navigate to facebook url
		driver.navigate().to("https://amazon.in");

		// step 7: convert the WebDriver Object into the JavascriptExecutor
		JavascriptExecutor js = (JavascriptExecutor) driver;

		// step 8: navigate one step back browser history by using executeScript()
		// method and by passing history.go(-1) keyword.
		Thread.sleep(3000);
		js.executeScript("history.go(-1);");

		Thread.sleep(3000);
		// step 9: navigate one step forward browser history by using executeScript()
		// method and by passing history.go(1) keyword
		js.executeScript("history.go(1);");

		Thread.sleep(3000);
		// step 10: refresh the browser by using executeScript() method and by passing
		// history.go(0) keyword
		js.executeScript("history.go(0);");

		// step 11: navigate 2 step back in browser history by using
		// executeScript()method and by passing history.go(-2)
		js.executeScript("history.go(-2);");

		Thread.sleep(3000);
		// step 12: navigate 2 step forward in browser history by using executeScript()
		// method and
		// by passing history.go(2) keyword.
		js.executeScript("history.go(+2);");

		Thread.sleep(3000);
		// step 13: navigate 3 step back in browser history by using
		// executeScript()method and by passing history.go(-3)
		js.executeScript("history.go(-3);");

		Thread.sleep(3000);
		// step 14: navigate 3 step forward in browser history by using executeScript()
		// method and
		// by passing history.go(3) keyword.
		js.executeScript("history.go(+3);");

		Thread.sleep(3000);
		// step 15: refresh the browser by using executeScript() method and by passing
		// history.go(0) keyword
		js.executeScript("history.go(0);");

	}

}
==============================================================================================
How to navigate 10 step back in browser history?							
How to navigate 10 step forward in browser history?
==============================================================================================
4) how to capture browser title using JavascriptExecutor
		- convert the WebDriver Object into JavascriptExecutor
		- use executeScript() by passing return document.title keyword and  then use toString() method to convert to captured values to String. 
		- return type of toString() method is String.
syntax:
			JavascriptExecutor js = (JavascriptExecutor)driver;
			String abc = js.executeScript("return document.title;").toString();	

5) how to capture browser URL using JavascriptExecutor
		-  convert the WebDriver Object into the  JavascriptExecutor
		- use executeScript() method by passing return document.URL keyword and then use toString() method to convert to captured values to string.
		- return type of toString() method is String.

syntax:
		JavascriptExecutor js = (JavascriptExecutor)driver;
		String xyz = js.executeScript("return document.URL;").toString();


Scenario:
		open a facebook application
		capture title and url using JavascriptExecutor


Step 1: connect browser
step 2: up casting
step 3: open facebook url
		driver.get("https://www.facebook.com");
step 4: convert the WebDriver object into the JavascriptExecutor
		JavascriptExecutor js = (JavascriptExecutor)driver;

step 5: capture title using JavascriptExecutor
		we use executeScript() method by passing return document.title keyword and then we use toString() method.
		String abc = js.executeScript("return document.title;").toString();

step 6: capture url using JavascriptExecutor
		we use executeScript() method by passing return document.URL keyword and then we use toString() method
		String xyz = js.executeScript("return document.URL;").toString(); 


package JavascriptExecutorTutorial2;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo2 {

	public static void main(String[] args) {
		// step 1: connect browser
		// step 2: up casting
		WebDriver driver = new ChromeDriver();

		// step 3: open a url
		driver.get("https://www.facebook.com");

		// step 4: convert the WebDriver object into the JavascriptExecutor
		JavascriptExecutor js = (JavascriptExecutor) driver;

		// step 5: use executeScript() method by passing return document.title keyword
		// and then use toString() method
		String abc = js.executeScript("return document.title;").toString();
		System.out.println(abc);

		// step 6: use executeScript() method by passing return document.URL keyword and
		// then to String() method
		String xyz = js.executeScript("return document.URL;").toString();
		System.out.println(xyz);
	}

}
=========================================================================================================
How to perform scroll up to element by using JavascriptExecutor								VVVVVIMMMPPPPPPPPPPPP

		- first find the element in web page using findElement() method and given locator
				WebElement wb = driver.findElement(By.xpath("xpath value"));

		- convert the WebDriver object into the JavascriptExecutor
				JavascriptExecutor js = (JavascriptExecutor)driver;

		- use executeScript() method by passing arguments[0].scrollIntoView(true) method and WebElement instance.
	
				js.executeScript("arguments[0].scrollIntoView();", wb);
								or
				js.executeScript("arguments[0].scrollIntoView(true);", wb);


Scenario: 
		Open a amazon.in url
		scroll up to Shop activity trackers and smartwatches text

step 1: connect to actual browser
step 2: up casting
			WebDriver driver = new ChromeDriver();

step 3: open a url
			driver.get("https://www.amazon.in");

step 4: find the element
		WebElement wb = driver.findElement(By.xpath("//h2[text()='Shop activity trackers and smartwatches']"));

step 5: convert the WebDriver Object into the JavascriptExecutor
		JavascriptExecutor js = (JavascriptExecutor)driver;

step 6; use executeScript() method by passing arguments[0].scrollIntoView() method and WebElement instance
		
		js.executeScript("arguments[0].scrollIntoView();",wb);



package JavascriptExecutorTutorial2;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo3 {

	public static void main(String[] args) throws InterruptedException {

		// step 1: connect browser
		// step 2: up casting
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		// step 3: open a url
		driver.get("https://www.redbus.in/");

		Thread.sleep(5000);
		// step 4: find the element in web page
		WebElement wb = driver.findElement(By.xpath("//h2[text()='Global Presence']"));

		// step 5: convert the WebDriver object into the JavascriptExecutor
		JavascriptExecutor js = (JavascriptExecutor) driver;

		// step 6: use executeScript() by passing arguments[0].scrollIntoView() method
		// and WebElement instance

		js.executeScript("arguments[0].scrollIntoView();", wb);

	}

}
================================================================================================
how to create border for element using JavascriptExecutor										VVVVVIMMMPPPPPPPPPP
		- find the element in web page
				WebElement wb = driver.findElement(By.id("id value"));

		- convert the WebDriver object into the JavascriptExecutor
				JavascriptExecutor js = (JavascriptExecutor)driver;

		- use executeScript() method by passing arguments[0].style.border='3px solid red' and WebElement instance
				js.executeScript("arguments[0].style.border='3px solid red';", wb);


Scenario:
		open a facebook register page https://www.facebook.com/reg
		find the first name text box
		create border for first name text box
		take the screenshot

Step 1: connect browser
step 2: up casting
			WebDriver driver =new ChromeDriver();

step 3: open a url
			driver.get("https://www.facebook.com/reg");

step 4: find the first name text  box
			WebElement wb = driver.findElement(By.name("firstname"));

step 5: convert the WebDriver object into the JavascriptExecutor
			JavascriptExecutor  js = (JavascriptExecutor)driver;

step 6: use executeScript() method by passing arguments[0].style.border='3px solid red' and WebElement instance
			js.executeScript("arguments[0].style.border='3px solid red';", wb);			

step 7: convert WebDriver object into the TakesScreenshot
			TakesScreenshot ts = (TakesScreenshot)driver;

step 8: use getScreenshotAs() by passing OutputType.FILE keyword
			File src = ts.getScreenshotAs(OutputType.FILE);

step 9: store the screenshot in destination location
			File dest = new File(System.getProperty("user.dir")+"\\ScreenshotFolder\\abc.png");

step 10: copy the screenshot from source to destination location using FileUtils class dot copyFile() method and by passing source and destination location
			
			FileUtils.copyFile(src, dest);


package JavascriptExecutorTutorial2;

import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo4 {

	public static void main(String[] args) throws InterruptedException, IOException {

		// step 1: connect browser
		// step 2: up casting
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		// step 3: open a url
		driver.get("https://www.facebook.com/reg");

		Thread.sleep(5000);
		// step 4: find the first name text box
		WebElement wb = driver.findElement(By.name("firstname"));

		// step 5: convert the WebDriver Object into the JavascriptExecutor
		JavascriptExecutor js = (JavascriptExecutor) driver;

		// step 6: use executeScript() method by passing arguments[0].style.border='3px
		// solid red' and WebElement instance
		js.executeScript("arguments[0].style.border='3px solid red';", wb);

		// step 7: convert the WebDriver Object into the TakesScreenshot
		TakesScreenshot ts = (TakesScreenshot) driver;

		// step 8: use getScreenshotAs() method and by passing OutputType.FILE
		File src = ts.getScreenshotAs(OutputType.FILE);

		// step 9: store screenshot in destination location
		File dest = new File(System.getProperty("user.dir") + "\\PassScreenshotFolder\\abc.png");

		// step 10: copy the file from source location to destination location
		FileUtils.copyFile(src, dest);

	}

}
================================================================================================
1) Scroll up and scroll down up to element																	VVVVIMMPPPPPPP
			js.executeScript("arguments[0].scrollIntoView();",wb);

2) border for element																						VVVVIMMPPPPPPP
			js.executeScript("arguments[0].style.border='3px solid red';", wb);

3) navigate back in browser history
			js.executeScript("history.go(-1);");

4) navigate forward in browser history
			js.executeScript("history.go(+1);");

5) refresh the browser
			js.executeScript("history.go(0);");


6) capture title
			String abc = js.executeScript("return document.title;").toString();


7) capture url
			String xyz = js.executeScript("return document.URL;").toString();


================================================================================================

package JavascriptExecutorTutorial2;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo3 {

	public static void main(String[] args) throws InterruptedException {

		// step 1: connect browser
		// step 2: up casting
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		// step 3: open a url
		driver.get("https://www.redbus.in/");

		Thread.sleep(5000);
		// step 4: find the element in web page
		WebElement wb = driver.findElement(By.xpath("//h2[text()='Global Presence']"));

		// step 5: convert the WebDriver object into the JavascriptExecutor
		JavascriptExecutor js = (JavascriptExecutor) driver;

		// step 6: use executeScript() by passing arguments[0].scrollIntoView() method
		// and WebElement instance
		// scroll down
		js.executeScript("arguments[0].scrollIntoView();", wb);

		Thread.sleep(7000);
		// step 4: find the element in web page and scroll up
		WebElement wb1 = driver.findElement(By.xpath("//div[text()='TRENDING OFFERS']"));
		js.executeScript("arguments[0].scrollIntoView();", wb1);
	}

}
























		


































































