Scenario:
		Automate the Login Page
		Automate Home Page
						- validate user on home page in Dashboard Page
						- title
						- url
						- logo
		Automate PIMPage Page,
						at the time of creating contact store contact test data in Excel sheet.
						 first name, last name, country, gender, blood group, Marital Status 
		by using BaseLayer package, Configuration Layer , Page Layer Package, Test Data Package, Utility Layer package (Excel Reader class) and Test Layer package

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Hybrid Framework Revision
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Scenario:
		Automate the Login Page
		Automate Home Page
		Automate Contact Page,
						at the time of creating contact store contact test data in Excel sheet.
		
		by using BaseLayer package, Configuration Layer , Page Layer Package, Test Data Package, Utility Layer package (Excel Reader class) and Test Layer package
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package BaseLayer;

import java.io.FileInputStream;
import java.time.Duration;
import java.util.Properties;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class BaseClass {
	protected static Properties prop;
	protected static WebDriver driver;

	public BaseClass() {
		// create object of Properties class
		prop = new Properties();
		// capture path
		String path = System.getProperty("user.dir") + "/src/main/java/ConfigurationLayer/config.properties";

		try {
			// read all file content by creating object of FileInputStream class
			FileInputStream fis = new FileInputStream(path);
			// load file in current class using load() method
			prop.load(fis);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void initialization() {
		// connect to actual browser
		// up casting
		driver = new ChromeDriver();
		// implicitly Wait
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		// page load time out
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));

		// maximize
		driver.manage().window().maximize();

		// delete all cookies
		driver.manage().deleteAllCookies();

		// capture URL from properties file

		String url = prop.getProperty("URL");

		// open a url
		driver.get(url);

	}

}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
URL =https://ui.cogmento.com/

USERNAME=prafulp1010@gmail.com

PASSWORD=Pr@ful0812 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

package PageLayer;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import BaseLayer.BaseClass;

public class LoginPage extends BaseClass {

	// create Object Repository using POM with Page Factory
	@FindBy(name = "email")
	private WebElement username;

	@FindBy(name = "password")
	private WebElement password;

	@FindBy(xpath = "//div[text()='Login']")
	private WebElement loginbutton;

	// Initialize the Object Repository using PageFactory.initElements() method
	public LoginPage() {
		PageFactory.initElements(driver, this);
	}

	// create non static associated method for each and every OR without entering
	// test data
	public void loginFunctionality(String Username, String Password) {
		username.sendKeys(Username);
		password.sendKeys(Password);
		loginbutton.click();
	}

}


package PageLayer;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import BaseLayer.BaseClass;

public class HomePage extends BaseClass {

	// Create OR using POM with Page Factory
	@FindBy(xpath = "//div[@class='header item']")
	private WebElement logo;

	// initialize the OR using PageFactory.initElements() method
	public HomePage() {
		PageFactory.initElements(driver, this);
	}

	// create associated method for each and every OR without entering test data
	public boolean checkLogoStatus() {
		return logo.isDisplayed();
	}
	
	public String getHomePageTitle()
	{
		return driver.getTitle();
	}
	
	public String getHomePageUrl()
	{
		return driver.getCurrentUrl();
	}
	
}

package PageLayer;

import java.util.List;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.FindBys;
import org.openqa.selenium.support.PageFactory;

import BaseLayer.BaseClass;

public class ContactPage extends BaseClass {
	// create OR with POM with Page Factory
	@FindBy(xpath = "//a[@href='/contacts']")
	private WebElement contactLink;

	@FindBy(xpath = "//a[@href='/contacts/new']")
	private WebElement createbutton;

	@FindBy(name = "first_name")
	private WebElement firstname;

	@FindBy(name = "last_name")
	private WebElement lastname;

	@FindBy(xpath = "//label[text()='Email']/following-sibling::div/descendant::input[@name='value']")
	private WebElement emailId;

	@FindBy(xpath = "//label[text()='Status']/following-sibling::div")
	private WebElement statusDropdown;

	@FindBys(@FindBy(xpath = "//div[@name='status']/child::span"))
	private List<WebElement> statusList;

	@FindBy(xpath = "//button[text()='Save']")
	private WebElement savebutton;

	// initialize the OR using PageFactory.initElements
	public ContactPage() {
		PageFactory.initElements(driver, this);
	}

	// create associated method for each and every OR without entering Test Dat

	public void createContact(String FirstName, String LastName, String EmailId, String ExpectedstatusValue)
			throws InterruptedException {
		Thread.sleep(2000);
		contactLink.click();
		Thread.sleep(2000);
		createbutton.click();

		firstname.sendKeys(FirstName);
		lastname.sendKeys(LastName);
		emailId.sendKeys(EmailId);
		Thread.sleep(2000);
		statusDropdown.click();
		Thread.sleep(2000);
		for (WebElement status : statusList) {
			String actualValue = status.getText();
			if (actualValue.equalsIgnoreCase(ExpectedstatusValue)) {
				status.click();
				break;
			}
		}
		Thread.sleep(2000);
		savebutton.click();
		Thread.sleep(2000);
	}

}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package UtilityLayer;

import java.io.FileInputStream;

import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelReader {
	private static XSSFWorkbook workbook;

	public ExcelReader(String ExcelPath) {
		try {
			// read all file content
			FileInputStream fis = new FileInputStream(ExcelPath);
			// load all sheets
			workbook = new XSSFWorkbook(fis);
		} catch (Exception e) {
			e.getLocalizedMessage();
		}
	}

	private int getTotalRowCount(int sheetindex) {
		return workbook.getSheetAt(sheetindex).getLastRowNum() + 1;
	}

	private int getTotalColumnCount(int sheetIndex) {
		return workbook.getSheetAt(sheetIndex).getRow(0).getLastCellNum();
	}

	private Object getSheetTestData(int sheetIndex, int rows, int cells) {
		String testData = workbook.getSheetAt(sheetIndex).getRow(rows).getCell(cells).getStringCellValue();
		return testData;
	}

	public Object[][] getAllSheetTestData(int sheetIndex) {
		int rows = getTotalRowCount(sheetIndex);
		int cells = getTotalColumnCount(sheetIndex);

		Object[][] data = new Object[rows][cells];

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cells; j++) {
				data[i][j] = getSheetTestData(sheetIndex, i, j);
			}
		}

		return data;

	}

}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
package TestLayer;

import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import BaseLayer.BaseClass;
import PageLayer.LoginPage;

public class LoginPageTest extends BaseClass {
	private static LoginPage loginpage;
	// pre condition

	@BeforeTest
	public void setUp() {
		BaseClass.initialization();
	}

	@Test
	public void validateLoginFunctionality() {
		// capture Username and password from Properties file
		String username = prop.getProperty("USERNAME");
		String password = prop.getProperty("PASSWORD");

		// create object of LoginPage class
		LoginPage loginpage = new LoginPage();
		loginpage.loginFunctionality(username, password);
	}

	@AfterTest
	public void tearDown() {
//		driver.quit();
	}
}


package TestLayer;

import org.testng.Assert;
import org.testng.annotations.Test;

import BaseLayer.BaseClass;
import PageLayer.HomePage;

public class HomePageTest extends BaseClass {
	private static HomePage homepage;

	@Test(priority = 1)
	public void validateLogo() {
		homepage = new HomePage();
		boolean actualLogoStatus = homepage.checkLogoStatus();
		Assert.assertTrue(actualLogoStatus);
	}
	
	@Test(priority = 2)
	public void validateHomePageTitle()
	{
		String actualTitle = homepage.getHomePageTitle();
		Assert.assertEquals(actualTitle, "Cogmento CRM");
	}
	
	@Test(priority = 3)
	public void validateHomePageUrl()
	{
		String actualUrl = homepage.getHomePageUrl();
		boolean actualResult = actualUrl.contains("ui.cogmento");
		Assert.assertTrue(actualResult);
	}
	
}

package TestLayer;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import BaseLayer.BaseClass;
import PageLayer.ContactPage;
import UtilityLayer.ExcelReader;

public class ContactPageTest extends BaseClass {
	private static ContactPage contactpage;

	@Test(dataProvider = "testdata")
	public void validateNewContact(String FirstName ,String LastName, String EmailId, String Status) throws InterruptedException {
		contactpage = new ContactPage();
		contactpage.createContact(FirstName, LastName, EmailId, Status);
	}

	@DataProvider(name = "testdata")
	public Object[][] getTestData() {
		String path = System.getProperty("user.dir") + "/src/main/java/TestDataLayer/Cogmento CRM Test Data.xlsx";
		ExcelReader excelreader = new ExcelReader(path);
		Object[][] data = excelreader.getAllSheetTestData(0);

		return data;
	}

}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test thread-count="5" name="Test">
		<classes>
			<class name="TestLayer.LoginPageTest" />
			<class name="TestLayer.HomePageTest" />
			<class name="TestLayer.ContactPageTest" />
		</classes>
	</test> <!--
	Test -->
</suite> <!--
Suite -->

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.cogmentocrmapp</groupId>
	<artifactId>CogmentoApplication</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>CogmentoApplication</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.9</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.9</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml-schemas</artifactId>
			<version>3.9</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-scratchpad</artifactId>
			<version>3.9</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>ooxml-schemas</artifactId>
			<version>1.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>openxml4j</artifactId>
			<version>1.0-beta</version>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>4.16.1</version>
		</dependency>

		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>7.4.0</version>
			<scope>test</scope>
		</dependency>
	</dependencies>


	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M5</version>
				<configuration>
					<suiteXmlFiles>
						<suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>

					</suiteXmlFiles>
				</configuration>
			</plugin>
		</plugins>
	</build>


</project>















