What are the different annotations in TestNG?									VVVVIMMMPPPPPPP
----------------------------------------------------------------------------------------------------------------------------------------------
	there are 3 types of annotations in TestNG.
	1) Precondition annotation
							i) @BeforeSuite
							ii) @BeforeTest
							iii) @BeforeClass
							iv) @BeforeMethod
	2) Test annotations
							i) @Test

	3) PostCondition annotation.
							i) @AfterMethod
							ii) @AfterClass
							iii) @AfterTest
							iv) @AfterSuite
----------------------------------------------------------------------------------------------------------------------------------------------
1) @BeforeMethod annotations
			-it is pre condition for each and every test cases in class.

syntax:
			@BeforeMethod
			public void abc()
			{
						//statement
			}


2) @AfterMethod annotations
			- it is post condition for each and every test cases in class.

syntax:
			@AfterMethod
			public void xyz()
			{
					//statement
			}
----------------------------------------------------------------------------------------------------------------------------------------------
Scenario 1:
			@BeforeMethod 
			Test Cases 1
			Test cases 2
			Test cases 3
			@AfterMethod



O/p
			@BeforeMethod 
			 test Cases 1
			@AfterMethod

			@BeforeMethod
			Test cases 2
			@AfterMethod

			@BeforeMethod
			Test cases  3
			@AfterMethod
----------------------------------------------------------------------------------------------------------------------------------------------
package Tutorial2;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class Sample1 {

	@BeforeMethod
	public void setUp() {
		System.out.println("Before Method");
	}

	@Test
	public void testCases1() {
		System.out.println("Test Cases 1");
	}

	@Test
	public void testCases2() {
		System.out.println("Test Cases 2");
	}

	@Test
	public void testCases3() {
		System.out.println("Test cases 3");
	}

	@AfterMethod
	public void tearDown() {
		System.out.println("After Method");
		System.out.println("-----------------------------");
	}

}
==========================================================================================
@BeforeClass
		- it is precondition for all the test cases in class


@AfterClass
		- it is postcondition for all the test cases in class.

syntax:
		@BeforeClass
		public void a1()
		{
					//statement
		}

		@AfterClass
		public void a2()
		{
				//statement
		}


Scenario 1"
		@BeforeClass
		Test Cases1
		Test Cases 2
		test Cases 3
		@AfterClass

o/p
		@BeforeClass
		Test Cases1
		Test Cases 2
		Test Cases 3
		@AfterClass

package Tutorial2;

import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class Sample2 {

	@BeforeClass
	public void a1() {
		System.out.println("BeforeClass");
	}

	@Test
	public void testCases1() {
		System.out.println("Test cases 1");
	}

	@Test
	public void testCases2() {
		System.out.println("Test cases 2");
	}

	@Test
	public void testCases3() {
		System.out.println("Test cases 3");
	}

	@AfterClass
	public void b2() {
		System.out.println("After Class");
	}
}
===========================================================
diff between @BeforeClass and @BeforeMethod			VVVVVIMMPPPPP
		
		@BeforeClass is precondition for all the test cases in class.
	
		@BeforeMethod is precondition for each and every test cases in class.

===========================================================
Scenario 3"
		@BeforeClass
		@BeforeMethod
		TestCase1
		TestCase2
		TestCase3
		@AfterMethod
		@AfterClass

o/p
		@BeforeClass

		@BeforeMethod
		Test Cases1
		@AfterMethod

		@BeforeMethod
		Test Cases 2
		@AfterMethod

		@BeforeMethod
		Test Cases 3
		@AfterMethod

		@AfterClass
-----------------------------------------------------------------------------------------
package Tutorial2;

import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class Sample3 {

	@BeforeClass
	public void a1() {
		System.out.println("Before Class");
	}

	@BeforeMethod
	public void b1() {
		System.out.println("Before Method");
	}

	@Test
	public void testCases1() {
		System.out.println("Test cases 1");
	}

	@Test
	public void testCases2() {
		System.out.println("Test cases 2");
	}

	@Test
	public void testCases3() {
		System.out.println("Test cases 3");
	}

	@AfterMethod
	public void b2() {
		System.out.println("After Method");
		System.out.println("-------------------");
	}

	@AfterClass
	public void a2() {
		System.out.println("After Class");
		System.out.println("===================================");
	}

}
=============================================================================
How to ignore test cases in TestNG?									VVVVVIMMMPPPPPPPPPPPPP
	there are 3 different ways we can ignore the test cases in TestNG
	1) by using @Ignore annotation
	2) by using enabled=false attribute
	3)  by grouping the test cases and inside the XML file use exclude tag name and by passing group name.


1) by using @Ignore annotation
		- use @Ignore annotation before test cases 
			
			@Ignore
			@Test
			public void testcase1()
			{
					//statement
			}
---------------------------------------------------------------------------------------------------------	
2) by using enabled=false attribute
		- we have to use enabled=false attribute  in @Test annotations
			
		@Test(enabled=false)
		public void testCase1()
		{
					//statement
		}


---------------------------------------------------------------------------------------------------------
Note:						
	if we mention invocationCount as zero or negative number then it will ignoring the test cases

---------------------------------------------------------------------------------------------------------
package Tutorial2;

import org.testng.annotations.Ignore;
import org.testng.annotations.Test;

public class Sample4 {

	@Test
	public void testCases1() {
		System.out.println("Test cases 1");
	}

	@Ignore
	@Test
	public void testCases2() {
		System.out.println("Test cases 2");
	}

	@Test
	public void testCases3() {
		System.out.println("Test cases 3");
	}

}

package Tutorial2;

import org.testng.annotations.Ignore;
import org.testng.annotations.Test;

public class Sample4 {

	@Test
	public void testCases1() {
		System.out.println("Test cases 1");
	}

	@Test
	public void testCases2() {
		System.out.println("Test cases 2");
	}

	@Test(enabled = false)
	public void testCases3() {
		System.out.println("Test cases 3");
	}

}

====================================================================================
package Tutorial2;

import java.time.Duration;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class Sample5 {
	WebDriver driver;

	@BeforeMethod
	public void setUp() {
		// connect browser
		System.setProperty("webdriver.chrome.driver",
				"C:\\Users\\praf0\\OneDrive\\Desktop\\Automation Testing 27th April 2024 Batch\\chromedriver.exe");
		// up casting
		driver = new ChromeDriver();
		// implicit wait
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		// maximize
		driver.manage().window().maximize();

	}

	@Test
	public void google() {
		// open a google application
		driver.get("https://www.google.com");
		// capture title
		System.out.println(driver.getTitle());
	}

	@Test
	public void facebook() {
		// open a facebook application
		driver.get("https://www.facebook.com");
		// capture title
		System.out.println(driver.getTitle());
	}

	@AfterMethod
	public void tearDown() throws InterruptedException {
		Thread.sleep(5000);
		// quit browser
		driver.quit();
	}

}
---------------------------------------------------------------------------------------------------------------------------------------------
package Tutorial2;

import java.time.Duration;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class Sample5 {
	WebDriver driver;

	@BeforeClass
	public void setUp() {
		// connect browser
		System.setProperty("webdriver.chrome.driver",
				"C:\\Users\\praf0\\OneDrive\\Desktop\\Automation Testing 27th April 2024 Batch\\chromedriver.exe");
		// up casting
		driver = new ChromeDriver();
		// implicit wait
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		// maximize
		driver.manage().window().maximize();

	}

	@Test
	public void google() throws InterruptedException {
		// open a google application
		driver.get("https://www.google.com");
		// capture title
		System.out.println(driver.getTitle());
		Thread.sleep(5000);
	}

	@Test
	public void facebook() throws InterruptedException {
		// open a facebook application
		driver.get("https://www.facebook.com");
		// capture title
		System.out.println(driver.getTitle());
		Thread.sleep(5000);
	}

	@AfterClass
	public void tearDown() throws InterruptedException {
		Thread.sleep(5000);
		// quit browser
		driver.quit();
	}

}

---------------------------------------------------------------------------------------------------------------------------------------------
@BeforeTest																		VVVVIMMMPPPPPPP
	- it is precondition for all the test cases in classes tags in xml file
	

@AfterTest
	- it is post condition for all the test cases in classes tags in xml file

syntax
		@BeforeTest
		public void a1()
		{
					//statement
		}

		@AfterTest
		public void a2()
		{
					//statement
		}
---------------------------------------------------------------------------------------------------------------------------------------------
what are the different tags in xml file									VVVVIMMMPPPPPPP
		
		<suite name="suite name or project name">
		<test name="regression test cases">
		<classes>
			<class name="packagename.classname1"> </class>
			<class name="packagename.classname2"> </class>
		</classes>
		</test>
		</suite>
---------------------------------------------------------------------------------------------------------------------------------------------

	<suite name="suite name or project name">
		<test name ="test cases name" 
			<classes>
					<class name ="packagename.classname"> </class>
			</classes>

		</test>
	</suite>
-------------------------------------------------------------------------------------------------------------------
Execute multiple classes using XML (Extensive Markup Language) File

Scenario
Tutorial2
	create sample7 class
					-- create the 2 test cases
				
	create sample8 class
					-- create 3 test cases

	create sample9 class
					-- create 4 test cases

	- run three classes 

<suite name="Orange HRM">
	<test name="test cases">
		<classes>
				<class name="Tutorial2.Sample7"> </class>
				<class name="Tutorial2.Sample9"> </class>
				<class name="Tutorial2.Sample8"> </class>
		</classes>
	</test>
<suite>
============================================================================
Sample7 class
		@BeforeTest
		s1 test cases
		s2 test cases
		@AfterTest

Pune7 class

		P1 test cases
		p2 test cases
		p3 test cases
		
------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test name="Test">
		<classes>
			<class name="Tutorial2.Pune7"> </class>
			<class name="Tutorial2.Sample7"></class>
		</classes>
	</test> <!--
	Test -->
</suite> <!--Suite -->
--------------------------------------------------------------------------------

o/p	
		@BeforeTest
		p1
		P2
		P3
		S1
		S2
		@AfterTest


package Tutorial2;

import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class Sample7 {

	@BeforeTest
	public void a1() {
		System.out.println("Before Test");
	}

	@Test
	public void s1() {
		System.out.println("S1 Test Cases");
	}

	@Test
	public void s2() {
		System.out.println("S2 Test Cases");
	}

	@AfterTest
	public void a2() {
		System.out.println("After Test");
	}
}


package Tutorial2;

import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class Pune7 {


	@Test
	public void p1() {
		System.out.println("p1 Test Cases");
	}

	@Test
	public void p2() {
		System.out.println("p2 Test Cases");
	}

	@Test
	public void p3() {
		System.out.println("p3 Test Cases");
	}
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test name="Test">
		<classes>
			<class name="Tutorial2.Pune7"> </class>
			<class name="Tutorial2.Sample7"></class>

		</classes>
	</test> <!--
	Test -->
</suite> <!--
Suite -->
=======================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test name="Test">
		<classes>
			<class name="Tutorial2.Pune7"> </class>
			<class name="Tutorial2.Sample7"></class>
			<class name="Tutorial2.Mumbai7"></class>
		</classes>
	</test> <!--
	Test -->
</suite> <!--
Suite -->


package Tutorial2;

import org.testng.annotations.Test;

public class Mumbai7 {
	@Test
	public void m1() {
		System.out.println("M1 Test Cases");
	}

	@Test
	public void m2() {
		System.out.println("M2 Test Cases");
	}

	@Test
	public void m3() {
		System.out.println("M3 Test Cases");
	}
}
==================================================================================

package Tutorial8;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class Sample8 {

	@BeforeMethod
	public void a1() {
		System.out.println("Before Method");
	}

	@Test
	public void s1() {
		System.out.println("S1 Test cases");
	}

	@Test
	public void s2() {
		System.out.println("S2 Test cases");
	}

	@AfterMethod
	public void a2() {
		System.out.println("After Method");
	}

}

package Tutorial8;

import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class Pune8 {

	@BeforeClass
	public void b1() {
		System.out.println("Before Class");
	}

	@Test
	public void p1() {
		System.out.println("P1 Test cases");
	}

	@Test
	public void p2() {
		System.out.println("P2 Test cases");
	}

	@AfterClass
	public void b2() {
		System.out.println("After class");
	}

}


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test thread-count="5" name="Test">
		<classes>
			<class name="Tutorial8.Pune8" />
			<class name="Tutorial8.Sample8" />
		</classes>
	</test> <!--
	Test -->
</suite> 

<!--
	@BeforeClass
	P1 test cases 
	P2 Tets cases
	@After Class

	@BeforeMethod
	s1 Test cases
	@AfterMethod
	
	@BeforeMethod
	S2 test cases
	@AfterMethod
 -->
=========================================================================
package Tutorial8;

import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class Mumbai8 {

	@BeforeTest
	public void c1() {
		System.out.println("Before test");
	}

	@Test
	public void m1() {
		System.out.println("M1 Test Cases");
	}

	@Test
	public void m2() {
		System.out.println("M2 Test Cases");
	}

	@AfterTest
	public void c2() {
		System.out.println("After test ");
	}

}


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test thread-count="5" name="Test">
		<classes>
			<class name="Tutorial8.Pune8" />
			<class name="Tutorial8.Sample8" />
			<class name="Tutorial8.Mumbai8" />
		</classes>
	</test> <!--
	Test -->
</suite> 

<!--
	@BeforeTest
	
	@BeforeClass
	P1
	P2
	AfterClass
	
	@BeforeMethod
	S1
	@AfterMethod
	
	@BeforeMethod
	s2 
	AfterMethod
	
	m1
	m2
	@AfterTest
	
 -->

====================================================================================================
diff between @BeforeClass and @BeforeTest											VVVVVIMMMPPPPPP

		@BeforeClass is precondition for all the test cases in class
		@BeforeTest is pre condition for all the test cases in classes tags in xml file


====================================================================================================

package Tutorial8;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class Sample2 {

	@BeforeMethod
	public void abc() {
		System.out.println("Before Method ABC		:::		1");
	}

	@BeforeMethod
	public void aaa() {
		System.out.println("Before Method AAA		:::		1");
	}

	@Test
	public void s1() {
		System.out.println("S1 Test cases			:::		3");
	}

	@AfterMethod
	public void bbb() {
		System.out.println("After Method BBB		:::		4");
	}

	@AfterMethod
	public void ccc() {
		System.out.println("After Method CCC		:::		5");
	}

}

package Tutorial8;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class Sample2 {

	@BeforeMethod
	public void aaa() {
		System.out.println("Before Method AAA		:::		1  & 6");
	}

	@BeforeMethod
	public void abc() {
		System.out.println("Before Method ABC		:::		2 & 7");
	}

	@Test
	public void s1() {
		System.out.println("S1 Test cases			:::		3");
	}

	@Test
	public void s2() {
		System.out.println("S2 Test cases			:::		8");
	}

	@AfterMethod
	public void bbb() {
		System.out.println("After Method BBB		:::		4 & 9");
	}

	@AfterMethod
	public void ccc() {
		System.out.println("After Method CCC		:::		5 & 10");
	}

}
-----------------------------------------------------------------------------------
package Tutorial8;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class Sample2 {

	@BeforeMethod
	public void aaa() {
		System.out.println("Before Method AAA		:::		1");
	}

	@BeforeMethod
	public void abc() {
		System.out.println("Before Method ABC		:::		2");
	}

	@Test
	public void s1() {
		System.out.println("S1 Test cases			:::		3");
	}



}
=====================================================================================
Orange HRM application
		@BeforeClass 
					- open a browser and url

		test Cases 1
					- login functionality

		test cases 2
					- click on pim link
					click on add employee button
					enter firstname, last name, and click on save button

		test cases 3
					- capture the employee id 					-------------> store employee id globally
					- Enter SSN Number
					- Select DOJ
					- select country 
					- select gender
					- click on save button

		test cases 4:
					- click on employee list
					- enter captured employee id
					- click on  search  button

		test cases 5:
					click on profile image
					click on logout
	

		@AfterMethod
					- takes screenshot code with date and time
	
		@AfterClass 
		quit the browser

==================================================================================
package Tutorial8;

import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class OrangeHRMTest {

	@BeforeClass
	public void setUp() {
		// Connect to actual browser
		// up casting ---> declare webdriver globally
		// implicit wait
		// maximize
		// open a url
	}

	@Test(priority = 1)
	public void loginFunctionality() {
		// find the username text and enter value
		// find the password text and enter value
		// find and click on login button
	}

	@Test(priority = 2)
	public void addNewEmployeeInPIMPage() {
		// find and click on PIM Link
		// find and click on add employee button
		// find and enter first name and lastname
		// find and click on save button
	}

	@Test(priority = 3)
	public void addMoreDetails() {
		// find and capture the employee id -------------> store employee id globally
		// find and select country
		// find and select gender
		// find and click on save button
	}

	@Test(priority = 4)
	public void searchEmployee() {
		// find and click on employee list
		// find and enter captured employee id
		// find and click on search button
	}

	@Test(priority = 5)
	public void logoutFunctionality() {
		// find and click on profile image
		// find and click on logout
	}

	@AfterMethod
	public void tearDown() {
		// convert WebDriver Object into TakesScreenshot
		// capture actual screenshot
		// create object of SimpleDateFormat class by passing date and time format
		// capture the current date and time in format
		// store screenshot in destination location
		// copy screenshot from source to destination location
	}

	@AfterClass
	public void abc() {
		// close the session
	}

}






























































































































































































		
	





	