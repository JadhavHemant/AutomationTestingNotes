How to run fail Test cases again and again?														VVVVVIMMMPPPPPPP
-------------------------------------------------------------------------------------------------------------------------------------------------------------
	there are 3 ways we can run failed test cases
	1) by using testng-failed.xml file
	2) by using IRetryAnalyzer interface
	3) by using IAnnotationTransformar interface

1) by using testng-failed.xml file
	- Go to test-output folder and then open a testng-failed.xml file and 
	then right click on xml file and run using TestNG Suite.
	

2) by using IRetryAnalyzer interface
	- we have to implements IRetryAnalyzer interface by using implements keyword.
	- we have to override the retry() method from IRetryAnalyzer interface.
	- there we define how many times we have to run failed test cases.

syntax
public class Sample1 implements IRetryAnalyzer
{
		int counter=0;//4
		int maxRetryCounter=4;
		public boolean retry(ITestResult result)
		{
				if(counter<maxRetryCounter)
				{
					counter++;
					return true;
				}
			return false;
		}

}

public class Demo1
{
		@Test(retryAnalyzer=Sample1.class)
		public void pqr()
		{
				Assert.assertEquals("Selenium", "Cucumber");
		}



}

package Tutorial2;

import org.testng.IRetryAnalyzer;
import org.testng.ITestResult;

public class Sample1 implements IRetryAnalyzer{
	
	int counter=0;//4
	int maxRetryCounter=4;
	
	
	@Override
	public boolean retry(ITestResult result) {
		
		if(counter<maxRetryCounter)
		{
			counter++;//4
			return true;
		}
		
		return false;
	}

	
	
}
package Tutorial2;

import org.testng.Assert;
import org.testng.annotations.Test;

public class Demo1 {

	@Test
	public void abc() {
		System.out.println("ABC Test Cases");
		Assert.assertEquals(12, 12);
	}

	@Test(retryAnalyzer=Sample1.class)
	public void pqr() {
		System.out.println("PQR Test Cases");//1 2 3 4 5
		Assert.assertEquals("selenium", "cucumber");
	}

	@Test
	public void xyz() {
		System.out.println("XYZ Test Cases");
		Assert.assertTrue(true);
	}

}
=================================================================
3) by using IAnnotationTransformar interface
		- we can run fail test cases again and again by implementing the IAnnotationTransformer interface using implements keyword.
		- from IAnnotationTransformer  interface we have to override the transform() method.
		- inside this method we have to use setRetryAnanlyzer method by passing IRetryAnalyzer implemented class name.

syntax:
		public class Pune2 implements IAnnotationTransformer
		{				
				public void transform(ITestAnnotation annotation, Class testClass, Constructor testConstructor, Method testMethod)
				{
								annotation.setRetryAnalyzer(Sample2.class);	
								
				}

		}

		public class Sample2 implements IRetryAnalyzer
		{
				int counter=0;
				int maxRetryCounter=4;
				
				public boolean retry(ITestResult result)
				{
							if(counter<maxRetryCounter)
							{
									counter++;
									return true;
							}
					return false;
				}

		}

XML
		<suite name="suite name or project name">
			<listeners>
						<listener class-name="Tutorial2.Pune2"/>
			</listeners>

			<test name="test case name">
					<classes>
							<class name="Tutorial2.Demo2"/>
					</classes>
			</test>
		</suite>

public class Demo2
{
			@Test
			public void abc()
			{
					Assert.assertEquals("selenium", "selenium");
			}
	
			@Test
			public void pqr()
			{
					Assert.assertEquals("12", "12");
			}

			@Test
			public void xyz()
			{
					Assert.assertEquals(123, 123);
			}
}
================================================================
package Tutorial2;

import org.testng.Assert;
import org.testng.annotations.Test;

public class Demo2 {

	@Test
	public void abc() {
		System.out.println("ABC Test Cases");
		Assert.assertEquals(12, 55555);
	}

	@Test
	public void pqr() {
		System.out.println("PQR Test Case");
		Assert.assertEquals("selenium", "cucumber");
	}

	@Test
	public void xyz() {
		System.out.println("XYZ Test Case");
		Assert.assertTrue(true);
	}

}


package Tutorial2;

import org.testng.IRetryAnalyzer;
import org.testng.ITestResult;

public class Sample2 implements IRetryAnalyzer{
	
	int counter=0;
	int maxCounter=4;
	
	@Override
	public boolean retry(ITestResult result) {
		
		if(counter<maxCounter)
		{
			counter++;
			return true;
		}
		
		return false;
	}

	
	
}

package Tutorial2;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

import org.testng.IAnnotationTransformer;
import org.testng.annotations.ITestAnnotation;

public class Pune2 implements IAnnotationTransformer {

	@Override
	public void transform(ITestAnnotation annotation, Class testClass, Constructor testConstructor, Method testMethod) {

		annotation.setRetryAnalyzer(Sample2.class);

	}

}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<listeners>
		<listener class-name="Tutorial2.Pune2"></listener>
	</listeners>
	
  <test name="Test">
    <classes>
      <class name="Tutorial2.Demo2"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->
==================================================================================
Implements IRetryAnalyzer interface

package Tutorial3;

public class Sample1 implements IRetryAnalyzer
{
		int counter=0;
		int maxCounter=10;

		@Override
		public boolean retry(ITestResult result)
		{
				if(counter<maxCounter)
				{
						counter++;
					return true;
				}
			
			return false;
		}

}

implements IAnnotationTransformer

public class Pune1 implements IAnnotationTransformer
{
		@Override
		public void transform(ITestAnnotation annotations, Class testClass, Constructor testConstructor, Method testMethod)
		{
					annotations.setRetryAnalzyer(Sample1.class);
		}
	

}

public class Demo1
{
			@Test
			public void a1()
			{
					Assert.assertEquals(12,12);
			}

}
XML
		<suite name="Suite name">
			<listeners>
						<listener class-name="Tutorial3.Pune1"/>
			</listeners>
			
			<test>
					<classes>
							<class name="Tutorial3.Demo1"/>
					</classes>
			</test>
		</suite>
===================================================================
package Tutorial3;

import org.testng.IRetryAnalyzer;
import org.testng.ITestResult;

public class Sample1 implements IRetryAnalyzer{
	
	int counter=0;
	int maxCounter=10;
	
	@Override
	public boolean retry(ITestResult result) 
	{
		if(counter<maxCounter)
		{
			counter++;
			return true;
		}
		
		return false;
	}

	
	
}

package Tutorial3;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

import org.testng.IAnnotationTransformer;
import org.testng.annotations.ITestAnnotation;

public class Pune1 implements IAnnotationTransformer{

	@Override
	public void transform(ITestAnnotation annotation, Class testClass, Constructor testConstructor, Method testMethod) {
		
		annotation.setRetryAnalyzer(Sample1.class);
	}

	
	
}

package Tutorial3;

import org.testng.Assert;
import org.testng.annotations.Test;

public class Demo1 {

	@Test
	public void abc() {
		System.out.println("ABC Test Cases");
		Assert.assertEquals(12, 12);
	}

	@Test
	public void pqr() {
		System.out.println("PQR Test Cases");
		Assert.assertEquals("selenium", "cucumber");
	}

	@Test
	public void xyz() {
		System.out.println("XYZ Test Cases");
		Assert.assertFalse(false);
		Assert.assertTrue(true);
	}

}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<listeners>
		<listener class-name="Tutorial3.Pune1"/>
	</listeners>

	<test name="Test">
		<classes>
			<class name="Tutorial3.Demo1" />
			<class name="Tutorial3.Demo2"/>
		</classes>
	</test> <!--
	Test -->
</suite> <!--
Suite -->

package Tutorial3;

import org.testng.Assert;
import org.testng.annotations.Test;

public class Demo2 {
	
	@Test(priority = 1)
	public void login()
	{
		System.out.println("Login Test cases");
		Assert.assertEquals("login", "login");
	}
	
	@Test(priority = 2)
	public void verifyTitle()
	{
		System.out.println("verify Title Test cases");
		Assert.assertEquals("hometitle", "URL");
	}
	
	@Test(priority = 3)
	public void verifyLogo()
	{
		System.out.println("verify Logo Test cases");
		Assert.assertEquals("logo", "logo");
	}
	

}
=======================================================================================
Read the test data from Excel sheet

Step 1: check file is present or not in desktop location or project location.

			we have to create object of File class by passing file location.
					File f =new File("file location");

			use exist() method to verify the file is present or not
					boolean a = f.exist();
					System.out.println(a);

step 2: we read the file content by using FileInputStream class.
			we have to create object of FileInputStream class by passing File instance
					
				FileInputStream fis = new FileInputStream(f);


Step 3: we have 2 different types of excel sheet
				I) .xlsx excel sheet
				ii) .xls excel sheet.

		if excel sheet is .xlsx excel sheet then we have to create object of XSSFWorkbook by passing FileInputStream instance
		XSSFWorkbook is used to load all the excel sheet.
					XSSFWorkbook workbook =new XSSFWorkbook(fis);

		if excel sheet is .xls excel sheet then we have to create object of HSSFWorkbook by passing FileInputStream instance

					HSSFWorkkbook workbook =new HSSFWorkkbook(fis);


step 4: focus on specific sheet using getSheetAt() method by passing sheet index.
	
			XSSFSheet sheet = 	workbook.getSheetAt(1);
						return type of getSheetAt() method is XSSFSheet


step 5:capture the values
			
		String a = sheet.getRow(9).getCell(1).getStringCellValue();
================================================================================


step 1: check file is present or not
					File f =new File("file location");
					boolean a = f.exist();
		
step 2: read the file  content
					FileInputStream fis =new FileInputStream(f);
	
step 3: load all the work sheet .xlsx
					
					XSSFWorkbook workbook =new XSSFWorkbook(fis);
		
step 4;focus on specific work sheet
					XSSFSheet sheet = workbook.getSheetAt(0);

step 5: capture the values

					String b = sheet.getRow(4).getCell(2).getStringCellValue();

--------------------------------------------
Note:
		if u want to read the test data from excel sheet then we have to add apache POI dependency in pom.xml file
--------------------------------------------
package Tutorial4;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class Demo1 {

	public static void main(String[] args) throws IOException {
		//step 1: check the file is present or not
		//create object of File class by passing file location
		File f =new File("C:\\Users\\praf0\\OneDrive\\Desktop\\TestData.xlsx");
		
		boolean a= f.exists();
		System.out.println(a);
		
		//step 2: read the file content
		//create object of FileInputStream by passing file instance
		FileInputStream fis =new FileInputStream(f);
		
		//step 3: load all work sheets
		//create object of XSSFWorkbook by passing FileInputStream instance
		XSSFWorkbook workbook =new XSSFWorkbook(fis);
		
		//step 4: focus on specific sheet by using getSheetAt() method 
		XSSFSheet sheet = workbook.getSheetAt(0);

		String b = sheet.getRow(8).getCell(4).getStringCellValue();
		System.out.println(b);
	}

}




package Tutorial4;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo2 {

	public static void main(String[] args) throws IOException {
		File f =new File("C:\\Users\\praf0\\OneDrive\\Desktop\\TestData.xlsx");
		System.out.println(f.exists());
		FileInputStream fis =new FileInputStream(f);
		XSSFWorkbook workbook =new XSSFWorkbook(fis);
		XSSFSheet sheet = workbook.getSheetAt(2);
		String b = sheet.getRow(0).getCell(0).getStringCellValue();
		
		WebDriver driver =new ChromeDriver();
		driver.get(b);
		
		String c = sheet.getRow(1).getCell(0).getStringCellValue();
		
		WebElement fnamewb = driver.findElement(By.name("firstName"));
		fnamewb.sendKeys(c);
		
		String d = sheet.getRow(3).getCell(0).getRawValue();
		System.out.println(d);
		
		WebElement phoneWb = driver.findElement(By.name("phone"));
		phoneWb.sendKeys(d);
	}

}
=====================================================================
https://demo.guru99.com/test/newtours/register.php
	--> store test data in excel sheet


https://www.facebook.com/reg
	--> store firstname, lastname , username, password, date , month , year , gender




























































