What is synchronization?
			or
diff between implicitlyWait and explicit wait?
			or
diff between explicit wait and fluent wait
			or
which type of wait we use to handle the exception in selenium webdriver?
--------------------------------------------------------------------------------------------------------------------------------------
What is synchronization?
		- it is process of matching the speed of application under test and test tool in order to get proper execution flow then we use synchronization.

why we need synchronization?
		- During the test execution selenium tool give one by one instruction with same speed, but application under test takes less time for some elements and takes more time for some elements, in order to keep then in synchronize then we use synchronization concept.

there are 2 main types of synchronization
		1) unconditional synchronization
		2) conditional synchronization
---------------------------------------------------------------------------------------------------------------------------------------------------
1) unconditional synchronization
		- in unconditional synchronization we specify the time out values in milliseconds, we will make selenium tool to wait certain amount of time then processed to next step.
		syntax:
					Thread.sleep(10000);

		- once we use Thread dot sleep() method by passing time in milliseconds as 10 seconds then it will wait for 10 seconds and once the 
		10 seconds is completed then it will start executing the remaining lines of code.
		-Thread dot sleep() method we define 10 seconds as wait then compulsory it will wait for 10 seconds , once it over then it start executing the remaining lines 		of code that 	is reason we call unconditional synchronization is an static wait.
---------------------------------------------------------------------------------------------------------------------------------------------------
2) conditional synchronization
	- conditional synchronization it apply only for """"findElement() and findElements() method.""""
	- conditional synchronization does not apply for the all commands in application or method in selenium webdriver.
	- there are 3 types of conditional synchronization
		i) implicitly wait
		ii) explicit wait
		iii) fluent wait.
---------------------------------------------------------------------------------------------------------------------------------------------------
i) implicitly wait																			VVVVVIMMMPPPPPPPPPPPPPPPPPP
	-  implicitly wait is called as global wait.
	- implicitly wait is also called as dynamic wait.
	- once we define the implicitly wait then it is applicable for all elements in web page.
	- implicitly wait is applicable only for findElement() and findElements() method.
	Scenario 1:
		- if we define implicitly wait in program as 30 seconds, and if element found within the 2 seconds then it will ignore the remaining all seconds.
	Scenario 2:
		- if we define the implicitly wait in program as 30 seconds and if element is not found within the mentioned time then it throws NoSuchElementException.
	- default time for implicit wait is zero.
	-  default searching time for elements in 500 milliseconds.
	- define the implicitly wait syntax 
	syntax:
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));

		- manage() method present inside the WebDriver interface and return type is Options interface.
		- timeouts() method present inside the Options interface and return type is Timeouts interface.
		- implicitlyWait() method is present inside the Timeouts interface and return type is Timeouts interface.

package Tutorial14;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo1 {

	public static void main(String[] args) throws InterruptedException {

		WebDriver driver = new ChromeDriver();
		driver.get("https://demo.guru99.com/test/newtours/register.php");
		
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30)));
		
		WebElement wb1 = driver.findElement(By.name("firstName"));//30
		wb1.sendKeys("Amruta");

		WebElement wb2 = driver.findElement(By.name("lastName13434444"));//30
		wb2.sendKeys("Patil");

		WebElement wb3 = driver.findElement(By.name("phone"));//30 
		wb3.sendKeys("90909090");

		WebElement wb4 = driver.findElement(By.name("userName"));//30
		wb4.sendKeys("amruta@gmail.com");
		
		Thread.sleep(5000);
		
		driver.quit();

	}

}
---------------------------------------------------------------------------------------------------------------------------------------------------
2) Explicit wait													VVVVVIMMMPPPPPPPPPPPPPPPPPP

	- Explicit wait is applicable for """"single element in web page."""
	- Explicit wait is also called as local wait.
	- Explicit wait is also called as dynamic wait.
	- Explicit wait is applicable only for findElement() and findElements() method.
	Scenario 1:
		- if we define the Explicit wait as 30 seconds and if element is found within the 3  seconds then it will ignore remaining all seconds.
	Scenario 2:
		- if we define the explicit wait as 30 seconds and if element is not found within the mention time then it will throws the TimeoutsException.
	- how to define the explicit wait.

	Step 1: we have to create Object of WebDriverWait class by passing WebDriver instance and time in seconds.
				WebDriverWait wait = new WebDriverWait(Duration.ofSeconds(30));

	step 2: we mention ExpectedConditions by using until() method
				
				WebElement wb = wait.until(ExpectedConditions.visibilityOfElementLocated(By.name("name value")));
			
				return type of until() method is WebElement interface.

	step 3: use WebElement instance to perform operation.
				
				wb.sendKeys("Patil");

-------------------------------------------------------------------------------------------
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));

		WebElement wb = wait.until(ExpectedConditions.visibilityOfElementLocated(By.name("name value")));
	
		wb.sendKeys("selenium");

-------------------------------------------------------------------------------------------     
		
package Tutorial14;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Demo2 {

	public static void main(String[] args) {
		WebDriver driver = new ChromeDriver();
		driver.get("https://demo.guru99.com/test/newtours/register.php");

		WebElement wb1 = driver.findElement(By.name("firstName"));
		wb1.sendKeys("Amruta");

		// Explicit wait
		// create Object of WebDriverWait by passing WebDriver instance and time in
		// seconds.
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofMinutes(2));

		// use until() method from WebDriverWait class by passing ExpectedConditions as
		// visibilityOfElementLocated
		WebElement wb2 = wait.until(ExpectedConditions.visibilityOfElementLocated(By.name("lastName")));

		// perform the operation
		wb2.sendKeys("Patil");

		WebElement wb3 = driver.findElement(By.name("phone"));
		wb3.sendKeys("90909090");

		WebElement wb4 = driver.findElement(By.name("userName"));
		wb4.sendKeys("amruta@gmail.com");

	}

}
=========================================================================================
can we use implicitlyWait and explicit wait in same in class.
		yes

we can apply same implicitlyWait and explicit wait for same web elements then which one wait it will apply for elements.
	- yes, but it will apply maximize time duration for elements as per the wait.

package Tutorial14;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Demo2 {

	public static void main(String[] args) {
		WebDriver driver = new ChromeDriver();
		driver.get("https://demo.guru99.com/test/newtours/register.php");

		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));

		WebElement wb1 = driver.findElement(By.name("firstName"));
		wb1.sendKeys("Amruta");

		// Explicit wait
		// create Object of WebDriverWait by passing WebDriver instance and time in
		// seconds.
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(45));

		// use until() method from WebDriverWait class by passing ExpectedConditions as
		// visibilityOfElementLocated
		WebElement wb2 = wait.until(ExpectedConditions.visibilityOfElementLocated(By.name("lastName")));

		// perform the operation
		wb2.sendKeys("Patil");

		WebElement wb3 = driver.findElement(By.name("phone"));
		wb3.sendKeys("90909090");

		WebElement wb4 = driver.findElement(By.name("userName"));
		wb4.sendKeys("amruta@gmail.com");

	}

}
===========================================================================================
diff between implicitlyWait and explicit wait									VVVVIMPPPPPPPPPP

		- implicitlyWait is called global wait
		- explicit wait is called as local wait.

		- implicitlyWait it applicable for all element in web page 
		- Explicit wait is applicable for single element in web page.

		- in implicitlyWait if element is not found then it throws NoSuchElementException.
		- in Explicit wait if element it not found then it throws TimeoutsException.

		- both wait are called as dynamic wait because if element is found within few seconds then it ignore remaining times,

		- both wait it  applicable only of findElement() and findElements() method.

		- in both wait we can mentions time in sec, ms, min, hrs, and days.
	
		- in implicitlyWait we never  mention Expected Conditions.
		- in Explicit wait compulsory we have to mention ExpectedConditions.
	
		- to define the implicitlyWait we use implicitlyWait()   method from Timeouts interface.
		- to define the Explicit wait we have to create object of WebDriverWait by passing WebDriver instance and time in seconds then we mention ExpectedConditions using until() method.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
implicit wait
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));

Explicit wait
			WebDriverWait wait =new WebDriverWait(driver,Duration.ofSeconds(45));
			WebElement wb = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("id value"));

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) FluentWait
		- FluentWait is applicable for single element in web page.
		- FluentWait is also called as local wait.,
		- FluentWait is also called as dynamic wait.
		- FluentWait is used to change the element searching time.
		- FluentWait is used to handle the Exception

scenario 1:
		-if define FluentWait as 30 seconds and if element found within the 2 seconds then it ignore remaining all seconds.
Scenario 2:
		-if define FluentWait as 30 seconds and if element is not found within the mentioned seconds then it will throws TimeoutsException.
	
		- how to define the FluentWait.

		step 1: 
				we have to create Object of FluentWait class by passing WebDriver instance and by using WebDriver generic and by calling withTimeout() and passing  					duration in withTimeout() method and then pollingEvery() method and passing duration in seconds, and then by calling ignoring() method and by passing 					Exception name in ignoring method.

						FluentWait<WebDriver> wait =new FluentWait<WebDriver(driver)
											.withTimeout(Duration.ofSeconds(30))
											.pollingEvery(Duration.ofSeconds(1))
											.ignoring(Exception.class);
		 
				- withTimeout() method is used to mention timeout in FluentWait
				- pollingEvery()method used to change the element searching time.
				ignoring() method is used to ignore the exceptions.

		step 2: use until() method by passing new Function of generic as Webdriver and WebElement and by using apply() method by  passing WebDriver parameters in 						apply method and by finding the elements in apply() method.

			
					WebElement wb = wait.until(new Function<WebDriver, WebElement>() {
										public WebElement apply(WebDriver driver)
										{
											return driver.findElement(By.id("id value"));
										}
						}
					);


		step 3: perform operation on web elements
					wb.sendKeys("Patil");

package Tutorial14;

import java.time.Duration;
import java.util.function.Function;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.FluentWait;

public class Demo3 {

	public static void main(String[] args) {
		WebDriver driver = new ChromeDriver();
		driver.get("https://demo.guru99.com/test/newtours/register.php");

		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));

		WebElement wb1 = driver.findElement(By.name("firstName"));
		wb1.sendKeys("Amruta");

		// we have to create Object of FluentWait class by passing WebDriver instance
		// and using WebDriver generic, and by calling withTimeout() method and by
		// passing time duration in withTimeout() method
		// and by calling pollingEvery() method ad by passing duration in seconds in
		// pollingEvery() method
		// and calling ignoring() method and passing Exception name.

		FluentWait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(Duration.ofSeconds(30))		
				.pollingEvery(Duration.ofSeconds(5))
				.ignoring(Exception.class);

		// use until() method by passing the new Function() and generic as WebDriver and
		// WebElement and then use apply() method by passing WebDriver arguments and
		// inside the apply method find the web elements

		WebElement wb2 = wait.until(new Function<WebDriver, WebElement>() {
			public WebElement apply(WebDriver driver) {
				return driver.findElement(By.name("lastName9887777"));
			}
		}
		);
		
		
		wb2.sendKeys("Patil");
		
		

	}

}
===========================================================================================
implicit Wait
			driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30);

Explicit Wait
			WebDriverWait wait =new WebDriverWait(driver,Duration.ofSeconds(45));

			WebElement wb = wait.until(ExpectedConditions.visibilityOfElementLocated(By.name("name value")));
						

Fluent Wait
	
			FluentWait<WebDriver> wait = new FluentWait<WebDriver>(driver)
											.withTimeout(Duration.ofSeconds(45))
											.pollingEvery(Duration.ofSeconds(1))
											.ignoring(Exception.class);


			wait.until(new Function<WebDriver, WebElement>() 
						{
									public WebElement apply(WebDriver driver)
									{
										return driver.findElement(By.id("id value"));
									}
						}
				);
===========================================================================================
which wait we use to handle the Exception							VVVVVVVVVVVVVVIMMPP
		we use FluentWait to handle the Exception.


























































































































