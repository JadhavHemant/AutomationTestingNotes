API Automation
=======================================================================================
diff between Serialization and deserialization?											VVVVVVVIMMMPPPPPPPPPPPPPP

	Serialization
				- Serialization means converting java object into the JSON of String object.
							or
				- Serialization converting java object into byte stream.

				- we achieve Serialization using ObjectMapper class.
				- ObjectMapper class present inside the Jackson-Databind library.
			
	deserialization
				- deserialization means converting JSON byte stream into the Java Object.
									or
				- deserialization means converting byte stream into java Object.

				- we achieve the deserialization using ObjectMapper class.
				- ObjectMapper class present inside the Jackson-Databind library.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
POST Request Using Serialization and deserialization

Swagger Documentation
			BaseURI					http://localhost:3000/employees
			Request Type:				POST Request
			Request Header			Content-Type		application/json
			Request Body
										{
											"firstName" : "{string}",
											"lastName" : "{string}",
											"address" : "{string}",
											"mobileNumber" : {long},
											"gender" : "{string}",
										}
		Verification
					status code
					status line
					response time
					response size
					response body
					response headers
					response cookies


step 1: Create POJO classes as per the Entity variables.

@JsonInclude(JsonInclude.Include.NON_NULL)
public class Employee
{
		private String firstName;
		private String lastName;
		private String address;
		
		@JsonInclude(JsonInclude.Include.NON_DEFAULT)
		private long mobileNumber;
		private String gender;

		//getter and setter methods
		//right click on class -- go to source --- click on getter and setter method and click on select all checkbox and click on generate.

}


step 2: Store Entity Test Data in Json File
			- we create employee.json file in src/test/resources package

{
		"createEmployee"  : 
								{
									"firstName" : "amol",
									"lastName" : "Patil",
									"address" : "Delhi",
									"mobileNumber" : 909090,
									"gender" : "male"
								}
}


step 3: Convert the Entity Test Data (JSON File Test Data) into POJO classes means deserialize the Object.
			ObjectMapper mapper =new ObjectMapper();
				
			FileReader file =new FileReader("json file location");
				
			JsonNode jsonNode  = mapper.readTree(file);	//it used to read the JSON tree Structure.

			Employee emp = mapper.treeToValue(jsonNode.get(createEmployee), Employee.class);	///read value from json tree structure and convert to POJO classes.
			

step 4: convert POJO classes into JSON of String means serialize the Object

		String postRequestBody = mapper.writeValueAsString(emp);


====================================================================
step 1: POJO classes is created
Step 2: JSON file is created
Step 3: convert JSON file test data into the POJO classes
			
		ObjectMapper mapper =new ObjectMapper();

		FileReader file =new FileReader("json file path");

		JsonNode jsonNode = mapper.readTree(file);

		Employee emp = mapper.treeToValue(jsonNode.get("createEmployee"), Employee.class);

step 4: convert POJO class object into JSON of String
		
		String requestbody = mapper.writeValueAsString(emp);

=====================================================================================
POST Request Using Serialization and deserialization

step 1:Create Employee POJO class

@JsonInclude(JsonInclude.Include.NON_NULL)
public class Employee
{
		private String firstName;
		
		private String lastName;

		private String address;
		
		
		@JsonInclude(JsonInclude.Include.NON_DEFAULT)
		private long mobileNumber;

		private String gender;
	
		//getter and setter for all Entity variables
}

step 2: create JSON file in src/test/resource package and maintain the test data as per the Entity.
		employee.json
{
		"createEmployee" : 		
							{
								"firstName" : "amol",
								"lastName" : "Patil",
								"address" : "Delhi",
								"mobileNumber" : 909090,
								"gender" :"male"
							}

}

step 3: configure BaseURI in rest Assured
			RestAssured.baseURI="http://localhost:3000/employees";

step 4: get the Request Specification Interface Object
		
			RequestSpecification httpRequest = RestAssured.given();

step 5: add request header
			httpRequest.header("Content-Type", "application/json");


step 6: create Request body  using serialization and deserialization concept.

		ObjectMapper mapper =new ObjectMapper();

		FileReader file =new FileReader("json file Path location");

		JsonNode jsonNode = mapper.readTree(file);

		Employee emp = mapper.treeToValue(jsonNode.get("CreateEmployee"), Employee.class);

		String postRequestBody = mapper.writeValueAsString(emp);

		
step 7: add request body
		httpRequest.body(postRequestBody);
		

step 8: select the HTTP POST Request

		Response response = httpRequest.post();

step 9: capture status code
		int a = response.statusCode();

step 10: capture status line
		String b = response.statusLine();

step 11: capture response time
		long  c= response.time();

step 12: capture response body
		String d = response.body().asString();

step 13: capture response header

		Headers allHeader = response.headers();


===========================================================================================
package Tutorial8;

import com.fasterxml.jackson.annotation.JsonInclude;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class Employee {

	private String firstName;

	private String lastName;

	private String address;

	@JsonInclude(JsonInclude.Include.NON_DEFAULT)
	private long mobileNumber;

	private String gender;

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public long getMobileNumber() {
		return mobileNumber;
	}

	public void setMobileNumber(long mobileNumber) {
		this.mobileNumber = mobileNumber;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

}


{
	"createEmployee": 
	{
		"firstName": "Shubhagi",
		"lastName": "Kale",
		"address": "Mumbai",
		"mobileNumber": 888888,
		"gender": "female"
	},
	"updateEmployee": 
	{
		"firstName": "Aboli",
		"lastName": "Shinde",
		"address": "Pune",
		"mobileNumber": 777777777,
		"gender": "female"
	},
	"updatePartialEmployee": 
	{
		"address": "UK"
	}
}

package Tutorial8;

import java.io.FileReader;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.restassured.RestAssured;
import io.restassured.http.Header;
import io.restassured.http.Headers;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class Demo1 {

	public static void main(String[] args) throws Exception {
		// step 1: Configure Base URI
		RestAssured.baseURI = "http://localhost:3000/employees";

		// step 2: get the RequestSpecification interface object
		RequestSpecification httpRequest = RestAssured.given();

		//step 3: add Request Header
		httpRequest.header("Content-Type","application/json");
		
		//step 4: Create Request body using Serialization and deserialization
		ObjectMapper mapper =new ObjectMapper();
		
		FileReader file =new FileReader(System.getProperty("user.dir")+"//src//test//resources//Employee.json");
		
		JsonNode jsonNode = mapper.readTree(file);	
		
		Employee emp = mapper.treeToValue(jsonNode.get("createEmployee"), Employee.class);
		
		String postRequestBody = mapper.writeValueAsString(emp);
		
		
		//step 5: add request body
		httpRequest.body(postRequestBody);
		
		//step 6: select the HTTP Post Request
		Response response = httpRequest.post();
		
		//step 7: capture status code
		int a  = response.statusCode();
		System.out.println(a);
		
		//step 8: capture status line
		String b = response.statusLine();
		System.out.println(b);
		
		//step 9: capture response time
		long c = response.time();
		
		//step 10: capture response  body
		String d = response.body().asString();
		System.out.println(d);
		
		//step 11: capture headers
		Headers allHeader = response.headers();
		
		for(Header abc: allHeader)
		{
			System.out.println(abc.getName() + "  :: "+abc.getValue());
		}
		

		
	}

}

==========================================================================================

package Tutorial9;

import java.io.File;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class Demo1 {

	public static void main(String[] args) throws Exception {
		RestAssured.baseURI = "http://localhost:3000/employees";
		RequestSpecification httpRequest = RestAssured.given();
		httpRequest.header("Content-Type", "application/json");

		// create object of ObjectMapper class
		ObjectMapper mapper = new ObjectMapper();

		// create object of File class by passing file location
		File file = new File(System.getProperty("user.dir") + "//src//test/resources//Emp.json");

		// read json file tree structure by passing json file name
		JsonNode jsonNode = mapper.readTree(file);

		// read all value from tree and set to the POJO classes
		Employee emp = mapper.treeToValue(jsonNode.get("createEmployee"), Employee.class);

		// convert POJO class object into JSON of String of object
		String requestBodyTestData = mapper.writeValueAsString(emp);

		httpRequest.body(requestBodyTestData);

		Response response = httpRequest.post();
		
		System.out.println(response.statusCode());
		System.out.println(response.statusLine());
		System.out.println(response.time());
		System.out.println(response.body().asString());
	}

}

=============================================================================================================
package Tutorial9;

import com.fasterxml.jackson.annotation.JsonInclude;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class Employee {

	private String firstName;

	private String lastName;

	private String address;

	@JsonInclude(JsonInclude.Include.NON_DEFAULT)
	private long mobileNumber;

	private String gender;

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public long getMobileNumber() {
		return mobileNumber;
	}

	public void setMobileNumber(long mobileNumber) {
		this.mobileNumber = mobileNumber;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

}


Emp.json
{
	"firstName": "Sneha",
	"lastName": "More",
	"address": "Pune",
	"mobileNumber": 99999,
	"gender": "female"
}


package Tutorial9;

import java.io.File;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class Demo1 {

	public static void main(String[] args) throws Exception {
		RestAssured.baseURI = "http://localhost:3000/employees";
		RequestSpecification httpRequest = RestAssured.given();
		httpRequest.header("Content-Type", "application/json");

		// create object of ObjectMapper class
		ObjectMapper mapper = new ObjectMapper();

		// create object of File class by passing file location
		File file = new File(System.getProperty("user.dir") + "//src//test/resources//Emp.json");

		// read all value from json file and set to the POJO classes
		Employee emp = mapper.readValue(file, Employee.class);

		// convert POJO class object into JSON of String of object
		String requestBodyTestData = mapper.writeValueAsString(emp);

		httpRequest.body(requestBodyTestData);

		Response response = httpRequest.post();
		
		System.out.println(response.statusCode());
		System.out.println(response.statusLine());
		System.out.println(response.time());
		System.out.println(response.body().asString());
	}

}

==============================================================================================================
{
	"firstName": "Sneha",
	"lastName": "More",
	"address": "Pune",
	"mobileNumber": 99999,
	"gender": "female"	
	
	//deserialization without JsonNode Structure
	
	//ObjectMapper mapper = new ObjectMapper();
	//File f =new File("json file path"l)
	//Employee emp = mapper.readValue(f, POJOClassName)

}
//--------------------------------------------------------------------------------
{
	"createEmployee"
	{
		"firstName": "Sneha",
		"lastName": "More",
		"address": "Pune",
		"mobileNumber": 99999,
		"gender": "female"		
		
		//deserialization with JsonNode Structure
		
		//ObjectMapper mapper = new ObjectMapper();
		//File f =new File("json file path");
		//JsonNode jsonNode = mapper.readTree(f);
		//Employee emp = mapper.treeToValue(jsonNode.get(jsonNodeName), POJOclassname);

	}
}
====================================================================



RestAssured.baseURI=

1) given()
2) header("","");
3) put()
4) post()
5) get()
6) delete()
7) patch()
8_ statusCode()
9) statusLine()
10) time()

11) body() from RequestSpecification interface
						add request body to HTTP Request

12) body() from Response interface
						capture response body from server

13) headers();
14) writeValueAsString()

15) readValue()

16) readTree()

17) treeToValue() method

18) ObjectMapper
19) RequestSpecification
20) Response 




























































































	











































