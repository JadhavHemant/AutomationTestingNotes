Customer API End to End All API flows
---------------------------------------------------------------------------------------------------------------------------------------------------
POST Request
			BaseURI			http://localhost:4000/customers
			Request Type		POST
			Request Header		Content-Type	application/json
			Request Body
								{
								      "cust_fName": "{string}",
								      "cust_lName": "{string}",
								      "cust_billingAddress": "{string}",
								      "product_Name": "{string}",
								      "product_price": {long},
								      "product_Discount": {int}
								      "product_info": "{string}"
								}
---------------------------------------------------------------------------------------------------------------------------------------------------
GET Request
		Base URI			http://localhost:4000/customers/1
		Request Type		GET
---------------------------------------------------------------------------------------------------------------------------------------------------
PUT Request
		Base URI			http://localhost:4000/customers/1
		Request Type		PUT
		Request Header		contentType(ContentType.JSON)
		Request body
								{
								      "cust_fName": "{string}",
								      "cust_lName": "{string}",
								      "cust_billingAddress": "{string}",
								      "product_Name": "{string}",
								      "product_price": {long},
								      "product_Discount": {int}
								      "product_info": "{string}"
								}
---------------------------------------------------------------------------------------------------------------------------------------------------
GET Request
		Base URI			http://localhost:4000/customers/1
		Request Type		GET
---------------------------------------------------------------------------------------------------------------------------------------------------
PATCH Request 
		BaseURI			http://localhost:4000/customers/1
		Request Type		PATCH
		Request Header		contentType(ContentType.JSON)
		Request Body
								{
								      "cust_fName": "{string}",
								      "cust_lName": "{string}",
								      "cust_billingAddress": "{string}",
								      "product_Name": "{string}",
								      "product_price": {long},
								      "product_Discount": {int}
								      "product_info": "{string}"
								}
---------------------------------------------------------------------------------------------------------------------------------------------------
GET Request
		Base URI			http://localhost:4000/customers/1
		Request Type		GET
---------------------------------------------------------------------------------------------------------------------------------------------------
DELETE Request
		Base URI			http://localhost:4000/customers/1
		Request Type		DELETE
---------------------------------------------------------------------------------------------------------------------------------------------------
GET Request
		Base URI			http://localhost:4000/customers/1
		Request Type		GET
---------------------------------------------------------------------------------------------------------------------------------------------------
POST
GET
PUT
GET
PATCH 
GET
DELETE
GET
---------------------------------------------------------------------------------------------------------------------------------------------------

Feature: Test customer all APIs flow

Scenario: create new Customer Entity using HTTP POST Request

Given user configure base URI in Rest Assured
And user get the Request Specification interface Object
And user add request content type header
And user create request body using json node as "createCustomer"
And user add request body to HTTP Request
When user select HTTP POST Request
Then user capture status code
And user capture status line
And user capture response time
And user capture response body
And user capture customer id from response body
And user capture response all headers


Scenario: update Customer Entity using HTTP PUT Request

Given user configure base URI in Rest Assured
And user get the Request Specification interface Object
And user add request content type header
And user create request body using json node as "updateCustomer"
And user add request body to HTTP Request
When user select HTTP PUT Request
Then user capture status code
And user capture status line
And user capture response time
And user capture response body
And user capture response all headers

=====================================================================================================
package POJO;

import com.fasterxml.jackson.annotation.JsonInclude;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class Customer {

	private String cust_fName;

	private String cust_lName;

	private String cust_billingAddress;

	private String product_Name;

	@JsonInclude(JsonInclude.Include.NON_DEFAULT)
	private long product_price;

	@JsonInclude(JsonInclude.Include.NON_DEFAULT)
	private int product_Discount;

	private String product_info;

	
	public String getCust_fName() {
		return cust_fName;
	}

	public void setCust_fName(String cust_fName) {
		this.cust_fName = cust_fName;
	}

	public String getCust_lName() {
		return cust_lName;
	}

	public void setCust_lName(String cust_lName) {
		this.cust_lName = cust_lName;
	}

	public String getCust_billingAddress() {
		return cust_billingAddress;
	}

	public void setCust_billingAddress(String cust_billingAddress) {
		this.cust_billingAddress = cust_billingAddress;
	}

	public String getProduct_Name() {
		return product_Name;
	}

	public void setProduct_Name(String product_Name) {
		this.product_Name = product_Name;
	}

	public long getProduct_price() {
		return product_price;
	}

	public void setProduct_price(long product_price) {
		this.product_price = product_price;
	}

	public int getProduct_Discount() {
		return product_Discount;
	}

	public void setProduct_Discount(int product_Discount) {
		this.product_Discount = product_Discount;
	}

	public String getProduct_info() {
		return product_info;
	}

	public void setProduct_info(String product_info) {
		this.product_info = product_info;
	}

}

{
	"createCustomer" :
		{
			"cust_fName": "Dipali",
			"cust_lName": "Joshi",
			"cust_billingAddress": "Pune",
			"product_Name": "Mobile Phone",
			"product_price": 1299.344,
			"product_Discount": 5,
			"product_info": "Samsung"
		},
		
	"updateCustomer" :
			{
				"cust_fName": "Punam",
				"cust_lName": "Jadhav",
				"cust_billingAddress": "Mumbai",
				"product_Name": "Mobile Phone",
				"product_price": 333.333,
				"product_Discount": 15,
				"product_info": "IPhone"
			},
	"partialUpdateCustomer" :
	{
		"product_price": 999.123,
		"product_info": "Vivo Mobile Phone"
	}
	
}



Feature: Test End to End all customer APIs

  Scenario: create New customer using HTTP POST Request
    Given user configure BaseURI in Rest Assured
    And user get the RequestSpecification interface object
    And user add request ContentType header
    And user create request body using jsonNode name as "createCustomer"
    And user add request body to HTTP Request
    When user select HTTP POST Request
    Then user capture status code
    And user capture status line
    And user capture response time
    And user capture response body
    And user capture response headers
    And user capture customer id from response body

  Scenario: retrieve customer using HTTP GET Request
    Given user configure BaseURI in Rest Assured
    And user get the RequestSpecification interface object
    When user select HTTP GET Request
    Then user capture status code
    And user capture status line
    And user capture response time
    And user capture response body
    And user capture response headers

  Scenario: update customer using HTTP PUT Request
    Given user configure BaseURI in Rest Assured
    And user get the RequestSpecification interface object
    And user add request ContentType header
    And user create request body using jsonNode name as "updateCustomer"
    And user add request body to HTTP Request
    When user select HTTP PUT Request
    Then user capture status code
    And user capture status line
    And user capture response time
    And user capture response body
    And user capture response headers

         Scenario: retrieve customer using HTTP GET Request
    Given user configure BaseURI in Rest Assured
    And user get the RequestSpecification interface object
    When user select HTTP GET Request
    Then user capture status code
    And user capture status line
    And user capture response time
    And user capture response body
    And user capture response headers
    
    
  Scenario: update partial customer using HTTP PATCH Request
    Given user configure BaseURI in Rest Assured
    And user get the RequestSpecification interface object
    And user add request ContentType header
    And user create request body using jsonNode name as "partialUpdateCustomer"
    And user add request body to HTTP Request
    When user select HTTP PATCH Request
    Then user capture status code
    And user capture status line
    And user capture response time
    And user capture response body
    And user capture response headers

  Scenario: retrieve customer using HTTP GET Request
    Given user configure BaseURI in Rest Assured
    And user get the RequestSpecification interface object
    When user select HTTP GET Request
    Then user capture status code
    And user capture status line
    And user capture response time
    And user capture response body
    And user capture response headers

      Scenario: delete customer using HTTP DELETE Request
    Given user configure BaseURI in Rest Assured
    And user get the RequestSpecification interface object
    When user select HTTP DELETE Request
    Then user capture status code
    And user capture status line
    And user capture response time
    And user capture response headers
    
    
      Scenario: retrieve customer using HTTP GET Request
    Given user configure BaseURI in Rest Assured
    And user get the RequestSpecification interface object
    When user select HTTP GET Request
    Then user capture status code
    And user capture status line
    And user capture response time

    
    
    package StepAPIs;

import java.io.File;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import POJO.Customer;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.http.Headers;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class CustomerStepAPI {

	RequestSpecification httpRequest;
	String requestBody;
	Response response;
	String responseBody;
	static String customerId;

	@Given("user configure BaseURI in Rest Assured")
	public void user_configure_base_uri_in_rest_assured() {
		RestAssured.baseURI = "http://localhost:4000/";
	}

	@Given("user get the RequestSpecification interface object")
	public void user_get_the_request_specification_interface_object() {
		httpRequest = RestAssured.given();

	}

	@Given("user add request ContentType header")
	public void user_add_request_content_type_header() {
		httpRequest.contentType(ContentType.JSON);
	}

	@Given("user create request body using jsonNode name as {string}")
	public void user_create_request_body_using_json_node_name_as(String jsonNodeName) throws Exception {
		ObjectMapper mapper = new ObjectMapper();

		File file = new File(System.getProperty("user.dir") + "//src//test//resources//customerTestData.json");

		JsonNode jsonNode = mapper.readTree(file);

		Customer customer = mapper.treeToValue(jsonNode.get(jsonNodeName), Customer.class);

		requestBody = mapper.writeValueAsString(customer);

	}

	@Given("user add request body to HTTP Request")
	public void user_add_request_body_to_http_request() {
		httpRequest.body(requestBody);
	}

	@When("user select HTTP POST Request")
	public void user_select_http_post_request() {
		response = httpRequest.post("customers");
	}

	@Then("user capture status code")
	public void user_capture_status_code() {
		int code = response.statusCode();
		System.out.println(code);
	}

	@Then("user capture status line")
	public void user_capture_status_line() {
		String line = response.statusLine();
		System.out.println(line);
	}

	@Then("user capture response time")
	public void user_capture_response_time() {
		long time = response.time();
		System.out.println(time);

	}

	@Then("user capture response body")
	public void user_capture_response_body() {
		responseBody = response.body().asString();
		System.out.println(responseBody);
	}

	@Then("user capture response headers")
	public void user_capture_response_headers() {
		Headers allHeader = response.headers();

	}

	@Then("user capture customer id from response body")
	public void user_capture_customer_id_from_response_body() {

		JsonPath jsonPath = new JsonPath(responseBody);
		customerId = jsonPath.getString("id");

		System.out.println(customerId);

	}

	@When("user select HTTP PUT Request")
	public void user_select_http_put_request() {

		response = httpRequest.put("customers/" + customerId);

	}

	@When("user select HTTP PATCH Request")
	public void user_select_http_patch_request() {

		response = httpRequest.patch("customers/" + customerId);

	}

	@When("user select HTTP GET Request")
	public void user_select_http_get_request() {

		response = httpRequest.get("customers/" + customerId);

	}

	@When("user select HTTP DELETE Request")
	public void user_select_http_delete_request() {

		response = httpRequest.delete("customers/" + customerId);

	}

}

=============================================================================================
Create user using POST Request


Swagger documentations
			Base URI		http://localhost:5000/users
			Request Type		POST
			Request Header		Content-Type	application/json

Request Body
	{
			"firstName": "{string}",
			 "lastName": "{string}",
			 "username" : "{string}",
			"age": {int},
			"address":  "{Address}"
						{
							 "city": "{string}",
							"state": "{string}",
							 "country": "{string}",
							 "pincode": {int}
						}
	}
------------------------------------------------------------------------------
Nested JSON format
------------------------------------------------------------------------------
public class user
{
	private String firstName;
	private String lastName;
	private String username;
	private int age;
	private Address address;
	
	//getter and setter method
}

public class Address
{
	private String city;
	private String state;
	private String country;
	private int pincode;

	//getter and setter methods
}
	




POST
GET
PUT
GET
PATCH
GET
DELETE
GET













    
    
    
    
    
    
    
    
    
























































		
