user defined Methods in java
--------------------------------------------------------------------------------------------------------
	there are 2 types of User defined methods
	1) static method
	2) Non static method
--------------------------------------------------------------------------------------------------------
1) Static method  in java
	there are 4 types of methods
	I) static method without return type and 0 arguments
	ii) static method without return type and multiple arguments
	iii) static method with return type and 0 arguments
	iv) static method with return type and multiple arguments
--------------------------------------------------------------------------------------------------------
2) Non Static method  in java
	there are 4 types of methods
	I) Non static method without return type and 0 arguments
	ii) Non static method without return type and multiple arguments
	iii) Non static method with return type and 0 arguments
	iv) Non static method with return type and multiple arguments
--------------------------------------------------------------------------------------------------------
1) Static method  in java
------------------------------------------------------------------------------------------------------------------------------------------------
	I) static method without return type and 0 arguments
------------------------------------------------------------------------------------------------------------------------------------------------
syntax:
				AccessModifier NonAccessModifier NonReturnType methodName()
				{

						//statement
				}	

e.g.
				public static void abc()
				{
						//statement
				}

what are the different Access Modifier in java?
		there are 4 types  of Access Modifier
		1) public			: if we declare any method as public then we can access this method anywhere within the project
		2) private			: If we declare any method as private then we can access this method within the class.
		3) default			: if we declare any method as default then we can access this method within the package.
		4) protected			: if we declare any method as protected then we can access this method within the package as well as outside the 									package by using inheritance concept.


What is non Access Modifier keyword in java
		- static is non access modifier keyword.
		- once we declare any method as static method, it will allocate memory location in class level.
		- always we access the static method by class name dot method name.

what is non Return type keyword in java
		- void is non return type 

what is methodName?
		- any  method name, 

where we declare the static method?
		- we declare static method before the main method or after the main method but inside the class.

how to call static method in main method?
		there are 3 different ways we can access the static  method in main method
		1) directly method name
		2) by using class name dot method name				*********
		3) by using object name.

------------------------------------------------------------------------------------------------------------------------------------------------
Scenario:
		 - create static method without return type and 0 arguments and write logic to find the max value from arrays.

public class Demo1
{
		
			public static void findMaxValue()
			{
						int [] xyz = {100,200,300,4500,34,456};
						int max= xyz[0];
					
						for(int i=0;i<xyz.length;i++)
							{
										if(xyz[i]>max)
										{
												max=xyz[i];
										}
							}	
				
						System.out.println(max);
			
			}
			public static void main(String [] args)
				{
						//1) findMaxValue();
						//2) Demo1.findMaxValue();
						//3
						Demo1 obj =new Demo1();
						obj.findMaxValue();
				}


}
-------------------------------------------------------------------------------------------------------------
package Tutorial10;

public class Demo1 {
	// Static method without return type and 0 arguments/ parameter
	public static void findMaxValue() {
		int[] abc = { 100, 200,4457, 34 };
		// imagine 0 index position value as max value
		int max = abc[0];//4457

		// iterate all values from array and compare with max variable value.
		// and if max variable value is smaller than array value then re-assign the value
		// for max variable
		
		for(int i=0;i<abc.length;i++) 
		{
				//34 > 4457
				if(abc[i]>max)
				{
					max=abc[i];//4457
				}
		}
		System.out.println(max);
	}

	public static void main(String[] args) 
	{
			System.out.println("Main method is started");
			//findMaxValue();
			//Demo1.findMaxValue();
			Demo1 obj =new Demo1();
			obj.findMaxValue();
			System.out.println("Main method is Ended");
			
	}

}
=============================================================================================
Scenario 2:
		- create 3 static method.
		- access 1 static method directly 
		- access 2nd method by using class name 
		- access 3rd method by using object name

can we access all 3 static method by using class name
		yes

can we access all 3 static method directly
		yes

can we access all 3 static method by using object name
		yes

can we access all 3 static  method in another class
		yes

can we access all 3 static method in another class by using class name
		yes , but we have to take reference of method defined class.


can we access all 3 static method in another class directly
		we can't access directly but, if we create relationship between 2 classes using extends keyword then easily we access static directly in another class.


can we access all 3 static method in another class by using object name?
		yes


-----------------------------------------------------------------------------------------------------------------------------------------
package Tutorial10;

public class Demo2 {

	public static void abc() {
		System.out.println("abc method in Demo2 class");
	}

	public static void pqr() {
		System.out.println("PQR method in Demo2 class");
	}

	public static void xyz() {
		System.out.println("XYZ method in Demo2 class");
	}

	public static void main(String[] args) 
	{
			System.out.println("Pune");
			abc();
			System.out.println("Mumbai");
			Demo2.pqr();
			System.out.println("Delhi");
			Demo2 obj =new Demo2();
			obj.xyz();
			System.out.println("Dubai");
	}

}
-------------------------------------------------------------------------------------------------------------------
package Tutorial10;

public class Sample2 {

	public static void main(String[] args) {
		Demo2.abc();
		Demo2.pqr();
		Demo2.xyz();
		

	}

}

-------------------------------------------------------------------------------------------------------------------
package Tutorial10;

public class Sample2 extends Demo2{

	public static void main(String[] args) {
		
		abc();
		pqr();
		xyz();
		

	}

}
-------------------------------------------------------------------------------------------------------------------
package Tutorial10;

public class Sample2 {

	public static void main(String[] args) {
		
		Demo2 obj =new Demo2();
		obj.abc();
		obj.pqr();
		obj.xyz();
		

	}

}
-------------------------------------------------------------------------------------------------------------------
package Tutorial10;

public class Sample2 extends Demo2{

	public static void main(String[] args) {
		
		Sample2 obj =new Sample2();
		obj.abc();
		obj.pqr();
		obj.xyz();
		

	}

}
======================================================================================
package Tutorial10;

public class Demo3 {

	public static void d1() {
		System.out.println("D1 method in Demo3 class");
	}

	public static void d2() {
		System.out.println("D2 method in Demo3 class");
	}

	public static void d3() {
		System.out.println("D3 method in Demo3 class");
	}

	public static void main(String[] args) {

		Demo3 obj = new Demo3();
		obj.d1();
		obj.d2();
		obj.d3();

		// Demo3.d1();
//		Demo3.d2();
//		Demo3.d3();

//		d1();
//		d2();
//		d3();

	}
}

package Tutorial10;


public class Sample3 extends Demo3
{

	public static void main(String[] args) {
		d1();
		d2();
		d3();
		
		
//		Demo3 obj =new Demo3();
//		obj.d1();
//		obj.d2();
//		obj.d3();
		
				
//		Demo3.d1();
//		Demo3.d2();
//		Demo3.d3();
//		

	}

}
=============================================================================================
ii) static method without return type and multiple arguments or parameters

syntax;
			AccessModifier NonAccessModifier  NonReturnType MethodName(datatype variableName1,datatype variableName2,datatype variableName3)
			{
						//statement

			}	


what are the Access Modifier ?
		I) public
		2) private
		3) default
		4) protected


what is non Access modifier
		static keyword

Non Return Type	: void keyword

Method Name		: any method name

datatype			: byte, short, int, long, double, float, char, boolean, String, array , own class name

variableName1		:any name

where we create static method?
			- before the main method or after the main method but inside the class

how to access static method in main method?
		 there are 3 ways
		1) directly 
		2) by using className dot method name
		3) by using object name
-------------------------------------------------------------------------------------------------------------------------
Scenario:
		create static method with 2 String arguments and compare their values

public class Demo4
{
			public static void compareString(String a, String b)
			{
					System.out.println(a.equals(b));
					System.out.println(a.equalsIgnoreCase(b));
					System.out.println(a==b);
					System.out.println(a.subString(0).equals(b));
			}
			public static void main(String [] args)
			{
					Demo4.compareString("cucumber", "cucumber");
			}

}
--------------------------------------------------------------------------------------------------
package Tutorial10;

public class Demo4 {
	
	public static void compareString(String a,String b)
	{
		System.out.println(a.equals(b));//true
		System.out.println(a.equalsIgnoreCase(a));//true
		System.out.println(a==b);//true
		System.out.println(a.substring(0));//RestApi
		System.out.println(a.substring(0).equals(b));//true
		
		System.out.println(a.equals(b)&&true);//true
		System.out.println(a.equals(b)&&false);//false
		System.out.println(!a.equals(b));//false
		
		
	}
	
	
	public static void main(String[] args) {
		System.out.println("Main Method is Started");
		Demo4.compareString("RestApi", "RestApi");
		System.out.println("main method is ended");
	}

}

package Tutorial10;

public class Demo5 {
	/// create static method with 3 int args and find max value
	
	public static void findMaxValue(int a, int b, int c)
	{
		
		if((a>b)&&(a>c))
		{
			System.out.println("A is max number");
		}
		else if(b>c)
		{
			System.out.println("B is Max Number");
		}
		else
		{
			System.out.println("C is max Number");
		}
	}
	

	public static void main(String[] args) 
	{
		Demo5.findMaxValue(100, 200, 3002);
		
		findMaxValue(120, 32, 30);
		
	}

}
=====================================================================================
Ass:
	Create static method with 1 int arguments

conditions
		i) if a number is between 1 to 100 then print a small number
		ii) if a number is between 101 to 1000 then print a number is medium
		iii) if a numbers is between 1001 to 10000 the print a number is large
		iv) if a number is above 10001 then a number is biggest number
		v) if a number is below 1 then a number is zero or negative number.

------------------------------------------------------------------------------------------------
	Create static method with 1 int arguments

conditions
		i) if marks is below 25 then display the grade as F
		ii) if marks is  25 to 45 then display the grade as E
		iii) if marks is  46 to 55 then display the grade as D
		iv) if marks is  56 to 65 then display the grade as C
		v) if marks is  66 to 75 then display the grade as B
		vi) if marks is above 75 then display the grade as A

------------------------------------------------------------------------------------------------
//	1. static method without return type and int array args or parameters and find max value from array
//	2. static method without return type and int array or parameters and find min value from array


1. static method without return type and 2 boolean args or parameters
	and perform all logical operator operation (AND operator and OR Operator)

------------------------------------------------------------------------------------------------
create static method with 1 String arguments and write logic to find numbers, upper case character, lower case character and special character								VVVVVVVVVVVVVVVVVVVVVIIIIIIIIMMMMMMMMMMMMPPPPPPPPPPPPPPPPPP
					
public class Demo9
{
		public static void findValues(String abc)
		{
				//find numbers
				String numbers = abc.replaceAll("[^0-9]","");
				System.out.println(numbers);

				//find upper case letter
				String uppercase = abc.replaceAll("[^A-Z]","");
				System.out.println(uppercase);

				//find lower case letter
				String lowercase = abc.replaceAll("[^a-z]","");
				System.out.println(lowercase);

				//find special character
				String specialCharacter = abc.replaceAll("[a-zA-Z0-9]","");
				System.out.println(specialCharacter);
		}

	public static void main(String[] args) 
	{
		Demo9.findValues("90912abcABC2&%#$a234");
		
	}

}
-------------------------------------------------------------------------------------------------------------------------
package Tutorial10;

public class Demo9 {
	
	public static void findGroups(String abc)
	{
		//find numbers 				:	don't replace 0-9 to "" (blank String)
		String numbers =abc.replaceAll("[^0-9]", "");
		System.out.println(numbers);
		
		//find upper case letter	: dont replace A-Z t "" blank String
		String upperCase = abc.replaceAll("[^A-Z]", "");
		System.out.println(upperCase);
		
		//find lower case letter	: dont replace a-z to "" (Blank String)
		String lowerCase = abc.replaceAll("[^a-z]", "");
		System.out.println(lowerCase);

		//find special character	: replace 0-9,A-Z and a-z to blank String
		String specialCharacter = abc.replaceAll("[0-9A-Za-z]", "");
		System.out.println(specialCharacter);
	}
	
	
	
	
	public static void main(String[] args) 
	{
		Demo9.findGroups("9AR^55%@%ahayA123P");
		
		
	}

}
-----------------------------------------------------------------------------------------------------------------
create static method with 1 String arguments and find upper case and lower letter
			combine the upper case letter and lower case letter and reverse the combined string

		at the time of calling these method use below format
							"%^&ABOLI01022022shinde*&*";

-----------------------------------------------------------------------------------------------------------------
create static method with 1 String arguments lower letter
			reverse the string
			and check find string and reverse is Palindrome or not

		at the time of calling these method use below format
							"%^m&010a220d22a*&m*";

-----------------------------------------------------------------------------------------------------------------





















