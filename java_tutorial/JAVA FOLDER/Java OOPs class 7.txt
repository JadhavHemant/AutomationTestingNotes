Abstraction in java
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	- Abstraction is process of hiding the implementation details and only show functionality to the user.
	there are 2 ways we can achieve the abstraction in java
		1) by declaring abstract class
		2) by declaring the interface.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) by declaring the interface.														VVVVVVIMMMPPPPPPPP
		- Abstraction is process of hiding the implementation details and only show functionality to the user.
		- interface is type of definition block which contains 100% are abstract method as well as we can define the static method, private 		method and default non static method.
		- We implements interface in another class by using "implements" keywords.
		- all interface variables are final variable.
		- static and final modifier are not allowed in interface for variables
		-by default all interface variable are static and final.
		- we can't create object of interface but we can mention reference of interface.
		- to create the interface we have to use interface.
		- by using interface we can achieve the multiple inheritance by extending the 2 interface in one class.
		- In interface we create 
								i) abstract method (incomplete method).
								ii) we can create static method(complete method)		
								iii) we can create private method (complete method)
								iv) default non static method (complete method)

		- in interface 
								I) we can't create abstract static method 
								ii) we can't create abstract private method 
								iii) we can't create abstract final method 
								iv) we can't create abstract constructor
								v) we can't create abstract main method
								vi) we can't constructor in interface
								vii) we can't create final method 
-------------------------------------------------------------------------------------------------------------------------------------------
package Tutorial4;

public interface Demo1 {

	public abstract void d1();
	
	public void d2();
	

}

package Tutorial4;

public class Sample1 implements Demo1{

	@Override
	public void d1() {
		System.out.println("D1 Method");
		
	}

	@Override
	public void d2() {
		System.out.println("D2 Method");
	}
	
	public static void main(String[] args) {
		Demo1 obj =new Sample1();
		obj.d1();
		obj.d2();
	}

}
===================================================================================
package Tutorial4;

public interface Demo2 {

	// abstract method without return type and 0 args
	public void d1();

	// abstract method without return type and 2 int args
	public void d2(int a, int b);

	// abstract method with String return type and 0 args
	public abstract String d3();

	// abstract method with int return type and 2 int args
	public int d4(int a, int b);

	public static void main(String[] args) {
		Sample2 obj = new Sample2();
		obj.d1();
		obj.d2(100, 100);
		obj.d3();
		obj.d4(100, 200);
	}

}

package Tutorial4;

public class Sample2 implements Demo2 {

	@Override
	public void d1() {
		System.out.println("D1 method");

	}

	@Override
	public void d2(int a, int b) {
		System.out.println("D2 method");
	}

	@Override
	public String d3() {
		System.out.println("D3 method");
		return "selenium";
	}

	@Override
	public int d4(int a, int b) {
		System.out.println("D4 method");
		return 10;
	}
	
	public static void main(String[] args) {
		Sample2 obj =new Sample2();
		obj.d1();
		obj.d2(100, 100);
		obj.d3();
		obj.d4(100, 200);
	}
	

}
===============================================================================
package Tutorial4;

public interface Demo3 {

	public void d1();

	// can we create private method in interface: yes
	private void d2() {
		System.out.println("D2 private method");
	}

	// can we create static method interface : yes
	public static void d3() {
		System.out.println("D3 Static method");
	}

	// can we create non static default method : yes
	default void d5() {

	}

}
==============================================================================
package Tutorial4;

public interface Demo3 {

	public void d1();

	// can we create private method in interface: yes
	private void d2() {
		System.out.println("D2 private method");
	}

	// can we create static method interface : yes
	public static void d3() {
		System.out.println("D3 Static method");
	}

	// can we create non static default method : yes
	default void d4() {
		System.out.println("Default Method ");
	}

	//can we create main method in interface:		yes
	
	public static void main(String[] args) {
		Demo3 obj =new Sample3();
		obj.d1();
		obj.d2();
		Demo3.d3();
		obj.d4();
		
	}
}

package Tutorial4;

public class Sample3 implements Demo3 {

	@Override
	public void d1() {
		System.out.println("D1 method");
	}

	public static void main(String[] args) {

		Sample3 obj = new Sample3();
		obj.d1();
		obj.d4();
		// if u want to call static method from interface then always we have to use
		// reference of Interface
		Demo3.d3();
	}

}
==========================================================================
package Tutorial4;

public interface Demo4 {

	public abstract void d1();

	// can we create abstract static method : No
	public abstract static void d2();
	
	// can we create abstract private method : No
	private abstract void d3();
	
	// can we create abstract final method : No
	final abstract void d4();
	
	// can we create abstract main method : No
	public abstract static void main(String [] args);
	
	// can we create abstract constructor : No
	public abstract Demo5();

	// can we create final method in interface : No
	final void d6()
	{
		
	}
	
	// can we create constructor in interface : No
	public Demo4()
	{
		
	}
	
}
=====================================================================
can we declare the abstract method in interface without using abstract keyword						VVVVVVIMMPPPPP
		yes

can we declare private method in interface															VVVVVVIMMPPPPP
		yes

can we declare static method in interface															VVVVVVIMMPPPPP
		yes

can we declare the default non static in interface													VVVVVVIMMPPPPP
		yes

can we remodify the value for interface variables													VVVVVVIMMPPPPP
		No

why we can't modify the value for interface variables?												VVVVVVIMMPPPPP
		because once we declare any variable in interface is called final variables.

=====================================================================
can we create abstract static method in interface?													VVVVVVIMMPPPPP
		 No

why we can't create abstract static method in interface?												VVVVVVIMMPPPPP
	- to achieve the abstraction compulsory we have to use overriding concept.
	- and static are bonded by static binding at compile time by compiler and method overriding is support for run time binding.
-----------------------------------------------------------------------------
can we create abstract private method in interface?												VVVVVVIMMPPPPP
		 No

why we can't create abstract private method in interface?											VVVVVVIMMPPPPP
	- to achieve the abstraction compulsory we have to use overriding concept.
	- because access scope of private method is within the class and to achieve the abstraction we need at least 2 or mor classes
-----------------------------------------------------------------------------------------------
can we create abstract final method in interface?												VVVVVVIMMPPPPP
		 No

why we can't create abstract final method in interface?												VVVVVVIMMPPPPP
	- to achieve the abstraction compulsory we have to use overriding concept. 
	- because once we declare any method as final we can't modify the logic for final method in another classes.

----------------------------------------------------------------------	-------------------------
can we create abstract main method in interface?													VVVVVVIMMPPPPP
		 No

why we can't create abstract main method in interface?												VVVVVVIMMPPPPP
		- because main method is itself is static method
-----------------------------------------------------------------------------------------------
can we create abstract constructor in interface?														VVVVVVIMMPPPPP
		 No

why we can't create abstract constructor in interface?												VVVVVVIMMPPPPP
	- to achieve the abstraction compulsory we have to use overriding concept.
	because constructor name should  be same like class name and to achieve the abstraction we need 2 or more classes. and in java
	we can't declare 2 classes with same name.
-----------------------------------------------------------------------------------------------
can we declare final method in interface															VVVVVVIMMPPPPP
	No

why we can't declare final method in interface?														VVVVVVIMMPPPPP
	- final method can't modify or we can't change the logic.

-----------------------------------------------------------------------------------------------
can we declare constructor in interface															VVVVVVIMMPPPPP
	No.

why we can't declare constructor in interface?													VVVVVVIMMPPPPP
	- because we can't create object of interface.
-----------------------------------------------------------------------------------------------
can we implements abstract class in interface?													VVVVVVIMMPPPPP
	NO
why we can't implements abstract class in interface?											VVVVVVIMMPPPPP

because in abstract class we can mention the constructor , final method or non static method but in interface constructor is not allowed, as well final method is not allowed as well as non static is not allowed

-----------------------------------------------------------------------------------------------
can we implements interface in abstract class?												VVVVVVIMMPPPPP
	yes by using implements keyword, we implements interface in abstract class using

-----------------------------------------------------------------------------------------------
can we define abstract protected method interface
		no

-----------------------------------------------------------------------------------------------

package Tutorial4;

public interface Demo4 {

	public abstract void d1();

	// can we create abstract static method : No
	public abstract static void d2();
	
	// can we create abstract private method : No
	private abstract void d3();
	
	// can we create abstract final method : No
	final abstract void d4();
	
	// can we create abstract main method : No
	public abstract static void main(String [] args);
	
	// can we create abstract constructor : No
	public abstract Demo5();

	// can we create final method in interface : No
	final void d6()
	{
		
	}
	
	// can we create constructor in interface : No
	public Demo4()
	{
		
	}
	
}
====================================================================
can we remodify the value for interface variables													VVVVVVIMMPPPPP
		No

why we can't modify the value for interface variables?												VVVVVVIMMPPPPP
		because once we declare any variable in interface is called final variables.

====================================================================
package Tutorial4;

public interface Demo5 {
	// by default all interface variable are static and final
	String a = "selenium";

	public void d1();

	public void d2();

	public void d3();

}

package Tutorial4;

public abstract class Sample5 implements Demo5 {

	public void d1() {
		System.out.println("D1 method");
	}

	public void d2() {
		System.out.println("D2 method");
	}

}

package Tutorial4;

public class Pune5 extends Sample5 {

	@Override
	public void d3() {
		System.out.println("D3 method");

	}

	public static void main(String[] args) {
		// we can't create object of interface as well as abstract class but we can
		// mention reference of interface as well as abstract class

		Demo5 obj = new Pune5();
		obj.d1();
		obj.d2();
		obj.d3();

		System.out.println(Demo5.a);

	}

}
====================================================================
package Tutorial4;

public interface Demo6 {

	public void d1();

	public void d2();

	public void d3();

}

package Tutorial4;

public abstract class Sample6 implements Demo6 {

	public void d1() {
		System.out.println("D1 method");
	}

	public abstract void s1();

}


package Tutorial4;

public abstract class Pune6 extends Sample6{

	public void d2()
	{
		System.out.println("D2 method");
	}
	
	public void s1()
	{
		System.out.println("S1 method");
	}
	
	public abstract void p1();
	
}

package Tutorial4;

public class Mumbai6 extends Pune6 {

	@Override
	public void d3() {
		System.out.println("D3 method");

	}

	@Override
	public void p1() {
		System.out.println("P1 method");
	}
	
	public static void main(String[] args) {
		Mumbai6 obj =new Mumbai6();
		obj.d1();
		obj.d2();
		obj.d3();
		obj.s1();
		obj.p1();
		
		
		
//		Pune6 obj =new Mumbai6();
//		obj.d1();
//		obj.d2();
//		obj.d3();
//		obj.s1();
//		obj.p1();
		
		
//		Sample6 obj =new Mumbai6();
//		obj.d1();
//		obj.d2();
//		obj.d3();
//		obj.s1();
		
		
		
//		Demo6 obj =new Mumbai6();
//		obj.d1();
//		obj.d2();
//		obj.d3();
		
		
	}

}
==================================================================
package Tutorial4;

public interface Demo7 {

	void d1();
	
	void d2();
	
	
	
}


package Tutorial4;

public interface Sample7 extends Demo7 {

	public void s1();

	public void s2();

}

package Tutorial4;

public interface Pune7 extends Sample7{

	public void p1();
	
	public void p2();
	
	
}

package Tutorial4;

public class Mumbai7 implements Pune7 {

	@Override
	public void s1() {
		System.out.println("S1 method");
	}

	@Override
	public void s2() {
		System.out.println("S2 method");
	}

	@Override
	public void d1() {
		System.out.println("D1 method");

	}

	@Override
	public void d2() {
		System.out.println("D2 method");

	}

	@Override
	public void p1() {
		System.out.println("P1 method");

	}

	@Override
	public void p2() {
		System.out.println("P2 method");

	}

	public static void main(String[] args) {
		Mumbai7 obj =new Mumbai7();
		obj.d1();
		obj.d2();
		obj.s1();
		obj.s2();
		obj.p1();
		obj.p2();
		
		
//		Pune7 obj =new Mumbai7();
//		obj.d1();
//		obj.d2();
//		obj.s1();
//		obj.s2();
//		obj.p1();
//		obj.p2();
		
		
//		Sample7 obj =new Mumbai7();
//		obj.d1();
//		obj.d2();
//		obj.s1();
//		obj.s2();
		
		
//		Demo7 obj =new Mumbai7();
//		obj.d1();
//		obj.d2();
		

		
	}

}
====================================================================
package Tutorial4;

public interface Demo8 {

	public void d1();

	public void d2();

}

package Tutorial4;

public interface Sample8 {

	public void s1();

	public void s2();

}

package Tutorial4;

//Multiple inheritance using Interface
public class Pune8 implements Demo8, Sample8 {

	@Override
	public void s1() {
		System.out.println("S1 method");

	}

	@Override
	public void s2() {
		System.out.println("S2 method");

	}

	@Override
	public void d1() {
		System.out.println("D1 method");

	}

	@Override
	public void d2() {
		System.out.println("D2 method");
	}
	
	public static void main(String[] args) {
		Pune8 obj =new Pune8();
		obj.d1();
		obj.d2();
		obj.s1();
		obj.s2();
		
		
//		Sample8 obj =new Pune8();
//		obj.s1();
//		obj.s2();
		
		
		
//		Demo8 obj =new Pune8();
//		obj.d1();
//		obj.d2();
		
	}

}
===================================================================
package Tutorial4;

public interface Demo9 {

	public void d1();
	
	
}
package Tutorial4;

//we implements interface in abstract class using implements keyword

public abstract class Sample9 implements Demo9 {

	public abstract void s1();
}


package Tutorial4;

public class Pune9 extends Sample9 {

	@Override
	public void d1() {
		System.out.println("D1 method");

	}

	@Override
	public void s1() {
		System.out.println("S1 method");

	}

	public static void main(String[] args) {
		Sample9 obj = new Pune9();
		obj.d1();
		obj.s1();
		
		// Demo9 obj =new Pune9(); obj.d1();

	}

}
=============================================================
package Tutorial4;

public abstract class Demo10 {

	public abstract void d1();

}

package Tutorial4;

//can we implements abstract class in interface	: NO
//why we can't implements abstract class in interface
//because in abstract class we can mention the constructor , 
//final method or non static method but in interface consturtor is not allowed, as well final method is not allowed as well as 
//non static is not allowed

public interface Sample10 implements Demo10{
	
	public void s1();
	
	

}
===========================================================================
diff between Abstract class and interface?												VVVVIMMMPPPPPPPPPPPPPPP
- 
abstract class
		1) to create Abstract class we use abstract keyword
		2) we implements abstract class methods in another class using extends keyword
		3) we can't achieve the multiple interface using abstract class.
		4) in abstract class contains static, non static and final variables.
		5) we can implements interface in abstract class using implements keywords/
		6)  we can declare constructor in abstract class
		7)  we can declare final method in abstract class
		8) we can declare protected abstract method in abstract class.
		9) compulsory we have to use abstract keyword to create abstract method in abstract class.
		
interface class
		1) to create interface we use interface keyword
		2) we implements interface methods in another class using implements keyword
		3) we can achieve the multiple interface using interface.
		4) interface contains we have static and final variable by default.
		5) we can't implements abstract class in interface.
		6) we can't declare constructor in interface
		7) we can't declare final method in interface.
		8) we can't declare protected abstract method in interface.
		9) abstract keyword is optional to create the abstract method in interface.
		

























