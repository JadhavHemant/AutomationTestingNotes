diff between this and super keyword?										VVVVVVIMMMMPPPPPPPPPP

--------------------------------------------------------------------------------------------------------------------------
This Keyword
	- this keyword is used to access the non static global variables, non static method as well as constructor of current class.
	- we can use this keyword only in non static block to access 
								i) global non static and static variable variables of current class 
								ii)  static non static method of current class, 
								iii) same class constructor in another constructor, 
	- we can't use this keyword in static block.

--------------------------------------------------------------------------------------------------------------------------
Super keyword
	- super keyword is used to access the non static global variables, non static method as well as constructor of parent class.
	- we can use super keyword only in non static block, to access parent class
								i) global non static and static variable variables of current class 
								ii)  static non static method of current class, 
								iii) same class constructor in another constructor.

	- we can't use super keyword in static block.
--------------------------------------------------------------------------------------------------------------------------
can we use this and super keyword in same constructor
	No.

can we use this and super keyword in static method
	No

can we use this and super keyword in non static method
	yes

--------------------------------------------------------------------------------------------------------------------------
package Tutorial2;

public class Demo1 {
	
	String a="Rest API (Application Programming Interface)";
	
	static String b="Hamcrest Library :: used to add assertion in API Automation";
	
	public void abc()
	{
		System.out.println(a);
		System.out.println(this.a);
		
		System.out.println(this.b);
		System.out.println(Demo1.b);
				
	}
	
	
	public static void pqr()
	{
		//System.out.println(this.a);	---> compile time error
		//System.out.println(this.b);	---> compile time error
	}
	
	
	public static void main(String[] args) {
		
		Demo1 obj =new Demo1();
		obj.abc();
		
		
	}
	

}
========================================================================
package Tutorial2;

public class Demo2 {
	
	String a="Rest Assured";
	
}

package Tutorial2;

public class Sample2 extends Demo2 {

	String a="Jackson-Databind Library";
	
	
	public void xyz()
	{
		String a="JSON Path Validator";
		
		System.out.println(a);//JSON Path Validator
		
		System.out.println(this.a);//Jackson-Databind Library
		
		System.out.println(super.a);//Rest Assured
	}
	
	
	
	public static void main(String[] args) {
		Sample2 obj =new Sample2();
		obj.xyz();
	}
	
}
=====================================================================================
package Tutorial2;

public class Demo3 {
	
	String a="REST(REpresentation State Transfer) API";
	
	
	public void abc()
	{
		String a="OAuth 2.0";
		
		System.out.println(a);
		System.out.println(this.a);
		
	}
	

}

package Tutorial2;

public class Sample3 extends Demo3
{
	
	String a="Hamcrest Library : used to add assertion in API Automation";
	
	public void xyz()
	{
		String a="JsonPath Library : used to capture values from Response body";
		
		System.out.println(a);
		
		System.out.println(this.a);
		
		System.out.println(super.a);
		
	}
	
	
	public static void main(String[] args) {
		Sample3 obj =new Sample3();
		obj.xyz();
	}
}
=========================================================================
package Tutorial2;

public class Demo4 {
	
	public void abc()
	{
		System.out.println("abc method in Demo4 class");
	}
	
	
	public void xyz()
	{
		this.abc();
		System.out.println("xyz method in Demo4 class");
	}
	
	
	public static void main(String[] args) {
		
		Demo4 obj =new Demo4();
		obj.xyz();
	}
	
}
===============================================================================
package Tutorial2;

public class Demo4 {

	public void abc() 
	{
		System.out.println("abc method in Demo4 class");
	}

}

package Tutorial2;

public class Sample4 extends Demo4{

	public void abc() 
	{
		System.out.println("abc method in Sample4 class");
	}
	
	
	public void xyz()
	{
		this.abc();
		super.abc();
	}
	
	
	public static void main(String[] args) {
		Sample4 obj =new Sample4();
		obj.xyz();
	}
}
=====================================================================
Diff between final keyword, finally block and finalize() method						VVVVVVVIMMPPPPPPPPPPPP

---------------------------------------------------------------------------------------------------------------------------------------
final keyword																		VVVVVVVIMMPPPPPPPPPPPP
	- final keyword is used to provide the restriction on variable, method and as well class.

	- once we declare any variable as final we can't modify the its values.			VVVVVVVIMMPPPPPPPPPPPP
	- if we declare any method as final then we can't override it.						VVVVVVVIMMPPPPPPPPPPPP
	- if we declare any class as final then we can't extends it.							VVVVVVVIMMPPPPPPPPPPPP


can declare final abstract method?													VVVVVVVIMMPPPPPPPPPPPP
	no

can we declare final constructor?													VVVVVVVIMMPPPPPPPPPPPP
	No

can we achieve the method overloading for final method								VVVVVVVIMMPPPPPPPPPPPP
	Yes

can we achieve the method overriding for final method								VVVVVVVIMMPPPPPPPPPPPP
	No



---------------------------------------------------------------------------------------------------------------------------------------


package Tutorial2;

public class Demo5 {
	final String a = "Selenium";
	final static String b="API";
	
	public void abc() {
		System.out.println(a);

//		a = "TestNG";			---> compile time error 
		System.out.println(a);
		
		System.out.println(b);
		
//		b="Hamcrest";			---> compile time error 
		System.out.println(b);
		
		
	}

	public static void main(String[] args) {

		Demo5 obj = new Demo5();
		obj.abc();

		

	}

}
=============================================================
package Tutorial2;

public class Demo6 {

	final public void abc()
	{
		System.out.println("abc method in Demo6 class");
	}
	
	public void xyz()
	{
		System.out.println("xyz method in Demo6 class");
	}
	
	
	
}

package Tutorial2;

public class Sample7 extends Demo6{

	//compile time error
//	@Override
//	public void abc()
//	{
//		System.out.println("abc method in Sample7 class");
//	}
	
	@Override
	public void xyz()
	{
		System.out.println("xyz method in Sample7 class");
	}
	
	
	public static void main(String[] args) {
		Sample7 obj =new Sample7();
		obj.abc();
		obj.xyz();
	}
	
}
=======================================================================
package Tutorial2;

final public class Demo7 {

	public void abc()
	{
		System.out.println("abc method in Demo7 class");
	}
	
}

package Tutorial2;

//compile time error
public class Sample8 extends Demo7{

	
	
	
}
==============================================================================
package Tutorial2;

public class Demo8 {
	
	final static  void abc()
	{
		System.out.println("abc method with 0 args");
	}
	
	
	final static void abc(int a)
	{
		System.out.println("abc method with 1 int args");
	}

	final  static void abc(String b)
	{
		System.out.println("abc method with 1 String args");
	}
	
	public static void main(String[] args) {
			
		Demo8.abc();
		Demo8.abc(100);
		Demo8.abc("selenium");
	}
}

==============================================================================
package Tutorial2;

final public class Demo9 {
	
	final String a="selenium";
	
	
	final public void abc()
	{
		System.out.println("abc method");
	}
	
	

	public static void main(String[] args) {

		Demo9 obj =new Demo9();
		System.out.println(obj.a);
		obj.abc();

	}

}
============================================================

can we use this and super keyword in same constructor
		No

can we use this and super keyword in static method
		No

can we use this and super keyword in non static method
		Yes

can we use this or super keyword in 2nd or 3rd line in constructor
		No

can we achieve the method overloading for constructor
		Yes

can we achieve the method overriding for constructor
		No


can we achieve the method overloading for final  method
		Yes

can we achieve the method overriding for final method
		No

can we declare abstract constructor
		No

can we declare static constructor
		No

can we declare final constructor
		No

can we declare final static method
		Yes

can we declare final abstract method
		No

can we declare constructor in final class	
		Yes

can we declare constructor in abstract class
		yes

can we declare constructor in interface
		no


=============================================================================
what is inheritance 
why we can't achieve the multiple inheritance?
why we can't achieve the hybrid inheritance?
where u have used these concept in framework?


what is polymorphism
diff between method overloading and overriding?
can we override the static method?
why we can't override the static method?
can we override the final method?
why we can't override the final method?
can we override the constructor method?
why we can't override the constructor method?
can we override the abstract method?
why we can't override the abstract method?
can we override the main method?
why we can't override the main method?
			etc...
where  u have used method overloading and overriding in framework?


what is abstraction
diff between abstract class and interface
can we declare constructor in abstract class
can we declare constructor in interface
can we declare private method in abstract class
can we declare private method in interface

can we declare final abstract method in abstract class
can we declare final method in abstract class

can we declare final abstract method in interface
can we declare final method in  interface
			etc....

where u have use abstraction in framework?


what is encapsulation?
where u  have used encapsulation in framework?		

what is constructor 
diff types of constructor
where u have constructor in framework

diff between this and super keyword


diff between final , finally and finalize() method
what is use of final keyword

where u have used final keyword in framework















































































































