1) can overload the static method in java?
2) can override the static method in java and if not what is reason?
3) can we declare abstract static method in abstract class and if not what is reason?
4) can we declare  abstract static method in interface and if not what is reason?
--------------------------------------------------------------------------------------------------------------
1) can overload the main method in java?
2) can override the main method in java and if not what is reason?
3) can we declare abstract main method in abstract class and if not what is reason?
4) can we declare abstract main method in interface and if not what is reason?
--------------------------------------------------------------------------------------------------------------
1) can overload the private method in java?
2) can override the private method in java and if not what is reason?
3) can we declare private abstract method in abstract class and if not what is reason?
4) can we declare private abstract method in interface and if not what is reason?
--------------------------------------------------------------------------------------------------------------
1)  can overload the final method in java?
2) can override the final method in java and if not what is reason?
3) can we declare final abstract method in abstract class and if not what is reason?
4) can we declare final abstract method in interface and if not what is reason?
--------------------------------------------------------------------------------------------------------------
1)  can overload the protected method in java?
2) can override the protected method in java
3) can we declare protected abstract method in abstract class
4) can we declare protected abstract method in interface and if not what is reason?
--------------------------------------------------------------------------------------------------------------
1)  can overload the constructor in java?
2) can override the constructor in java and if not what is reason?
3) can we declare abstract constructor in abstract class and if not what is reason?
4) can we declare abstract constructor in interface and if not what is reason?
--------------------------------------------------------------------------------------------------------------
1) can we declare constructor in abstract class
2) can we declare constructor in interface
--------------------------------------------------------------------------------------------------------------
Encapsulation																VVVVIMMMPPPPPPPPP
--------------------------------------------------------------------------------------------------------------
	- it is process of wrapping the code and data in single unit.
	- in Encapsulation process, we can access the private fields in another class by using getter() and setter() method
	- by using Encapsulation process we control over on data.
	- Encapsulation is technique to making the field as private and providing control over the data.
	
--------------------------------------------------------------------------------------------------------------
Where you have used Encapsulation concept in Framework?				VVVVIMMMPPPPPPPPP
	- we use Encapsulation concept in page Layer package in src/main/java as well as Test Layer package in src/test/java.
	- in Page Layer package we declare all the object repository as private.
	- and also in Test layer package we declare all object as private.
--------------------------------------------------------------------------------------------------------------

public class Demo1
{
	private String variableName="value";

	//getter method

	public String getVariableName()
	{
		return variableName;
	}

	public void setVariableName(String newVariableName)
	{
			variableName= newVariableName;
	}
}
	
package Tutorial5;

public class Demo1 {

	private String fname = "Amruta";

	String lname = "Patil";

	// non static method with String return type: getter() method

	public String getFname() {
		return fname;
	}

	/// non static method without return type and 1 string arguments : setter()
	/// method
	public void setFname(String newFname) {
		// re-assign value for fname variable
		fname = newFname;
	}

}

package Tutorial5;

public class Sample1 extends Demo1{

	public static void main(String[] args) {
		Sample1 obj =new Sample1();
		
		System.out.println(obj.lname);
		
		String a= obj.getFname();
		System.out.println(a);//Amruta
		
		obj.setFname("Pravin");//set new name
		
		String b = obj.getFname();
		System.out.println(b);//Pravin
	}
}
=================================================================

package Tutorial5;

public class Demo2 {
	
	private int numbers=9090;
	
	//getter() method
	public int getNumbers()
	{
		return numbers;
	}
	
	//setter() method
	public void setNumbers(int newNumbers)
	{
		numbers=newNumbers;
	}
	

}

package Tutorial5;

public class Sample2 {
	
	public static void main(String[] args) {
		
		Demo2 obj =new Demo2();
		int a = obj.getNumbers();
		System.out.println(a);
		
		obj.setNumbers(8888);
		
		int b = obj.getNumbers();
		System.out.println(b);
	}

}
============================================================================
package Tutorial5;

public class Demo3 {

	private String firstName = "Rahul";

	private String lastName = "Patil";

	private int age = 25;

	// getter() method
	public String getFirstName() {
		return firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public int getAge() {
		return age;
	}

	// setter() method
	public void setFirstName(String newFirstName) {
		firstName = newFirstName;
	}

	public void setLastName(String newLastName) {
		lastName = newLastName;
	}

	public void setAge(int newAge) {
		age = newAge;
	}

}

package Tutorial5;

public class Sample3 {

	
	public static void main(String[] args) {
		Demo3 obj =new Demo3();
		System.out.println(obj.getFirstName());
		System.out.println(obj.getLastName());
		System.out.println(obj.getAge());
		
		obj.setFirstName("Amit");
		obj.setLastName("Pandit");
		obj.setAge(27);
		
		System.out.println(obj.getFirstName());
		System.out.println(obj.getLastName());
		System.out.println(obj.getAge());
	}
}
-----------------------------------------------------------------------
package Tutorial5;

public class Sample3 extends Demo3 {

	public static void main(String[] args) {
		Sample3 obj = new Sample3();
		System.out.println(obj.getFirstName());
		System.out.println(obj.getLastName());
		System.out.println(obj.getAge());

		obj.setFirstName("Amit");
		obj.setLastName("Pandit");
		obj.setAge(27);

		System.out.println(obj.getFirstName());
		System.out.println(obj.getLastName());
		System.out.println(obj.getAge());
	}
}
==================================================================

public class Demo5
{

	private void abc()
	{
			System.out.println("abc private method");
	}

	public void xyz()
	{
			abc();
	}

}
public class Sample5
	{
			public static void main(String [] args)
			{
						Demo5 obj =new Demo5();
						obj.xyz();
			}
}
----------------------------------------------------------------------------------------
package Tutorial5;

public class Demo5 {

	private void abc() {
		System.out.println("ABC Private method");
	}

	public void xyz() 
	{
		abc();
	}

}

package Tutorial5;

public class Sample5 {
	
	public static void main(String[] args) {
		
		Demo5 obj =new Demo5();
		obj.xyz();
		
	}

}
========================================================================
	package Tutorial5;

public class Demo4 {

	private void loginFunctionality() {

		System.out.println("Private Login Functionality Username");
		System.out.println("Private Login Functionality Password");

	}

	public void getLoginFunctionality() {
		loginFunctionality();
	}

}

package Tutorial5;

public class Sample4 {

	
	public static void main(String[] args) {
		Demo4 obj =new Demo4();
		obj.getLoginFunctionality();
	}
}
-------------------------------------------------------------------
package Tutorial5;

public class Demo6 {

	
	private void addEmployee(String firstName,String lastName)
	{
		System.out.println("Private Add Employee First Name is "+firstName);
		System.out.println("Private Add Employee Last Name is "+lastName);
	}
	
	public void getAddEmployee(String newFirstName,String newLastName)
	{
		addEmployee(newFirstName, newLastName);
	}
	
}

package Tutorial5;

public class Sample6 {

	public static void main(String[] args) {
		Demo6 obj = new Demo6();
		obj.getAddEmployee("Dipali", "Kulkarni");

	}

}
================================================================
















































