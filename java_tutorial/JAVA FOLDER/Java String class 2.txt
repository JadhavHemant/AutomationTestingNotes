String methods in java
------------------------------------------------------------------------------------------------
1) length() method
2) toUpperCase() method
3) toLowerCase() method
4) startsWith()method
5) endsWith() method
6) contains() method
----------------------------------------------------------------------------------------------------
7) equals() method
		- it used to compare the 2 different Object.
		- return type is boolean. 
		- it used to compare the ""actual content of the String/object".
		
	syntax:
				String a="selenium";
				String b= "Selenium";
				boolean c = a.equals(b);
				System.out.println(c);


8) equalsIgnoreCase() method
		- it is compare the 2 different String and it will ignore upper case and lower case.
		- return type is boolean.
		- it used to compare the actual content of string and it will ignore upper case and lower case.
syntax:
			
				String a="selenium";
				String b= "SELENIUM";

				boolean c = a.equalsIgnoreCase(b);
				System.out.println(c);


9) == operator
		- it used to compare the different objects.
		- return type is boolean
		- this method is used to compare the """memory location of String/object.""".

	syntax:
				String a="selenium";
				String b= "selenium";
			
				System.out.println(a==b);

-----------------------------------------------------------------------------------------------------------
Diff between equals() and == operator				VVVVVIMMMPPPPPP
-----------------------------------------------------------------------------------------------------------
package StringTutorial2;

public class Demo1 {

	public static void main(String[] args) {
		String a="selenium";
		String b="selenium";
		
		boolean c = a.equals(b);
		System.out.println(c);//true
		
		boolean d = a.equalsIgnoreCase(b);
		System.out.println(d);//true
		
		System.out.println(a==b);//true
		

	}

}
-----------------------------------------------------------------------------------------------------------
package StringTutorial2;

public class Demo2 {

	public static void main(String[] args) {
		String c="selenium";//SCP Memory ---> same Memory location---> same Memory location
		String d="selenium";//SCP Memory---> same Memory location
		
		//Heap Memory--- different Memory location
		String a = new String("selenium");
		String b = new String("selenium");
		
		System.out.println(a.equals(b));//true
		System.out.println(a==b);//false

		
		System.out.println(c.equals(d));//true
		System.out.println(c==d);//true
		
	}

}
-----------------------------------------------------------------------------------------------------------
10) concat() method
		- it used to combine the 2 different string
		- return type is String.

syntax:
			String a="selenium";
			String b="testing";

			String c = a.concat(b);
			System.out.println(c);

11) combine the string using + operator
		- we can combine any values using + operator.

	syntax:
			String a="selenium";
			String b="testing";
			String c = a+b;
			System.out.println(c);

package StringTutorial2;

public class Demo3 {

	public static void main(String[] args) {
		String a="selenium";
		String b="testing";
		
		String c = a.concat(b);
		System.out.println(c);
		
		String d= a+b;
		System.out.println(d);
		

	}

}
-----------------------------------------------------------------------------------------------------------
package StringTutorial2;

public class Demo4 {

	public static void main(String[] args) {
		
		System.out.println(10+10);//20
		
		System.out.println(10+10+"selenium");//20selenium
		
		System.out.println(10+"selenium"+10);//10selenium10
		//String + int = String
		System.out.println("selenium"+10);//selenium10
		
		System.out.println("selenium"+10+10);//selenium1010

	}

}
-----------------------------------------------------------------------------------------------------------
package StringTutorial2;

public class Demo5 {

	public static void main(String[] args) {
	
		System.out.println(10+"java"+10);//10java10
		
		System.out.println("java"+(10));//java10

		System.out.println("java"+ (10+10));//java20
		
		System.out.println("java"+10+10);//java1010
		
	}

}
-----------------------------------------------------------------------------------------------------------
12) charAt() method
	- it used to capture the character as per the index position.
	- return type is char datatype.
	
syntax:
			String a="Pune";

			char b = a.charAt(2);

			System.out.println(b);
		
package StringTutorial2;

public class Demo6 {

	public static void main(String[] args) {
		
		String a="Pune";
		
		System.out.println(a.charAt(3));//e
		System.out.println(a.charAt(2));//n
		System.out.println(a.charAt(1));//u
		System.out.println(a.charAt(0));//P
	}

}
-----------------------------------------------------------------------------------------------------------
Reverse String using charAt() method								VVVVVVVVIMPPPPPPPPPPPPP
-----------------------------------------------------------------------------------------------------------
package StringTutorial2;

public class Demo6 {

	public static void main(String[] args) {
		//enup
		String a="selenium";
		
		int p = a.length()-1;//7
		
		
		for(int i=p;i>=0;i--)
		{
			char b = a.charAt(i);
			System.out.print(b);//muineles
		}
		
		
	}

}
-----------------------------------------------------------------------------------------------------------
package StringTutorial2;

public class Demo7 {

	public static void main(String[] args) {
		
		String a="cucumber";
		
		int b = a.length()-1;
		
		for(int i=b;i>=0;i--)
		{
			char c = a.charAt(i);
			System.out.print(c);
		}
		
		

	}

}
-----------------------------------------------------------------------------------------------------------
13) trim() method
	- it used to remove space from the start and end of string.
	- return type is string.
syntax:
		String a="		selenium 		testing		";
		
		String b = a.trim();
		
		System.out.print(b);

package StringTutorial2;

public class Demo8 {

	public static void main(String[] args) {
		String a="	selenium 	testing		";
		System.out.println(a);
		
		String b = a.trim();
		System.out.println(b);
		
		

	}

}
------------------------------------------------------------------------------------------------
14) replace() method
		- it used to replace the String.
		- return type is string.

syntax:
		String a="selenium testing";

		String b = a.replace("selenium","cucumber");

		System.out.println(b);//cucumber testing

package StringTutorial2;

public class Demo9 {

	public static void main(String[] args) {
		String a="selenium testing selenium";
		
		String b = a.replace("selenium", "cucumber");
		System.out.println(b);
	}

}
----------------------------------------------------------------------------------------
15) replaceAll() method
		it used to replace the string
		return type is string
	

syntax:
		String a="selenium testing";

		String b = a.replaceAll("selenium","cucumber");

		System.out.println(b);//cucumber testing

package StringTutorial2;

public class Demo9 {

	public static void main(String[] args) {
		String a="selenium testing selenium";
		
		String b = a.replaceAll("selenium", "cucumber");
		System.out.println(b);
	}

}
-----------------------------------------------------------------------------------
package StringTutorial2;

public class Demo10 {

	public static void main(String[] args) {
		//remove the 2 or more space in between words
		String a="selenium	testing";
		
		String b= a.replaceAll("\\s+", " ");
		System.out.println(b);
		

	}

}
-----------------------------------------------------------------------------------
package StringTutorial2;

public class Demo11 {

	public static void main(String[] args) {
	
		String a="	ui 	cucumber	testing  ";	
		
		String b = a.trim();
		System.out.println(b);
		
		String c = b.replaceAll("\\s+", " ");
		System.out.println(c);

	}

}
------------------------------------------------------------------------------------------------------------------------------------------------------------
Remove the Starts, mid and ending space and reverse the string				VVVVVVVVVIMMMMPPPPPP
package StringTutorial2;

public class Demo11 {

	public static void main(String[] args) {
	
		String a="	ui 	cucumber	testing  ";	
		
		String b = a.trim().replaceAll("\\s+", " ");
		System.out.println(b);
		
		
		int c = b.length()-1;
		
		for(int i=c;i>=0;i--)
		{
			System.out.print(b.charAt(i));
		}
		
	}

}
------------------------------------------------------------------------------------------------------------------------------------------------------------
16) subString() method
	-  it return the string based on index position.
	- return type is string.
	
syntax:
		String a="selenium";

		String b = a.subString(6);	//it will print string from index position 6 to end of string.
		
		System.out.println(b);//um

		String c = a.subString(0,3);

		System.out.println(b);//sel	//it will print string from index position 0 to 3-1 (2) index position.


package StringTutorial2;

public class Demo12 {

	public static void main(String[] args) {
		
		String a="selenium";
		
		System.out.println(a.substring(4));//nium
		
		System.out.println(a.substring(0,5));//selen
		
		System.out.println(a.substring(0));//selenium

		System.out.println(a.substring(3));//enium
		
		System.out.println(a.substring(4,7));//niu
	}

}
--------------------------------------------------------------------------------------------------------------
// Swap the String using third variables								VVVVVIMMMPPPPPPPPPPPP
--------------------------------------------------------------------------------------------------------------
package StringTutorial2;

public class Demo13 {

	public static void main(String[] args) {
		// Swap the String using third variables
		String a="java";
		
		String b="selenium";
		
		String c=a;

		a=b;
		System.out.println(a);
		
		b=c;
		System.out.println(b);
		
	}

}
--------------------------------------------------------------------------------------------------------------
17) indexOf() method
	- this method is used to find the first index of specific character.
	- return type int

syntax:
			String a="selenium";
			
			int  b = a.indexOf('e');
		
			System.out.println(b);

18) lastIndexOf() method
	-  this method is used to find the last index of specific character.
		- return type int

syntax:
			String a="selenium";
			
			int  b = a.lastIndexOf('e');
		
			System.out.println(b);


package StringTutorial2;

public class Demo14 {

	public static void main(String[] args) {
		String a="java";
		
		System.out.println(a.indexOf('a'));//
		
		System.out.println(a.lastIndexOf('a'));

	}

}

==============================================
19) valueOf() method
	- it convert the any datatype values into the string.
	- return type is string.
		
syntax:
		int a=100;

		String  b = String.valueOf(a);
		
		System.out.println(b);

package StringTutorial2;

public class Demo15 {

	public static void main(String[] args) {
		
		int a=100;
		
		String b = String.valueOf(a);
		System.out.println(b);
		
	}

}

package StringTutorial2;

public class Demo15 {

	public static void main(String[] args) {
		
		boolean a=true;
		
		String b = String.valueOf(a);
		System.out.println(b);
		
	}

}

package StringTutorial2;

public class Demo15 {

	public static void main(String[] args) {
		
		char a='p';
		
		String b = String.valueOf(a);
		System.out.println(b);
		
	}

}
================================================================================
package StringTutorial2;

public class Demo16 {

	public static void main(String[] args) {
		String a="selenium";
		String b="selenium";
		System.out.println(a.length());//8
		System.out.println(a.toUpperCase());//SELENIUM
		System.out.println(a.toLowerCase());//selenium
		System.out.println(a.startsWith("sel"));//true
		System.out.println(a.endsWith("um"));//true
		System.out.println(a.contains("ni"));//true
		System.out.println(a.equals(b));//true
		System.out.println(a.equalsIgnoreCase(b));//true
		System.out.println(a==b);//true
		System.out.println(a.concat(b));//seleniumselenium
		System.out.println(a+b);//seleniumselenium
		System.out.println(a.charAt(5));//i
		System.out.println(a.trim());//selenium
		System.out.println(a.replace("sel", "cucumber"));//cucumberenium
		System.out.println(a.replaceAll("cucumber", "sel"));//selenium
		System.out.println(a.substring(5));//ium
		System.out.println(a.substring(0,5));//selen
		System.out.println(a.replace("\\s+", " "));//selenium
		System.out.println(a.indexOf('e'));//1
		System.out.println(a.lastIndexOf('e'));//3
		
		

	}

}
======================================================================
package StringTutorial2;

public class Demo16 {

	public static void main(String[] args) {
		String a="selenium";
		String b="selenium";
		System.out.println(a.length());//8
		System.out.println(a.toUpperCase());//SELENIUM
		System.out.println(a.toLowerCase());//selenium
		System.out.println(a.startsWith("sel"));//true
		System.out.println(a.endsWith("um"));//true
		System.out.println(a.contains("ni"));//true
		System.out.println(a.equals(b));//true
		System.out.println(a.equalsIgnoreCase(b));//true
		System.out.println(a==b);//true
		System.out.println(a.concat(b));//seleniumselenium
		System.out.println(a+b);//seleniumselenium
		System.out.println(a.charAt(5));//i
		System.out.println(a.trim());//selenium
		System.out.println(a.replace("sel", "cucumber"));//cucumberenium
		System.out.println(a.replaceAll("cucumber", "sel"));//selenium
		System.out.println(a.substring(5));//ium
		System.out.println(a.substring(0,5));//selen
		System.out.println(a.replace("\\s+", " "));//selenium
		System.out.println(a.indexOf('e'));//1
		System.out.println(a.lastIndexOf('e'));//3
		System.out.println(String.valueOf(100.34f));//100.34
		
	
	}

}
========================================================================

































