What is JavascriptExecutor interface in selenium?
		- JavascriptExecutor it an interface in selenium WebDriver.
		- it is used to perform operation web page object and browser based operations.
		- JavascriptExecutor it helps to execute javascript language through selenium WebDriver.
		- JavascriptExecutor it define 2 methods 
						1) executeScript() method
						2) executeAsyncScript() method

		- we use executeScript() method to perform operation web page
		- by using JavascriptExecutor interface we can perform different operation as like
						i) click on element
						ii) send text to the text box
						iii) handle the drop down
						iv) open a url
						v) we can navigate back
						vi) we can navigate forward
						vii) we can refresh the browser
						viii) capture the title
						ix) capture URL
						x) change the element background colour
						xi) scroll up and scroll down 
						xii) generate the alert pop up 
														etc..
----------------------------------------------------------------------------------------------------------------------------------------------------
i) click on element
		there are 2 ways we can click on element by using JavascriptExecutor interface
				i) by using arguments[0].click() method
				ii) by using getElementById('id value').click() method
-------------------------------------------------------
			i) by using arguments[0].click() method
						- find the web element in HTML DOM structure.
								WebElement wb = driver.findElement(By.name("name value"));

						- Convert WebDriver object into the JavascriptExecutor
								JavascriptExecutor js = (JavascriptExecutor)driver;

						- use executeScript() method by passing arguments[0].click() method and WebElement instance from JavascriptExecutor 							interface
					
							js.executeScript("arguments[0].click();", wb);
				

			Scenario 1: 
						open a url https://demoqa.com/automation-practice-form
						find and click on female radio button using JavascriptExecutor interface

			Step 1: connect to actual browser
			Step 2: up casting
						WebDriver driver =new ChromeDriver();

			step 3: open a url
						driver.get("https://demoqa.com/automation-practice-form");

			step 4: find the female radio button
						WebElement wb = driver.findElement(By.id("gender-radio-2"));

			step 5: convert the WebDriver object into the JavascriptExecutor
						JavascriptExecutor js = (JavascriptExecutor)driver;					
	
			step 6: use executeScript() method by passing arguments[0].click() and  WebElement instance
			
					js.executeScript("arguments[0].click();", wb);


package JavascriptExecutorTutorial1;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo1 {

	public static void main(String[] args) throws InterruptedException {
		// Step 1: connect to actual browser

		// step 2: up casting
		WebDriver driver = new ChromeDriver();

		// step 3: open a url
		driver.get("https://demoqa.com/automation-practice-form");

		Thread.sleep(5000);
		// step 4: find the female radio button
		WebElement wb = driver.findElement(By.id("gender-radio-2"));

		// step 5: convert the WebDriver object into the JavascriptExecutor
		JavascriptExecutor js = (JavascriptExecutor) driver;

		// step 6: use executeScript() method by passing arguments[0].click() and
		// WebElement instance

		js.executeScript("arguments[0].click();", wb);

	}

}
-------------------------------------------------------
		ii) by using getElementById('id value').click() method
					- document.getElementById().click() method it will find th element in web page and it will click on it.
					- if u want to use getElementById() method then inside HTML DOM structure id should be present.
			syntax
					- convert the WebDriver Object into the JavascriptExecutor 
							JavascriptExecutor js = (JavascriptExecutor)driver;
	
					- use executeScript() method by passing document.getElementById('id value').click() method. 
							js.executeScript("document.getElementById('id value').click();");

			Scenario: 	
					open a url https://demoqa.com/automation-practice-form
					find the element and click on it using JavascriptExecutor 

			Step 1: connect to actual browser
			Step 2: up casting
					WebDriver driver =new ChromeDriver();
			Step 3: open a url
					driver.get("https://demoqa.com/automation-practice-form");

			step 4: convert the WebDriver object into the JavascriptExecutor 
					JavascriptExecutor js = (JavascriptExecutor)driver;

			step 5: use executeScript() method by passing document.getElementById('id value').click() method
					js.executeScript("document.getElementById('gender-radio-3').click();");	
				
package JavascriptExecutorTutorial1;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo2 {

	public static void main(String[] args) throws InterruptedException {

		// Step 1: connect to actual browser

		// step 2: up casting
		WebDriver driver = new ChromeDriver();

		// step 3: open a url
		driver.get("https://demoqa.com/automation-practice-form");

		Thread.sleep(5000);
		// step 4: convert the WebDriver object into the JavascriptExecutor
		JavascriptExecutor js = (JavascriptExecutor) driver;

		// step 5: use executeScript() by passing document.getElementById('id
		// value').click();

		js.executeScript("document.getElementById('gender-radio-3').click();");

	}

}
=====================================================================================================
2) Enter value in text box using JavascriptExecutor interface
			there are 2 ways we can enter value in text box using JavascriptExecutor interface
				i) arguments[0].value='expected text' attribute
				ii) document.getElementById('id value').value='expected value' attribute

			i) arguments[0].value='expected text' attribute
					- find the element in web page using findElement() method
						WebElement wb = driver.findElement(By.id(""));

					- convert the WebDriver Object into the JavascriptExecutor
						JavascriptExecutor js = (JavascriptExecutor)driver;
				
					- use executeScript() method by passing arguments[0].value='Anjali' and WebElement instance
		
						js.executeScript("arguments[0].value='Anjali';", wb);


		Scenario 1:
				open a https://demoqa.com/automation-practice-form
				find first name text box and enter Anjali value using JavascriptExecutor interface.

		Step 1:connect to actual browser
		step 2: up casting
					WebDriver driver =new ChromeDriver();
		Step 3: open a url
					driver.get("https://demoqa.com/automation-practice-form");

		step 4: find the first name text box
					WebElement wb = driver.findElement(By.id('firstName'));

		step 5: convert the WebDriver object into JavascriptExecutor
					JavascriptExecutor js = (JavascriptExecutor)driver;

		step 6: use executeScript() method by passing arguments[0].value='expected value' and WebElement instance
				
					js.executeScript("arguments[0].value='Anjali';", wb);
			
package JavascriptExecutorTutorial1;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo3 {

	public static void main(String[] args) throws InterruptedException {
		// Step 1: connect to actual browser

		// step 2: up casting
		WebDriver driver = new ChromeDriver();

		// step 3: open a url
		driver.get("https://demoqa.com/automation-practice-form");

		Thread.sleep(5000);

		// step 4: find first name text box
		WebElement wb = driver.findElement(By.id("firstName"));

		// step 5: convert WebDriver object into the JavascriptExecutor

		JavascriptExecutor js = (JavascriptExecutor) driver;

		// step 6: use executeScript() method by passing arguments[0].value='Anjali' and
		// WebElement instance

		js.executeScript("arguments[0].value='Anjali';", wb);
	}

}
---------------------------------------------------------------------------------------------------------------------
		ii) document.getElementById('id value').value='expected value' attribute
					-  document.getElementById().value attribute it will find the element in web page and it will enter the text
					- if u want to use getElementById() method then inside HTML DOM structure id should be present.

					- convert the WebDriver object into the JavascriptExecutor 
							JavascriptExecutor js = (JavascriptExecutor)driver;

					- use executeScript() method by passing document.getElementById('id value').value='Expected value';

							js.executeScript("document.getElementById('id value').value='Expected value';");


				Scenario 2: 
						open a https://demoqa.com/automation-practice-form
						find and enter value using JavascriptExecutor 

				Step 1: connect the actual browser
				Step 2: up casting	
							WebDriver driver =new ChromeDriver();

				step 3: open a url
							driver.get("https://demoqa.com/automation-practice-form");

				step 4: convert the WebDriver object into the JavascriptExecutor 
							JavascriptExecutor js = (JavascriptExecutor)driver;

				step 5: use executeScript() method by passing document.getElementById('id value').value='Expected value';
							js.executeScript("document.getElementById('firstName').value='Pooja';");


package JavascriptExecutorTutorial1;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo4 {

	public static void main(String[] args) throws InterruptedException {
		// Step 1: connect to actual browser

		// step 2: up casting
		WebDriver driver = new ChromeDriver();

		// step 3: open a url
		driver.get("https://demoqa.com/automation-practice-form");

		Thread.sleep(5000);
		
		//step 4: convert the WebDriver object into the JavascriptExecutor 
		JavascriptExecutor js = (JavascriptExecutor)driver;
	
		//step 5: use executeScript() method by passing document.getElementById('id value').value='Expected value'

		js.executeScript("document.getElementById('firstName').value='Pooja';");
	}

}
==========================================================================================
3) open a url using JavascriptExecutor interface.
		-if u want to open a url by using JavascriptExecutor interface then use window.location='expected url' attribute.

		- first we have to convert WebDriver object into the JavascriptExecutor
						JavascriptExecutor js = (JavascriptExecutor)driver;

		- then use executeScript() method  by passing window.location='expected value' attribute
						js.executeScript("window.location='URL';");

		Scenario 1;
				open facebook url using JavascriptExecutor
			

		step 1: connect browser
		step 2: up casting
					WebDriver driver = new ChromeDriver();

		step 3: convert WebDriver Object into the JavascriptExecutor
					JavascriptExecutor js = (JavascriptExecutor)driver;

		step 4: use executeScript() method by passing window.location='expected url' attribute
					js.executeScript("window.location='https://www.facebook.com';");


package JavascriptExecutorTutorial1;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo5 {

	public static void main(String[] args) {
		// Step 1: connect to actual browser

		// step 2: up casting
		WebDriver driver = new ChromeDriver();

		// step 3: convert WebDriver object into JavascriptExecutor
		JavascriptExecutor js = (JavascriptExecutor) driver;

		// step 4: use executeScript() method by passing window.location='url';
		js.executeScript("window.location='https://www.facebook.com';");
	}

}
-----------------------------------------------------------------------------------------
4) open a url in new tab using JavascriptExecutor interface.
		- if u want to open a new tab with url by using JavascriptExecutor then we use window.open('expected url') method

		- convert the WebDriver object into JavascriptExecutor
				JavascriptExecutor js = (JavascriptExecutor)driver;

		- use executeScript() method by passing window.open('expected url')
				js.executeScript("window.open('url');");

		
		Scenario: 	
				open a google url
				and open new tab with fb url using  JavascriptExecutor

		Step 1: connect browser
		Step 2: up casting		
					WebDriver driver =new ChromeDriver();
		step 3: open url
					driver.get("https://www.google.com");

		step 4: convert the WebDriver object into JavascriptExecutor
					JavascriptExecutor js = (JavascriptExecutor)driver;

		step 5: use executeScript()method by passing window.open('expected url') method
					js.executeScript("window.open('https://www.facebook.com');");
	 

package JavascriptExecutorTutorial1;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo6 {

	public static void main(String[] args) throws InterruptedException {
		// Step 1: connect to actual browser

		// step 2: up casting
		WebDriver driver = new ChromeDriver();

		// open a url
		driver.get("https://www.google.com");

		Thread.sleep(5000);

		// convert the WebDriver object into the JavascriptExecutor
		JavascriptExecutor js = (JavascriptExecutor) driver;

		// use executeScript() method by passing window.open('expected url')
		js.executeScript("window.open('https://www.facebook.com');");
	}

}
========================================================================
incognito mode
open a https://www.saucedemo.com/ using JavascriptExecutor
maximize
implicitly wait
				driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
explicit wait
take screenshot
enter firstname and last name using JavascriptExecutor
click on login using JavascriptExecutor
click 3 add to cart button using JavascriptExecutor
click on container using JavascriptExecutor
click on checkout button JavascriptExecutor
enter first name, last name and pin code using JavascriptExecutor
click on continue button JavascriptExecutor
click on finish using JavascriptExecutor
click on back using JavascriptExecutor
click on menu JavascriptExecutor
take full screenshot using AShot maven dependency
click on logout

========================================================================
click on element
			js.executeScript("arguments[0].click();", wb);
			js.executeScript("document.getElementById('id value').click();");

enter text in text box
			js.executeScript("arguments[0].value='Expected value';", wb);
			js.executeScript("document.getElementById('id value').value='Expected value';");

open a url
			js.executeScript("window.location='Expected URL';");

open url in new tab
			js.executeScript("window.open('Expected url');");
			
========================================================================


































































