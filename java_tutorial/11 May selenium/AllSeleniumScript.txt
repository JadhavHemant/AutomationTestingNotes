//Connect to actual browser
	System.setProperty("webdriver.chrome.driver", "path of chromedriver.exe");

//up casting
	WebDriver driver = new ChromeDriver();

//open a url
		driver.get("https://www.google.com");

//Capture title of browser window
		String s =driver.getTitle();
		System.out.println(s);

//Capture the current URL
		String a = driver.getCurrentUrl();
		System.out.println(a);

//Navigation Interface Methods
1) driver.navigate().to("https://www.google.com"); //navigate from one url to another url
2) driver.navigate().back(); //navigate one step back in browser history
3) driver.navigate().forward(); //navigate one step forward in browser history
4) driver.navigate().refresh(); //reload or refresh the browser

TargetLocator Interface
1) driver.switchTo().newWindow(WindowType.TAB);//open a new tab
2) driver.switchTo().newWindow(WindowType.WINDOW); //open  a new window

//close the window
	driver.close();
// close all window
	driver.quit();

//maximize, minimize and fullscreen the window
1) driver.manage().window().maximize();// maximize the window
2) driver.manage().window().minimize(); //minimize the window
3) driver.manage().window().fullScreen()l //fullscreen the window

//change the browser dimension using Dimension class object

Dimension d = new Dimension(500,700);
driver.manage().window().setSize(d);

//Open browser in incognito mode
//create the object of ChromeOptions class
	ChromeOptions opt = new ChromeOptions();

//use addArguments() method
	opt.addArguments("--incognito");

// upcasting by passing object of ChromeOptions class
	WebDriver driver = new ChromeDriver(opt);

//Locators in Selenium
//There are 8 types of locator in selenium
1) id()
2) name()
3) className()
4) tagName()
5) cssSelector()
6) linkText()
7) partialLinkText()
8) xpath()

//find single element in webpage by using given locator
	
	WebElement wb = driver.findElement(By.id("id value"));

//enter a value in text box
		wb.sendKeys("Ganesh");

//To check element is displayed or not in webpage
		boolean a = wb.isDisplayed();
		System.out.println(a);

//To check element is Enabled or not
		boolean b = wb.isEnabled();
		System.out.println(b);

//To check element is selected or not
		boolean c =wb.isSelected();
		System.out.println(c);

//capture the physical text
		String abc = wb.getText();
		System.out.println(abc);

//Verify the entered text by using inner HTML attribute value by passing key name
		String pqr = wb.getAttribute("value");
		System.out.prinln(pqr);

//click on element
		wb.click();

//clear the entered text
		wb.clear();

//Drop down methods
//find drop down element by using given locator
		WebElement wb = driver.findElement(By.id("id value"));

//create the object of select class by passing webElement instance
		Select sel = new select(wb);

//there are 5 methods of select class
1) To select the drop down value
		sel.selectByVisibleText("Mar");

2) To select the index value
		sel.selectByIndex(3);

3) to select innerHTML value
		sel.selectByValue("6");

4) Capture all elements of drop down
		List<WebElement> ls = sel.getOptions();
		int a = ls.size();

5) verify selected value from dropdown
		WebElement wb = sel.getFirstSelectedOption();
		String lmn = wb.getText();
		System.out.prinln(lmn);

// Alert pop up methods
//switch the focus from main window to pop up window by using alert()

	Alert alt = driver.switchTo.alert();
//there are 4 methods
1) alt.accept(); //click on Ok button on popup window
2) alt.dismiss(); // click on  cancel button on popup window
3) alt.getText(); // capture the text from popup
4) alt.senKeys("abc");// send the text in alert popup

//xpath

There are 2 types of xpath
1) Absolute xpath
2) Relative xpath

Relative xpath(custom xpath or own xpath)
a) Search the element from middle of DOM HTML structure
	Syntax: 	//tagname[@attribute='value']

b) using text() method
	Syntax: 	//tagname[text()='text value']

c) using contains() method
	Syntax: 	//tagname[contains(@attribute, 'value')]

d) using 2 attributes
	Syntax: //tagname[@attribute='value'][text()='text value']

e) using OR operator
	Syntax: //tagname[@attribute='value' or @attribute = 'value']

f) using AND operator
	Syntax: 	//tagname[contains(@attribute, 'value') and text()='text value']

g) using starts-with method
	Syntax: //tagname[start-with(@attribute, 'value')]

xpath Axes in selenium

1) following keyword
		//tagname[@attribute='value']/following::tagname[text()='text value']

2) preceding keyword
		//tagname[@attribute='value']/preceding::tagname[contains(@attribute,'value')]

3) parent keyword
		//tagname[@attribute='value']/parent::tagname

4) child keyword
		//tagname[@attribute='value']/child::tagname

5) ancestor keyword
		//tagname[text()= 'text value']/ancestor::tagname

6) descendant keyword
		//tagname[contains(@attribute='value')]/descendant::tagname

Frame Methods
//switch the focus from current window to frame
1) driver.switchTo().frame("frame id"); // using frame id
2) driver.switchTo().frame("frame name"); //using frame name
3) driver.switchTo().frame(1); // by using index position
4) driver.switchTo().frame("frame element object "); //using frame element object

//switch focus from current frame to immediate parent frame
	driver.switchTo().parentFrame();
//switch focus to main/top frame
	driver.switchTo.defaultContent();

Web Tables
//Count how many rows in table
		List<Webelement> ls = driver.findElements(By.tagName("tr"));
		int a = ls.size();

// capture row values

		for(WebElement abc:ls)
		{
		String str = abc.getText();
		System.out.println(str);
		}

Action Class Events
1) mouse events
a) click on element
		WebElement wb = driver.findElement(By.id("id value"));

//create object of action class
	Action act = new Action(driver);
	act.click(wb).build().perform();

b) double click on element
	act.doubleClick(wb).build().perform();

c) right click on element
	act.contextClick(wb).build().perform();

d) mouse over the element without click
	act.moveToElement(wb).build().perform();


		











	


