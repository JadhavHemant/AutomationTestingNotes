---------------------------------------------------------------------------------------------------------------------------
what are the different methods we can't override in java?
 		1) static method
		2) main method
		3) private method
		4) final method
		5) constructor 
--------------------------------------------------------------------------------------------------------------------------
what are the different method we can't declare as abstract method in abstract class as well as in interface.
 		1) abstract static method
		2) abstract main method
		3) abstract private method
		4) abstract final method
		5) abstract constructor
---------------------------------------------------------------------------------------------------------------------------
Method Overriding:
-----------------------------------------------------------------------------------------------------------------------
	- Method Overriding is also called as run time polymorphism or dynamic binding or late binding.
	- If we any methods with same name with same signature with same return type present inside the child class and parent class is called method 	overriding.
	- same signature means
						I) number of arguments or parameter is same
						2) type of arguments or parameter is same
						3) order or sequence of arguments or parameter is same.
						4) access modifier should be same
						5) return type should be same

	- if u want to create relationship between child class and parent class we use extends keywords.
	- we achieve relationship between child and parent class class using inheritance concept.
	- we achieve the method overriding for non static method and abstract methods.
	- 






public class Demo1
{
			public void loginFunctionality(String username, String password)
			{
						System.out.println("operation using Web Element method");
			}		
		
		
		
}
public class Sample1 extends Demo1
{
			public void loginFunctionality(String username, String password)
			{
					System.out.println("operation using Actions method");
			}

		public static void main(String [] args)
			{
				Sample1 obj =new Sample1();
				obj.loginFunctionality("","");
			}

}
=======================================================================
we can override the 
				I ) public non static method
				2) protected non static method
				3) default non static method
---------------------------------------------------------------------------------------------------------------------
package Tutorial7;

public class Demo1 {

	public void abc()
	{
		System.out.println("ABC public method in Demo1 class");
	}

	protected void pqr() 
	{
		System.out.println("PQR protected method in Demo1 class");
	}

	void xyz() 
	{
		System.out.println("XYZ Default Method in Demo1 class");
	}

}


package Tutorial7;

public class Sample1 extends Demo1 {

	public void abc() 
	{
		System.out.println("ABC public method in Sample1 class");
	}

	protected void pqr() 
	{
		System.out.println("PQR protected method in Sample1 class");
	}

	void xyz() 
	{
		System.out.println("XYZ Default Method in Sample1 class");
	}

	public static void main(String[] args) {
		Sample1 obj = new Sample1();
		obj.abc();
		obj.pqr();
		obj.xyz();

	}

}
================================================================
we can override the
			I) abstract non static public method
			I) abstract non static protected method
			I) abstract non static default method
---------------------------------------------------------------------------------------------------------------------------------

package Tutorial7;

public abstract class Demo2 {
	
	public abstract void abc();
	
	protected abstract void pqr();
	
	abstract void xyz();
	
	

}

package Tutorial7;

public class Sample2 extends Demo2 {

	public void abc() {
		System.out.println("Abc public abstract method in Sample2 class");
	}

	protected void pqr() {
		System.out.println("PQR protected abstract method in Sample2 class");
	}

	void xyz() {
		System.out.println("XYZ default abstract method in Sample2 class");
	}

	public static void main(String[] args) {
		Sample2 obj = new Sample2();
		obj.abc();
		obj.pqr();
		obj.xyz();

	}

}
==================================================================
package Tutorial7;

public class Demo3 {

	private void abc() 
	{
		System.out.println("private non static abc method in Demo3 class");
	}

	private static void xyz() 
	{
		System.out.println("private static xyz method in Demo3 class");
	}

}


package Tutorial7;

public class Sample3 extends Demo3 {

	private void abc() 
	{
		System.out.println("private non static abc method in Sample3 class");
	}

	private static void xyz() 
	{
		System.out.println("private static xyz method in Sample3 class");
	}
	
	public static void main(String[] args) {
		Demo3 obj =new Demo3();
		obj.abc();
		obj.xyz();
	}

}

=============================================================
can we override the private non static method or private static method?
	No

why we can't override the private non static method or private static method?
	- if u want to achieve the method overriding we need at least 2 or more classes.
	- we have declare same private method in parent class as well as in child class but access scope of private method is within the class.
	- we can't access private method outside the class.

=============================================================
can we override the static method?
		No,

why we can't override the static method?
	- Because static method are bonded using static binding at compile time by compiler and method overriding is based dynamic binding at run time.
	- but we define same static method in parent class as well as in  child class with same signature then it is called as method hiding concept.

we can't override
	I) static public method
	2) static protected method
	3) static default method
	4) static private method
	5) static final public method
	6) static final protected method 
	7) static final default method
	8) static final private method

can we override the main method?
		No,

why we can't override the main method?
	- main method itself is static method
	- Because static method are bonded using static binding at compile time by compiler and method overriding is based dynamic binding at run time.
	- but we define same static method in parent class as well as in  child class with same signature then it is called as method hiding concept.




package Tutorial7;

public class Demo4 {
	
	public static void a1()
	{
		System.out.println("public static a1 method in Demo4 class");
	}
	
	protected static void a2()
	{
		System.out.println("protected static a2 method in Demo4 class");
	}
	
	static void a3()
	{
		System.out.println("default static a3 method in Demo4 class");
	}
	
	private static void a4()
	{
		System.out.println("private static a4 method in Demo4 class");
	}
	
	final public static void a5()
	{
		System.out.println("final public static a5 method in Demo4 class");
	}
	

	final protected static void a6()
	{
		System.out.println("final protected static a6 method in Demo4 class");
	}
	
	final static void a7()
	{
		System.out.println("final default static a7 method in Demo4 class");
	}
	
	final private static void a8()
	{
		System.out.println("final private static a8 method in Demo4 class");
	}
	

	
}

package Tutorial7;

public class Sample4 extends Demo4 {

	public static void a1() {
		System.out.println("public static a1 method in Sample4 class");
	}

	protected static void a2() {
		System.out.println("protected static a2 method in Sample4 class");
	}

	static void a3() {
		System.out.println("default static a3 method in Sample4 class");
	}

	private static void a4() {
		System.out.println("private static a4 method in Sample4 class");
	}

	// Syntax Error
//	final public static void a5() {
//		System.out.println("final public static a5 method in Sample4 class");
//	}
//
//	final protected static void a6() {
//		System.out.println("final protected static a6 method in Sample4 class");
//	}
//
//	final static void a7() {
//		System.out.println("final default static a7 method in Sample4 class");
//	}

	final private static void a8() {
		System.out.println("final private static a8 method in Sample4 class");
	}

	public static void main(String[] args) {
		Sample4 obj = new Sample4();
		obj.a1();
		obj.a2();
		obj.a3();
		obj.a4();
		obj.a5();
		obj.a6();
		obj.a7();
		obj.a8();

	}
}
=====================================================================================
can we override the final methods?
	no

why we can't override the final methods?
		- once we declare any methods as final method , we can't modify the method logic in child classes.
		- and method overriding concept it built on change the method logic in another class.

we can't override
		I) final non static public method
		2 final non static protected method
		3 final non static default method
		4 final non static private method
		5 final static public method
		6 final static protected method
		7 final static default method
		8 final static private method

package Tutorial7;

public class Demo5 {

	final public void d1()
	{
		System.out.println("final public non static d1 method in Demo5 class");
	}
	
	final protected void d2()
	{
		System.out.println("final protected non static d2 method in Demo5 class");
	}
	
	final void d3()
	{
		System.out.println("final default non static d3 method in Demo5 class");
	}
	
	final private void d4()
	{
		System.out.println("final private non static d4 method in Demo5 class");
	}
	
	final public static void d5()
	{
		System.out.println("final public static d5 method in demo5 class");
	}
	
	final protected static void d6()
	{
		System.out.println("final protected static d6 method in demo5 class");
	}
	
	final static void d7()
	{
		System.out.println("final default static d7 method in demo5 class");
	}
	
	final private static void d8()
	{
		System.out.println("final private static d8 method in demo5 class");
	}
	
	
	
	
}

package Tutorial7;

public class Sample5 extends Demo5{

//	final public void d1()
//	{
//		System.out.println("final public non static d1 method in Sample5 class");
//	}
//	
//	final protected void d2()
//	{
//		System.out.println("final protected non static d2 method in Sample5 class");
//	}
//	
//	final void d3()
//	{
//		System.out.println("final default non static d3 method in Sample5 class");
//	}
	
	final private void d4()
	{
		System.out.println("final private non static d4 method in Sample5 class");
	}
	
//	final public static void d5()
//	{
//		System.out.println("final public static d5 method in Sample5 class");
//	}
//	
//	final protected static void d6()
//	{
//		System.out.println("final protected static d6 method in Sample5 class");
//	}
//	
//	final static void d7()
//	{
//		System.out.println("final default static d7 method in Sample5 class");
//	}
	
	final private static void d8()
	{
		System.out.println("final private static d8 method in Sample5 class");
	}
	
	public static void main(String[] args) {
		Sample5 obj =new Sample5();
		obj.d1();
		obj.d2();
		obj.d3();
		obj.d4();
		obj.d5();
		obj.d6();
		obj.d7();
		obj.d8();
	}
	
	
	
}
------------------------===============================================
can we override the constructor?
	no

why we can't override the constructor?
	- because constructor name should be same as class name.
	and to achieve the overriding we have declare same constructor name should be present inside the parent class and child class.
	- and in java we can't create 2 classes with same name.

can can't override 
	I) public constructor
	2) protector constructor
	3) default constructor
	4) private constructor

----------------------------------------------------------------------------------------------
package Tutorial7;

public class Demo7 {

	private Demo7()
	{
		System.out.println("Demo7 class private 0 args cons");
	}
	
	protected Demo7(int a)
	{
		System.out.println("Demo7 class protected 1 int args cons");
	}
	
	Demo7(String a)
	{
		System.out.println("Demo7 class defaut 1 String args cons");
	}
	
	public Demo7(int a,int b)
	{
		System.out.println("Demo7 class public 2 int args cons");
	}
	
	
	
}

package Tutorial7;

public class Sample7 extends Demo7{
	
//	public Demo7()
//	{
//		System.out.println("Demo7 class public 0 args cons");
//	}
//	
//	protected Demo7(int a)
//	{
//		System.out.println("Demo7 class protected 1 int args cons");
//	}
//	
//	Demo7(String a)
//	{
//		System.out.println("Demo7 class default 1 String args cons");
//	}
//	
//	private Demo7(int a,int b)
//	{
//		System.out.println("Demo7 class private 2 int args cons");
//	}
//	
	
	public static void main(String[] args) {
		Demo7 obj =new Demo7();
		
		
		
	}
	

}











































