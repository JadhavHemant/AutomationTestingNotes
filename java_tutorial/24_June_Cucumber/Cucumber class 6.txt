	<!-- https://mvnrepository.com/artifact/com.aventstack/extentreports -->
		<dependency>
			<groupId>com.aventstack</groupId>
			<artifactId>extentreports</artifactId>
			<version>5.0.9</version>
		</dependency>


		<!--
		https://mvnrepository.com/artifact/tech.grasshopper/extentreports-cucumber7-adapter -->
		<dependency>
			<groupId>tech.grasshopper</groupId>
			<artifactId>extentreports-cucumber7-adapter</artifactId>
			<version>1.7.0</version>
		</dependency>
=============================================================================

Configure Extent Reports with Cucumber 
=============================================================================
	- Extent Adapter Reports is standard reporting library to generate the reports in cucumber BBD Framework.
	- By using Extent Adapter Reports we can generate HTML reports as well as we can attach the screenshot in reports.
	- To generate the Extent Reports we add extent-adapter dependency inside the pom.xml file as per the cucumber version.
	- and then we create extent.properties file inside the src/test/resources package and we do configuration in properties file and we mention reports plugin name inside the test runner class.

	
1) Create extent.properties file inside the src/test/resources
		
step 1: if we want to start generating extent reports use extent.reporter.spark.start key and value as true

syntax:
		extent.reporter.spark.start=true


step 2: if we want to store generated reports in destination location then use extent.reporter.spark.out as key and value as location

syntax;
		extent.reporter.spark.out=ExtenReports/abc.html



2) Inside the Test runner class and @CucumberOptions annotations we use plugin keyword and inside the plugin we pass value as com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:
	
	@RunWith(Cucumber.class)
	@CucumberOptions
				(
				features="src/test/java/Features",
				glue="StepDefinitions",
				plugin="com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:"
				)
	public class RunnerTest
	{

	}
========================================================================================
extent.properties  file in src/test/resources

1. store extent reports in base folder
	basefolder.name=ExtentReports/

2. crate current date and time folder inside the ExtentReports folder
	basefolder.datetimepatter = ddMMyyyy_HHmmss

3. start generating Extent HTML reports
	extent.reporter.spark.start=true

4.  stop generating reports
	extent.reporter.spark.out=/xyz.html

--------------------------------------------------------------------------
Extent PDF Reports

5. start generating pdf reports
	extent.reporter.pdf.start=true

6. store generated pdf reports in destination location
	extent.reporter.pdf.out=/abc.pdf
========================================================================================
7. Mention project name in reports by using systeminfo.AppName= application name 

	systeminfo.AppName=Orange HRM Application


8. mention build name or release name inside the reports
	
	systeminfo.build= Release 20.0 

9. mention the operating system name

	systeminfo.os=Window 11 OS


10. Mention Tester name

	systeminfo.User=Aboli Shinde

11. create screenshot folder
		
	screenshot.dir=/Screenshot/

12. store all screenshot from path

	screenshot.rel.path=../Screenshot/

=========================================================================

Take screenshot as per the scenario wise and attach screenshot to reports
- to take the takes the screenshot we use hooks annotations

	@After
	public static void teardown(Scenario scenario)
	{
		if(scenario.isFailed())
		{
					TakesScreenshot ts = (TakesScreenshot)driver;
					byte [] b = ts.getScreenshotAs(OutputType.BYTES);
					scenario.attach(b, "image/png","Screenshot name for failed Login Page Scenario")
		}			
		else
		{
					TakesScreenshot ts = (TakesScreenshot)driver;
					byte [] b = ts.getScreenshotAs(OutputType.BYTES);
					scenario.attach(b, "image/png","Screenshot name for Passed Login Page Scenario");
		}
	}

==========================================================
basefolder.name=ExtentReports/
basefolder.datetimepattern=ddMMyyyy_HHmmss
extent.reporter.spark.start=true
extent.reporter.spark.out=/extenteports.html

extent.reporter.pdf.start=true
extent.reporter.pdf.out=/extentreports.pdf

systeminfo.AppName=Orange HRM Application

systeminfo.Build=Release 20.0

systeminfo.OS=Window 11 64 bit

systeminfo.user=Aboli Shinde

screenshot.dir=Screenshot/

screenshot.rel.path=../Screenshot/



package StepDefinitions;

import java.io.File;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Date;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.cucumber.java.AfterStep;
import io.cucumber.java.Scenario;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class PIMPageStepsTest {
	static WebDriver driver;

	@Given("user is on login Page")
	public void user_is_on_login_page() {
		driver = new ChromeDriver();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.get("https://opensource-demo.orangehrmlive.com/web/index.php/auth/login");
	}

	@When("user enter valid username and password")
	public void user_enter_valid_username_and_password() {
		driver.findElement(By.name("username")).sendKeys("Admin");
		driver.findElement(By.name("password")).sendKeys("admin123");

	}

	@Then("user click on login button")
	public void user_click_on_login_button() {
		driver.findElement(By.xpath("//button[text()=' Login ']")).click();
	}

	@AfterStep
	public static void tearDown(Scenario scenario) throws Exception {
		Thread.sleep(4000);
		if (scenario.isFailed()) {
			TakesScreenshot ts = (TakesScreenshot) driver;
			byte[] b = ts.getScreenshotAs(OutputType.BYTES);
			scenario.attach(b, "image/png", "Login Scenario Failed Name");

			File src = ts.getScreenshotAs(OutputType.FILE);

			String date = new SimpleDateFormat("ddMMyyyy_HHmmss").format(new Date());

			FileUtils.copyFile(src, new File(System.getProperty("user.dir") + "//screenshot//" + date + ".png"));

		} else {

			TakesScreenshot ts = (TakesScreenshot) driver;

			byte[] b = ts.getScreenshotAs(OutputType.BYTES);

			scenario.attach(b, "image/png", "Login Scenario Passed Name");
			File src = ts.getScreenshotAs(OutputType.FILE);

			String date = new SimpleDateFormat("ddMMyyyy_HHmmss").format(new Date());

			FileUtils.copyFile(src, new File(System.getProperty("user.dir") + "//screenshot//" + date + ".png"));
		}
	}

}

======================================================================================











































