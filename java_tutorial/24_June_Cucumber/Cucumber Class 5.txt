What is use Background keyword in cucumber?
		- we use Backgound in feature file.
		- and it is used to mention pre condition for each and every scenario in feature file.
----------------------------------------------------------------------------------------------------------------------------------------------
What is Hooks in cucumber?
		- in cucumber Hooks annotation are used to mention the pre condition as well as post condition.
		- we declare these Hooks annotation inside the Step Definition file.		
		- there are different types of Hooks in cucumber
			1) Pre condition hooks
			2) Post Condition hooks

1) Pre condition hooks
		1) @BeforeAll
		2) @Before
		3) @BeforeStep

2) Post Condition hooks
		1) @AfterAll
		2) @After
		3) @AfterStep
----------------------------------------------------------------------------------------------------------------------------------------------
1) @BeforeStep
		- it is precondition for each and every in feature.
		- we declare @BeforeStep pre condition annotation in step definition files.

syntax:
			@BeforeStep
			public void setup()
			{
					//statement
			}


2) @AfterStep
		- it is post condition for each and every step in feature file.		
		- we declare @AfterStep post condition annotation in Step Definition file

syntax:
			@AfterStep
			public void teardown()
			{
					//statement
			}


Feature: Test Sauce Demo application

  Scenario: Validate Scenario1 all Functionality
    Given Scenario1 and Step1
    When Scenario1 and Step2
    Then Scenario1 and Step3


package StepDefinition;

import io.cucumber.java.AfterStep;
import io.cucumber.java.BeforeStep;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class SauceDemoSteps {

	@Given("Scenario1 and Step1")
	public void scenario1_and_step1() {
		System.out.println("Scenario1 and Step1");
	}

	@When("Scenario1 and Step2")
	public void scenario1_and_step2() {
		System.out.println("Scenario1 and Step2");
	}

	@Then("Scenario1 and Step3")
	public void scenario1_and_step3() {
		System.out.println("Scenario1 and Step3");
	}
	
	@BeforeStep
	public void setUp()
	{
		System.out.println("Before Step Annotation");
	}
	
	@AfterStep
	public void tearDown()
	{
		System.out.println("After Step Annotation");
		System.out.println("-------------------------------");
	}

}

package TestRunner;

import org.junit.runner.RunWith;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;

@RunWith(Cucumber.class)
@CucumberOptions(
		features="src/test/java/Features",
		glue="StepDefinition"
		)
public class RunnerTest {

}
=================================================================================
3) @Before pre condition Hooks annotation
		- it is precondition for each and every scenario in feature file
		- we use @Before Hooks pre condition annotation inside the Step Definition file

syntax:
			@Before
			public void setup()
			{
						//statement
			}


4) @After post condition Hooks annotation
		- it is post condition for each and every scenario in feature file
		- we declare @After hooks post condition annotation inside the Step Definition file

syntax:
			@After
			public void tearDown()
			{
						//statement
			}


Feature: Test Sauce Demo application

  Scenario: Validate Scenario_One all Functionality
    Given Scenario1 and Step1
    When Scenario1 and Step2
    Then Scenario1 and Step3

  Scenario: Validate Scenario_Two all Functionality
    Given Scenario2 and Step1
    When Scenario2 and Step2

  Scenario: Validate Scenario_Three all Functionality
    Given Scenario3 and Step1
    When Scenario3 and Step2

package StepDefinition;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class SauceDemoSteps {

	@Given("Scenario1 and Step1")
	public void scenario1_and_step1() {
		System.out.println("Scenario1 and Step1");
	}

	@When("Scenario1 and Step2")
	public void scenario1_and_step2() {
		System.out.println("Scenario1 and Step2");
	}

	@Then("Scenario1 and Step3")
	public void scenario1_and_step3() {
		System.out.println("Scenario1 and Step3");
	}

	@Given("Scenario2 and Step1")
	public void scenario2_and_step1() {
		System.out.println("Scenario2 and Step1");
	}

	@When("Scenario2 and Step2")
	public void scenario2_and_step2() {
		System.out.println("Scenario2 and Step2");
	}

	@Given("Scenario3 and Step1")
	public void scenario3_and_step1() {
		System.out.println("Scenario3 and Step1");
	}

	@When("Scenario3 and Step2")
	public void scenario3_and_step2() {
		System.out.println("Scenario3 and Step2");
	}

	@Before
	public void setUp() {
		System.out.println("Before Hooks Annotation");
	}

	@After
	public void tearDown() {
		System.out.println("After Hooks annotation");
		System.out.println("---------------------------------");
	}

}

package TestRunner;

import org.junit.runner.RunWith;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;

@RunWith(Cucumber.class)
@CucumberOptions(
		features="src/test/java/Features",
		glue="StepDefinition",
		dryRun=false
		)
public class RunnerTest {

}

==========================================================================
Note:
		******* these below hooks annotation present inside Cucumber above 6 version only
				if u want to use these annotation we have to use static methods in hooks annotation level.


5) @BeforeAll pre condition hooks annotation
		- it is pre condition for all the scenario in feature file
		- we declare @BeforeAll pre condition hooks annotation inside the Step Definition file

syntax:
		@BeforeAll
		public static void setup()
		{
				//statement
		}


6) @AfterAll post condition hooks annotation
		- it is post condition for all scenarios in feature file
		- we declare @AfterAll post condition hooks annotation inside the Step Definition file

	
syntax:
		@AfterAll
		public static void teardown()
		{
				//statement
		}


Feature: Test Sauce Demo application

  Scenario: Validate Scenario_One all Functionality
    Given Scenario1 and Step1
    When Scenario1 and Step2
    Then Scenario1 and Step3

  Scenario: Validate Scenario_Two all Functionality
    Given Scenario2 and Step1
    When Scenario2 and Step2

  Scenario: Validate Scenario_Three all Functionality
    Given Scenario3 and Step1
    When Scenario3 and Step2


package StepDefinition;

import io.cucumber.java.AfterAll;
import io.cucumber.java.BeforeAll;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class SauceDemoSteps {

	@Given("Scenario1 and Step1")
	public void scenario1_and_step1() {
		System.out.println("Scenario1 and Step1");
	}

	@When("Scenario1 and Step2")
	public void scenario1_and_step2() {
		System.out.println("Scenario1 and Step2");
	}

	@Then("Scenario1 and Step3")
	public void scenario1_and_step3() {
		System.out.println("Scenario1 and Step3");
	}

	@Given("Scenario2 and Step1")
	public void scenario2_and_step1() {
		System.out.println("Scenario2 and Step1");
	}

	@When("Scenario2 and Step2")
	public void scenario2_and_step2() {
		System.out.println("Scenario2 and Step2");
	}

	@Given("Scenario3 and Step1")
	public void scenario3_and_step1() {
		System.out.println("Scenario3 and Step1");
	}

	@When("Scenario3 and Step2")
	public void scenario3_and_step2() {
		System.out.println("Scenario3 and Step2");
	}

	@BeforeAll
	public static void setup() {
		System.out.println("Before All Pre condition annotation");
	}

	@AfterAll
	public static void tearDown() {
		System.out.println("After All Pre condition annotation");
	}

}

package TestRunner;

import org.junit.runner.RunWith;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;

@RunWith(Cucumber.class)
@CucumberOptions(
		features="src/test/java/Features",
		glue="StepDefinition",
		dryRun=false
		)
public class RunnerTest {

}
================================================================
@BeforeAll
		- pre condition for all the scenario in feature file

@AfterAll
		- post condition for all the scenario in feature file
-------------------------------------------------------------------------------------------
@Before
		- pre condition for each and every scenario in feature file

@After
		- post condition for each and every scenario in feature file
-------------------------------------------------------------------------------------------
@BeforeStep
		- pre condition for each and every step in feature file
	

@AfterStep
		- post condition for each and every step in feature file

-------------------------------------------------------------------------------------------
package StepDefinition;

import io.cucumber.java.After;
import io.cucumber.java.AfterAll;
import io.cucumber.java.AfterStep;
import io.cucumber.java.Before;
import io.cucumber.java.BeforeAll;
import io.cucumber.java.BeforeStep;

public class Hooks {

	@BeforeAll
	public static void setup() {
		System.out.println("Before All");
	}

	@Before
	public void setup1() {
		System.out.println("Before");
	}

	@BeforeStep
	public void setUp2() {
		System.out.println("Before Step");
	}

	@AfterStep
	public void tearDown2() {
		System.out.println("After Step");
		System.out.println("...............................");
	}

	@After
	public void tearDown1() {
		System.out.println("After");
	}

	@AfterAll
	public static void tearDown() {
		System.out.println("After All");
	}
}
===========================================================
Note:
	can we 2 times same pre condition
		yes we can use and it execute pre condition as per the alphabetical order

	can we use 2 times same post condition annotation?
		yes we can use and it execute post condition as per the reverse alphabetical order

	
	- if u want to maintain pre condition as well as post condition sequence then we use order attribute.
-----------------------------------------------------------------------------------------------------------------------
if we mention background keyword as well as Hooks annotation in cucumber project, then what is execution flow?		VVVVIMMMPPPPPPPPPPPPPPP

	- first priority goes to Hooks pre condition annotations then Backgound keyword.
	- we declare hooks pre condition in Step definition file and 
	we declare Background keyword in feature file.

-----------------------------------------------------------------------------------------------------------------------
diff between Background keyword and Hooks annotations?							VVVVIMMMPPPPPPPPPPPPPPP
	- we declare background keyword in feature file
	- we declare hooks annotation in step definition file

	- by using Background keyword we can mention only pre conditions
	- by using Hooks annotations we can use pre condition as well as post conditions.

	- at the time of executing the project, cucumber gives priority for hooks and then Background keyword.

	-we can not use Background keyword 2 times in same feature file.,
	- we can use Hooks annotation multiple times in Step Definition file



Feature: Test Sauce Demo application

  Background: 
    Given backgroundkeywordstep1
    Given backgroundkeywordstep2

  Scenario: Validate Scenario_One all Functionality
    Given Scenario1 and Step1
    When Scenario1 and Step2
    Then Scenario1 and Step3

  Scenario: Validate Scenario_Two all Functionality
    Given Scenario2 and Step1
    When Scenario2 and Step2

  Scenario: Validate Scenario_Three all Functionality
    Given Scenario3 and Step1
    When Scenario3 and Step2


package StepDefinition;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class SauceDemoSteps {

	@Given("Scenario1 and Step1")
	public void scenario1_and_step1() {
		System.out.println("Scenario1 and Step1");
	}

	@When("Scenario1 and Step2")
	public void scenario1_and_step2() {
		System.out.println("Scenario1 and Step2");
	}

	@Then("Scenario1 and Step3")
	public void scenario1_and_step3() {
		System.out.println("Scenario1 and Step3");
	}

	@Given("Scenario2 and Step1")
	public void scenario2_and_step1() {
		System.out.println("Scenario2 and Step1");
	}

	@When("Scenario2 and Step2")
	public void scenario2_and_step2() {
		System.out.println("Scenario2 and Step2");
	}

	@Given("Scenario3 and Step1")
	public void scenario3_and_step1() {
		System.out.println("Scenario3 and Step1");
	}

	@When("Scenario3 and Step2")
	public void scenario3_and_step2() {
		System.out.println("Scenario3 and Step2");
	}

	@Given("backgroundkeywordstep1")
	public void backgroundkeywordstep1() {
		System.out.println("background keyword step1");
	}
	
	@Given("backgroundkeywordstep2")
	public void backgroundkeywordstep2() {
	    System.out.println("background keyword step 2");
	}

}


package TestRunner;

import org.junit.runner.RunWith;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;

@RunWith(Cucumber.class)
@CucumberOptions(
		features="src/test/java/Features",
		glue="StepDefinition",
		dryRun=false
		)
public class RunnerTest {

}


package StepDefinition;

import io.cucumber.java.After;
import io.cucumber.java.Before;

public class Hooks {

	@Before
	public void setUp() {
		System.out.println("Before Hooks");
	}

	@After
	public void tearDown() {
		System.out.println("After Hooks");
		System.out.println("-----------------------");
	}

}
================================================================================
How to configure Cucumber with TestNG?												VVVVVIMMMPPPPP

	- we have to add cucumber-testng maven dependency as well as testng maven dependency in pom xml file.
	- and we have to remove the @RunWith() annotation and
	we have to extends the AbstractTestNGCucumberTests class in Test Runner class.


package TestRunner;

import io.cucumber.testng.AbstractTestNGCucumberTests;
import io.cucumber.testng.CucumberOptions;

@CucumberOptions(
		features="src/test/java/Features",
		glue="StepDefinition",
		dryRun=false
		)
public class RunnerTest extends AbstractTestNGCucumberTests{

}

		<!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-testng -->
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-testng</artifactId>
			<version>7.14.0</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.testng/testng -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>7.4.0</version>
			<scope>test</scope>
		</dependency>
================================================================================
What the different annotation present in cucumber						VVVVVVIMMMPPPPPPPPP

	1) @RunWith()
	2) @CucumerOptions()
	3) @BeforeAll
	4) @AfterAll
	5) @Before
	6) @After
	7) @BeforeStep
	8) @AfterStep
	9) @Given
	10) @When
	11) @Then


What are the different keyword present in feature file							VVVVVVIMMMPPPPPPPPP
	1) Feature:
	2) Scenario:		or		Example:
	3) Scenario Outline:	or 	Scenario Template:
	4) Examples: 	or 		Scenarios:
	5) Background:
	6) Given
	7) When
	8) Then
	9) And
	10) But
	11) *
	

What are the different keyword present in Test Runner class						VVVVVVIMMMPPPPPPPPP
	1) @RunWith()
	2) @CucumberOptions()
	3) features
	4) glue or extraGlue 
	5) dryRun
	6) monochrome
	7) plugin
	8) tags



====================================================================================================

	<!--
		https://mvnrepository.com/artifact/tech.grasshopper/extentreports-cucumber7-adapter -->
		<dependency>
			<groupId>tech.grasshopper</groupId>
			<artifactId>extentreports-cucumber7-adapter</artifactId>
			<version>1.7.0</version>
		</dependency>



extent.properties inside the src/test/resources package

extent.reporter.spark.start=true
extent.reporter.spark.out=reports/abc.html


extent.reporter.pdf.start=true
extent.reporter.pdf.out=reports/abc.pdf


package TestRunner;

import io.cucumber.testng.AbstractTestNGCucumberTests;
import io.cucumber.testng.CucumberOptions;

@CucumberOptions(
		features="src/test/java/Features",
		glue="StepDefinition",
		dryRun=false,
		plugin= {"com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:"}
		)
public class RunnerTest extends AbstractTestNGCucumberTests{

}












































