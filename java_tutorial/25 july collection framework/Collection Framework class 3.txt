Collection Interface Methods
	1) add(Object o)										boolean
	2) addAll(Collection c)								boolean
	3) remove(Object o)									boolean
	4) removeAll(Collection c)							boolean
	5) contains(Object o)								boolean
	6) containsAll(Collection c)							boolean
	7) isEmpty()										boolean
	8) clear()											void
	9) size()											int
	10) toArrays()										Object []
	11) iterator()										Iterator interface
	12) retainAll(Collection c)							boolean
--------------------------------------------------------------------------------------------------------------------------------------
List Interface Methods
	1) add(int index, Object o)							void
	2) addAll(int index, Collection c)						void
	3) remove(int index)								Object
	4) get(int index)										Object
	5) set(int index, Object o)							Object
	6) indexOf(Object o)									int
	7) listIterator()										ListIterator interface
--------------------------------------------------------------------------------------------------------------------------------------
LinkedList Class Methods
	1) addFirst(Object o)								void
	2) addLast(Object o)									void			
	3) getFirst()											Object
	4) getLast()											Object
	5) removeFirst()									Object
	6) removeLast()										Object
--------------------------------------------------------------------------------------------------------------------------------------
LinkedList class
	- underlying data structure is double linked list
	- insertion order is maintained
	- multiple null values are allowed
	- duplicate values are allowed
	- Heterogeneous object are allowed
	- default capacity is 10
	- all methods are non synchronized
	- Performance is high
	- multiple threads are allowed at same time
	- best choice for insertion or deletion operation

	- LinkedList class define 6 methods
		1) addFirst(Object o)								void
		2) addLast(Object o)									void
		3) getFirst()											Object
		4) getLast()											Object					
		5) removeFirst()									Object
		6) removeLast()										Object

syntax:
			//we can access all methods from Collection interface
			Collection c = new LinkedList();
		
			//we can access all methods from Collection interface and List Interface
			List c1 =new LinkedList();

			//we can access all methods from Collection interface , List interface and LinkedList class.
			LinkedList c2 = new LinkedList();


package Tutorial7;

import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;

public class Demo1 {

	public static void main(String[] args) {
		Collection c1 = new LinkedList();
		c1.add("Rest API");
		c1.add(1000);
		c1.add(23445.34f);
		c1.add(true);
		c1.add(null);
		c1.add("Rest API");
		c1.add(null);

		System.out.println(c1);

		int a = c1.size();
		System.out.println(a);// 7

		boolean b = c1.isEmpty();
		System.out.println(b);

		boolean c = c1.contains("Rest API");
		System.out.println(c);

		boolean d = c1.remove(1000);
		System.out.println(d);// true

		// c1.clear();
		System.out.println(c1);

		Object[] o = c1.toArray();

		for (Object p : o) {
			System.out.println(p);
		}
		System.out.println("-----------------------");

		Iterator it = c1.iterator();

		while (it.hasNext()) {
			Object s = it.next();
			System.out.println(s);
		}

	}
}
========================================================================================================
package Tutorial7;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public class Demo2 {

	public static void main(String[] args) {
		//we can access all methods from Collection interface as well as List interface
		List c1 =new LinkedList();
		c1.add("A");
		c1.add("B");
		c1.add("C");
		c1.add("D");
		
		System.out.println(c1);
		
		c1.add(2, "Selenium");
		
		System.out.println(c1);//A B Selenium C D
		
		//if we use remove() method from List interface then it return the Object
		Object a = c1.remove(3);
		System.out.println(a);
		
		System.out.println(c1);//A B Selenium D
		
		Object b = c1.set(2, "POM");
		System.out.println(b);
		
		System.out.println(c1);//A B POM D
		
		int c = c1.indexOf("D");
		System.out.println(c);//3
		
		ListIterator it = c1.listIterator();
		
		//it run while() block of code if next value is present
		while(it.hasNext())
		{
			//capture the values
			Object o =it.next();
			System.out.println(o);
		}
		
		System.out.println(c1.size());
		System.out.println(c1.isEmpty());
		System.out.println(c1.contains("D"));
		c1.clear();
	

	}

}
=============================================================================================
package Tutorial7;

import java.util.LinkedList;
import java.util.List;

public class Demo3 {

	public static void main(String[] args) {
		LinkedList c1 = new LinkedList();
		c1.add("A");
		c1.add("B");
		c1.add("C");
		c1.add("D");
		
		
		System.out.println(c1);
		c1.addFirst("POM");
		System.out.println(c1);// POM A B C D 

		c1.addLast("RestAPI");
		System.out.println(c1);//POM A B C D RestAPI
		
		Object a = c1.getFirst();
		System.out.println(a);//POM
		
		Object b = c1.getLast();
		System.out.println(b);//RestAPI
		
		Object c = c1.removeFirst();
		System.out.println(c);//POM
		
		Object d = c1.removeLast();
		System.out.println(d);//RestAPI
		
		System.out.println(c1);//A B C D
	}
}
========================================================================================

package Tutorial7;

import java.util.LinkedList;
import java.util.List;

public class Demo3 {

	public static void main(String[] args) {
		LinkedList c1 = new LinkedList();
		c1.add("A");
		c1.add("B");
		c1.add("C");
		c1.add("D");

		System.out.println(c1);
		c1.addFirst("POM");
		System.out.println(c1);// POM A B C D

		c1.addLast("RestAPI");
		System.out.println(c1);// POM A B C D RestAPI

		Object a = c1.getFirst();
		System.out.println(a);// POM

		Object b = c1.getLast();
		System.out.println(b);// RestAPI

		Object c = c1.removeFirst();
		System.out.println(c);// POM

		Object d = c1.removeLast();
		System.out.println(d);// RestAPI

		System.out.println(c1);// A B C D

		// List Interface Method
		c1.add(3, "Hamcrest");
		System.out.println(c1);// A B C Hamcrest D

		// it return removed value
		Object e = c1.set(4, "JSONValidator");
		System.out.println(e);// D

		System.out.println(c1);// A B C Hamcrest JSONValidator

		Object f = c1.get(2);
		System.out.println(f);// C

		Object h = c1.remove(2);
		System.out.println(h);// C

		System.out.println(c1);// A B Hamcrest JSONValidator

		int i = c1.indexOf("Hamcrest");
		System.out.println(i);// 2

	}
}
==============================================================================
package Tutorial7;

import java.util.LinkedList;

public class Demo4 {

	public static void main(String[] args) {
		LinkedList<String> c1 = new LinkedList<String>();
		c1.add("A");
		c1.add("B");
		c1.add("C");
		c1.add("D");

		LinkedList c2 = new LinkedList();
		c2.add("100");
		c2.add("200");
		c2.add("300");

		System.out.println(c1);// A B C D
		// if we addAll() method from Collection then it return boolean
		c1.addAll(c2);
		System.out.println(c1);// A B C D 100 200 300

		boolean c = c1.containsAll(c2);
		System.out.println(c);// true

		// if we use addAll() method from List Interface it return the void
		c1.addAll(2, c2);
		System.out.println(c1);// A B 100 200 300 C D 100 200 300

		boolean r = c1.removeAll(c2);
		System.out.println(r);// true

		System.out.println(c1);// A B C D

	}

}
=========================================================================================
Stack class
	- Underlying data structure is growable array
	- it is child class of Vector class.
	- Insertion order is maintained
	- Duplicate are allowed
	- Multiple Null values are allowed
	- Heterogeneous value are allowed
	- default capacity is 10
	- all methods are synchronized 
	- Performance is low
	- Multiple threads are not allowed
	- it works last in and first out means if we add any last values it display the value in first position.
	- In stack they define new 5 methods
		
		1) push(Object o)						it is used add new values in stack
		2) pop()								it is used to remove the last value
		3) peak(Object o)						it return the first index position or top value					 
		4) empty()								it check the stack is empty or not
		5) search(Object o)						it return the search element in stack


syntax:
		Collection  c1 = new Stack();

		List  c2 = new Stack();

		Vector  c3 = new Stack();
	
		Stack  c14= new Stack();






package Tutorial7;

import java.util.Stack;

public class Demo5 {

	public static void main(String[] args) {

		Stack c1 = new Stack();
		c1.add("A");
		c1.add("B");
		c1.add("C");
		c1.add("D");
		
		System.out.println(c1);
		
		c1.push("P");//it add new value at last
		
		System.out.println(c1);
		
		c1.pop();//it remove last value
		
		System.out.println(c1);//A B C D 
		
		System.out.println(c1.empty());
		
		Object a = c1.peek();//it capture the last value
		
		System.out.println(a);
		
		int b= c1.search("C");
		System.out.println(b);
		
		
		
		
	}

}








































































