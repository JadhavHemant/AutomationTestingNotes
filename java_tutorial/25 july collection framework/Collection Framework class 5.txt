SortedSet interface
	- It is child interface of Set interface
	- SortedSet interface it defines the 5 methods
		1) first()
				- it will capture 1st index position value.
				- return type is Object

		2) last()
				- it will capture last index position value
				- return type is Object.

		3) headSet(Object o)
				- it will capture all before mentioned values
				- return type is SortedSet interface

		4) tailSet(Object o)
				-it will capture all after the mentioned value
				- return type is SortedSet interface.

		5) subSet(Object start, Object end)
				- it will capture values between the start and end
				- return type is SortedSet interface

------------------------------------------------------------------------------------------------------------------
NavigableSet interface
	- it child interface of SortedSet interface
	- NavigableSet interface define the 6 methods
	1) lower(Object o)
			- it will capture the lower values of mentioned value
			- return type is Object.

	2) higher(Object o)
			- it will capture higher values of mentioned value
			- return type is Object

	3)celling(Object o)
			- it will capture same value if we mention TreeSet object values otherwise it will next value of mentioned values
			- return type is Object.

	4) floor(Object o)	
			- it will capture  same value if we mention TreeSet object values otherwise it will capture previous value
			- return type is Object
	
	5) pollFirst()
			- it removes  the first value
			- return type is Object

	6) pollLast()
			- it remove the last value
			- - return type is Object
			
------------------------------------------------------------------------------------------------------------------
TreeSet class:
	- it is implemented class of NavigableSet interface.
	- TreeSet class is implemented class of super parent SortedSet interface.
	- Underlying data structure followed by TreeSet class is "Balanced Tree".
	
	- TreeSet does """not maintain the insertion order"""" but it will add value as per the ascending order or alphabetical order.
	"""- duplicate are not allowed"""
	"""- null insertion is not allowed"""
	"""- Heterogeneous object are not allowed"""		[It accept same datatype values only.]

	- All methods are non synchronized hence performance is high
	- multiple threads are allowed at same time.

syntax:
			//we can access all methods from Collection interface
			Collection c1 =new TreeSet();

			//we can access all methods from Collection interface
			Set c2 =new TreeSet();

			//we can access all methods from Collection interface and SortedSet interface
			SortedSet c3 =new TreeSet();

			//we can access all methods from Collection interface and SortedSet interface and NavigableSet interface
			NavigableSet c4 =new TreeSet();
		
			//we can access all methods from Collection interface and SortedSet interface and NavigableSet interface
			TreeSet c5 =new TreeSet();

			
package Tutorial9;

import java.util.Collection;
import java.util.Iterator;
import java.util.TreeSet;

public class Demo1 {

	public static void main(String[] args) {
		// this allow to access all methods from Collection interface
		Collection c1 = new TreeSet();
		c1.add(1000);
		c1.add(100);
		c1.add(300);
		c1.add(200);
		c1.add(50);

		System.out.println(c1);// 50 100 200 300 1000

		System.out.println(c1.size());// 5
		System.out.println(c1.isEmpty());// false
		System.out.println(c1.contains(300));// true
		System.out.println(c1.remove(100));// true

		System.out.println(c1);
		System.out.println("-----------------------");
		Iterator it = c1.iterator();

		while (it.hasNext()) {
			Object o = it.next();
			System.out.println(o);
		}

		System.out.println("-----------------------");
		Object[] abc = c1.toArray();

		for (Object o : abc) {
			System.out.println(o);
		}

	}

}
============================================================================
package Tutorial9;

import java.util.Collection;
import java.util.TreeSet;

public class Demo2 {

	public static void main(String[] args) {
		Collection c1 = new TreeSet();
		c1.add(1000);
		c1.add(100);
		c1.add(300);
		c1.add(200);
		c1.add(50);

		Collection c2 = new TreeSet();
		c2.add(10000);
		c2.add(2000);
		c2.add(10);
		c2.add(200);
		c2.add(120);

		System.out.println(c1);

		c1.addAll(c2);
		System.out.println(c1);// 10 50 100 120 200 300 1000 2000 10000

		System.out.println(c1.containsAll(c2));// true

		c1.retainAll(c2);

		System.out.println(c1);// 10 120 200 2000 10000

		// c1.removeAll(c2);
		// System.out.println(c1);//50 100 300 1000

	}
}
============================================================================
package Tutorial9;

import java.util.Collection;
import java.util.TreeSet;

public class Demo3 {

	public static void main(String[] args) {
		Collection c1 =new TreeSet();
		c1.add("RestAPI");
		c1.add("Hamcrest");
		c1.add("Selenium");
		c1.add("TestNG");
		c1.add("Abc");
	
		
		System.out.println(c1);//Abc Hamcrest RestAPI Selenium TestNG
		
		

	}

}
============================================================================
package Tutorial9;

import java.util.Collection;
import java.util.TreeSet;

public class Demo4 {

	// ASCII --- A ----> 65
	// a 97

	public static void main(String[] args) {
		Collection c1 = new TreeSet();
		c1.add("abc");
		c1.add("Abc");
		c1.add("aBc");
		c1.add("ABC");
		c1.add("ABc");

		System.out.println(c1);// ABC ABc Abc aBc abc

	}

}
============================================================================
package Tutorial9;

import java.util.Collection;
import java.util.TreeSet;

public class Demo3 {

	public static void main(String[] args) {
		Collection c1 = new TreeSet();
		c1.add("RestAPI");
		c1.add("Hamcrest");
		c1.add("Selenium");
		c1.add("TestNG");
		c1.add("Cucumber");

		System.out.println(c1);// Cucumber Hamcrest RestAPI Selenium TestNG

	}

}
==================================================================================
Capture all values from Month Drop down and print values in ascending order
https://www.facebook.com/reg

Step 1: connect browser
step 2: up casting
step 3: open a url
step 4: find the drop down element
Step 5: create object of Select class by passing WebElement instance
		Select sel =new Select(wb);

step 6 capture all values from drop down
		List<WebElement> ls = sel.getOptions();

step 7: create object of TreeSet class
		Collection c1 =new TreeSet();

step 8: iterate all drop down values and add values inside the TreeSet class
		for(WebElement abc: ls)
		{
				String actualValue = abc.getText();
				c1.add(actualValue);
		}

step 9: use iterator() to print all TreeSet values

		Iterator it = c1.iterator();

		while(it.hasNext())
		{
				Object o = it.next();
				syso(o);
		}
		

package Tutorial2;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.TreeSet;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;

public class Demo1 {

	public static void main(String[] args) {

		WebDriver driver = new ChromeDriver();

		driver.get("https://www.facebook.com/reg");

		WebElement wb = driver.findElement(By.name("birthday_month"));

		Select sel = new Select(wb);

		List<WebElement> ls = sel.getOptions();

		Collection c1 = new TreeSet();

		for (WebElement abc : ls) {
			String actualValue = abc.getText();
			c1.add(actualValue);
		}

		Iterator it = c1.iterator();

		while (it.hasNext()) {
			Object o = it.next();
			System.out.println(o);
		}

	}

}
========================================================================
Print all employee name is alphabetical order
	https://prafpawar11.github.io/emptable.html

				https://www.selenium.dev
Step 1: connect actual browser
		System.setProperty("webdriver.chrome.driver","path of chrome driver");

step 2: up casting
		WebDriver driver =new ChromeDriver();

step 3: open a url
		driver.navigate().to("URL");

step 4: find all employee names
		List<WebElement> ls = driver.findElements(By.xpath(""));

step 5: create Object of TreeSet class
		Collection  c1 =new TreeSet();

step 6: iterate all employees, capture actual values and add values in TreeSet class

		for(WebElement abc: ls)
		{
					String actualValue = abc.getText();
					c1.add(actualValue);
		}

step 7: print all TreeSet values
		
		Iterator it = c1.iterator();

		while(it.hasNext())
		{
				Object o = it.next();
				syso(o);
		}

package Tutorial2;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.TreeSet;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo3 {

	public static void main(String[] args) {

		System.setProperty("webdriver.chrome.driver",
				"C:\\Users\\praf0\\Downloads\\chromedriver-win64 (6)\\chromedriver-win64\\chromedriver.exe");

		WebDriver driver = new ChromeDriver();
		driver.get("https://prafpawar11.github.io/emptable.html");

		List<WebElement> list = driver
				.findElements(By.xpath("//th[text()='Emp Name']/parent::tr/following-sibling::tr/td[1]"));

		Collection c1 = new TreeSet();

		for (WebElement abc : list) {
			String actualValue = abc.getText();
			c1.add(actualValue);
		}

		Iterator it = c1.iterator();

		while (it.hasNext()) {
			Object o = it.next();
			System.out.println(o);
		}

	}
}

=========================================================================================
package Tutorial2;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.FindBys;
import org.openqa.selenium.support.PageFactory;

public class Demo2 {

	static WebDriver driver;

	@FindBys(@FindBy(xpath = "//th[text()='Emp Name']/parent::tr/following-sibling::tr/td[1]"))
	public static List<WebElement> list;

	public Demo2() {
		PageFactory.initElements(driver, this);
	}

	public static void main(String[] args) {

		System.setProperty("webdriver.chrome.driver",
				"C:\\Users\\praf0\\Downloads\\chromedriver-win64 (6)\\chromedriver-win64\\chromedriver.exe");

		driver = new ChromeDriver();

		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.location='https://prafpawar11.github.io/emptable.html';");
		
		new Demo2();
		
		for (WebElement abc : list) {
			String actualValue = abc.getText();
			System.out.println(actualValue);
		}
	}

}
=======================================================================

SortedSet interface
	1) first()
	2) last()
	3) headSet(Object o)
			
	4) tailSet()
	5) subSet()


10 20 30 40 50
		first()					10
		last()					50
		headSet(30)				10 20
			return SortedSet
		tailSet(30)				30 40 50	
			return SortedSet	
		subSet(20,40)			20 30		
			return SortedSet
	
package Tutorial9;

import java.util.SortedSet;
import java.util.TreeSet;

public class Demo5 {

	public static void main(String[] args) {
		SortedSet s1 = new TreeSet();
		s1.add(30);
		s1.add(20);
		s1.add(50);
		s1.add(40);
		s1.add(10);
		
		System.out.println(s1);// 10 20 30 40 50
		
		Object a1 = s1.first();
		System.out.println(a1);//10
		
		Object a2 = s1.last();
		System.out.println(a2);
		
		SortedSet a3 = s1.headSet(30);
		System.out.println(a3);//10 20
		
		SortedSet a4 = s1.tailSet(30);
		System.out.println(a4);//30 40 50
		
		SortedSet a5 = s1.subSet(20, 40);
		System.out.println(a5);//20 30
		
	}

}

=======================================================================
NavigableSet interface
	
	1) lower(Object o)
	2) higher(Object o)
	3) celling(Object o )
	4) floor(Object o)
	5) pollFirst()
	6) pollLast()

	
10 20 30 40 50

		lower(20)					10
		higher(20)					30

		celling(20)					20
		higher(20)					20

		pollFirst()							--10
		pollLast()							--50



package Tutorial9;

import java.util.NavigableSet;
import java.util.TreeSet;

public class Demo6 {

	public static void main(String[] args) {

		NavigableSet s1 = new TreeSet();
		s1.add(30);
		s1.add(20);
		s1.add(50);
		s1.add(40);
		s1.add(10);

		System.out.println(s1);//10 20 30 40 50

		Object a1 = s1.lower(25);
		System.out.println(a1);//20
		
		Object a2 = s1.higher(25);
		System.out.println(a2);//30
			
		Object a3 = s1.floor(25);	//same or lower
		System.out.println(a3);//20
		
		Object a4 = s1.ceiling(25);	//same or higher
		System.out.println(a4);//30
		
		
	}

}


package Tutorial9;

import java.util.NavigableSet;
import java.util.TreeSet;

public class Demo6 {

	public static void main(String[] args) {

		NavigableSet s1 = new TreeSet();
		s1.add(30);
		s1.add(20);
		s1.add(50);
		s1.add(40);
		s1.add(10);

		System.out.println(s1);//10 20 30 40 50

		Object a1 = s1.lower(30);
		System.out.println(a1);//20
		
		Object a2 = s1.higher(30);
		System.out.println(a2);//40
			
		Object a3 = s1.floor(30);	//same or lower
		System.out.println(a3);//30
		
		Object a4 = s1.ceiling(30);	//same or higher
		System.out.println(a4);//30
		
		Object a5 = s1.pollFirst();
		System.out.println(a5);//10
		
		Object a6 = s1.pollLast();
		System.out.println(a6);//50
		
		System.out.println(s1);//20 30 40
		
		
		
	}

}
================================================================================
























































































