Collection Framework
------------------------------------------------------------------------------------------------------------------------------
Collection Interface:
	- Collection Interface is parent class of all Collection Framework object.

	- in collection object we can add single values then we go for collection framework.
							or
	- if u want to add group of individual object as single entity then we group for collection framework.,
	
	- Collection interface it define the 12 methods which is used in all collections implemented classes.
	
	1) add(Object o)		
					- we can add any datatype values in collection object ( implemented classes)
					 - return type of add() method is boolean.

	2) addAll(Collection c)
					- we can add one collection object into another collection object.
					- return type is boolean

		
	3) remove(Object o)		
					- we can remove any value from collection object then we remove() method by passing removed value
					- return type is boolean

	4) removeAll(Collection c)
					- we can remove one collection from another collection object 
					- return type is boolean
	
	5) contains(Object o)
					- we can verify specific value is present or not in collection object.
					- return type is boolean

	6) containsAll(Collection c)
					- we can verify one collection object value is present or not in another collection object											- return type is boolean

	7) clear()
					- clear all collection object values
					- return type is void

	8) size() 
					- we can check size (length) of the collections object values.
					- return type is int

	9) isEmpty()
					 - check collection object is empty or not 
					- return type is boolean

	10) toArrays()
					- convert the collection object into the array
					- return type is Object []

	11) iterator()
					- we can iterate the values using iterator() method
					- return type is Iterator interface


	12) retainAll(Collection c)
					- it remove all values except mentioned collection object name values
					- return type is boolean


	- Collection interface contains we have 3 main child interface are present
	1) List interface
	2) Set interface
	3) Queue Interface
-----------------------------------------------------------------------------------------------------------------------------------------
1) List interface
	- List interface is child interface of collection interface.
	- If u want to add group of individual object as single entity where 
					i) insertion order is maintained means we can add values as per the index position
					ii) duplicate values allowed
					iii) multiple null values are allowed.
	
	- List Interface it defines 7 methods which is applicable for List implemented classes.
					1) add(int index, Object o)
							- it will add value in specific index position
							- return type is boolean
		
					2) addAll(int index, Collection c)
							- it will add one collection object in another collection object on specific index position
							- return type is boolean

					3) remove(int index)
							- it remove the values as per the index position
							- return type is boolean

					4) get(int index)		
							- it used to capture the values from List Object as per the index position
							- return type is Object

					5) set(int index, Object)
							- it is used to set a new value on specific index position
							- return type is Object

					6) indexOf(Object o) 
							- if u want to what is index position for values.
							- return type is int

					7)listIterator() 	
							- it is used to iterate all values from List Object
							- return type is ListIterator interface

	
	- there are 3 child implemented classes of List interface is
					1) ArrayList
					2) LinkedList
					3) Vector

-------------------------------------------------------------------------------------------------------------------------------------------------------------
1) ArrayList
	- underlying data structure for ArrayList is ""Growable Array"" or ""Resizable Array""
	- In ArrayList insertion order is maintained
	- in ArrayList we can add duplicate values
	- in ArrayList we can add multiple null values
	- in ArrayList we can Heterogeneous values means we can add any datatype values
	- Default capacity for ArrayList is 10.
	- ArrayList object is best choice for retrieval operation.
	- All methods from ArrayList class is non- synchronized.
	- ArrayList is faster than Vector class.
	- Multiple Threads are allowed at same time

syntax:
			ArrayList arr = new ArrayList();

			ArrayList<String> arr1  = new ArrayList<String>();

			ArrayList<Integer> arr2  = new ArrayList<Integer>();
		
			ArrayList<Employee> arr3  = new ArrayList<Employee>();	
		

package Tutorial5;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class Demo1 {

	public static void main(String[] args) {
		//we can access all methods from Collection interface
		Collection arr1 = new ArrayList();

		//We can access All methods from Collection Interface as well as List interface
		List arr2 = new ArrayList();

		//We can access All methods from Collection Interface as well as List interface
		ArrayList arr3 = new ArrayList();

	}
}
----------------------------------------------------------------------------------
package Tutorial5;

import java.util.ArrayList;
import java.util.Collection;

public class Demo2 {

	public static void main(String[] args) {
		// we can access all methods from Collection interface
		Collection arr1 = new ArrayList();

		arr1.add("Selenium");
		arr1.add(100);
		arr1.add(true);
		arr1.add(null);

		arr1.add('A');
		arr1.add(133.45f);
		arr1.add("selenium");
		arr1.add("POM");

		arr1.add(null);

		boolean b = arr1.contains(100);
		System.out.println(b);
		
		int size = arr1.size();
		System.out.println(size);

		System.out.println(arr1);
		arr1.remove('A');
		System.out.println(arr1);
		//arr1.clear();
		
		boolean a =arr1.isEmpty();
		System.out.println(a);
		//System.out.println(arr1);

	}
}
==========================================================================
package Tutorial5;

import java.util.ArrayList;
import java.util.Collection;

public class Demo3 {

	public static void main(String[] args) {
		Collection c1 = new ArrayList();
		c1.add("A");
		c1.add("B");
		c1.add("C");
		c1.add("D");

		Collection c2 = new ArrayList();
		c2.add(100);
		c2.add(200);
		c2.add(300);

		System.out.println(c1);	//[A B C D] 		
	
		c1.addAll(c2);//it will add c2 object values in c1
		System.out.println(c1); // A B C D 100 200 300
		
		//c1.removeAll(c2);//it remove all c2 value from C1
		//System.out.println(c1);// A B C D
		
		
		//c1.retainAll(c2); //remove all values except c2 object values
		//System.out.println(c1); //100 200 300
		
		boolean a = c1.containsAll(c2);// it check inside c1 Collection object c2 object value is present or not
		System.out.println(a);
	}
}
==================================================================================
package Tutorial5;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

public class Demo4 {

	public static void main(String[] args) {

		Collection c1 = new ArrayList();
		c1.add("A");
		c1.add("B");
		c1.add("C");
		c1.add("D");

		Object [] abc = c1.toArray();
		
		for(Object o: abc)
		{
			System.out.println(o);
		}
		System.out.println("-------------------------");
		Iterator it = c1.iterator();
		
		//it check next value is present or not in Collection object
		while(it.hasNext())
		{
			// it capture the value values
			Object o = it.next();
			System.out.println(o);
		}
		
		
	}

}
=======================================================================================
package Tutorial5;

import java.util.ArrayList;
import java.util.List;

public class Demo5 {

	public static void main(String[] args) {

		// we can access all methods from Collection interface as well List interface
		List arr = new ArrayList();

		arr.add(1000);
		arr.add("selenium");
		arr.add(null);
		arr.add(true);

		arr.add(23.44f);
		arr.add("selenium");
		arr.add('A');

		System.out.println(arr.size());// 7
		System.out.println(arr.isEmpty());// false
		System.out.println(arr.contains(23.44f));// true
		// arr.clear();
		System.out.println(arr.get(4));// 23.44

	}

}
==============================================================
package Tutorial5;

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

public class Demo6 {
	// add
	// addAll
	// remove
	// get
	// set
	// indexOf
	// listIterator
	public static void main(String[] args) {
		List arr = new ArrayList();

		arr.add("A");
		arr.add("B");
		arr.add("C");
		arr.add("D");

		System.out.println(arr);// A B C D

		arr.add(2, "POM");// it wil add new value on index position 2

		System.out.println(arr); // A B POM C D

		arr.set(1, "Selenium");// it will set the new value on index position 1
		System.out.println(arr); // A Selenium POM C D

		arr.remove(3);
		System.out.println(arr);

		System.out.println(arr.indexOf("POM"));// 2

		ListIterator it = arr.listIterator();

		while (it.hasNext()) {
			System.out.println(it.next());
		}

	}

}
==================================================================
package Tutorial5;

import java.util.ArrayList;

public class Demo7 {

	public static void main(String[] args) {

		// we can access all methods from Collection interface as well as List interface
		ArrayList arr1 = new ArrayList();

		arr1.add("A");
		arr1.add("B");
		arr1.add("C");
		arr1.add("D");

		ArrayList arr2 = new ArrayList();
		arr2.add(100);
		arr2.add(200);
		arr2.add(300);

		ArrayList arr3 = new ArrayList();
		arr3.add("selenium");
		arr3.add("POM");
		arr3.add("Jenkins");

		System.out.println(arr1); // A B C D
		arr1.addAll(arr2);
		System.out.println(arr1); // A B C D 100 200 300

		// add arr3 all values in index position 2

		arr1.addAll(2, arr3);
		System.out.println(arr1);// A B selenium POM Jenkins C D 100 200 300

		//remove all value from arr1 object except arr3 values
		
		arr1.retainAll(arr3);
		System.out.println(arr1);//selenium POM Jenkins
		
		
		// remove all arr2 value from arr1 object

		//arr1.removeAll(arr2);
		//System.out.println(arr1); //A B Selenium POM Jenkins C D

	}

}
======================================================================================
package Tutorial5;

import java.util.ArrayList;

public class Demo8 {

	public static void main(String[] args) {
		// we can access all methods from Collection interface as well as List interface
		ArrayList arr1 = new ArrayList();

		arr1.add("A");
		arr1.add("B");
		arr1.add("C");
		arr1.add("D");
		
		System.out.println(arr1.get(3)); //D
		//add new POJO value in index position 2
		
		arr1.add(2, "P");
		System.out.println(arr1); // A B P C D
		
		//set a new value on index position 3
		arr1.set(3, "S");
		System.out.println(arr1); // A B P S D
	
		arr1.remove(2);
		System.out.println(arr1);// A B S D
		
		System.out.println(arr1.size());//4
		
		System.out.println(arr1.isEmpty());//false
		
		System.out.println(arr1.contains("B"));//true
		
		
		
		
	}
	
	

}
=============================================================================
Collection
		1) add(Object o)												boolean
							
		2) addAll(Collection c)										boolean
		3) remove(Object o)											boolean
		4) removeAll(Collection c)									boolean
		5) contains(Object o)										boolean
		6) containsAll(Collection c)									boolean
		7) clear()													void
		8) isEmpty()												boolean
		9) size()													int
		10) retainAll(Collection c)									boolean
		11) toArrays()												Object []
		12) iterator()												Iterator interface


List
		1) add(int index, Object o)									boolean
		2) addAll(int index, Collection c)								boolean
		3) remove(int index)										Object
		4) get(int index)												Object
		5) set(int index, Object o)									Object				
		6) listIterator()												ListIterator interface
		7) indexOf(Object o)											int










































 

































	






	
	
